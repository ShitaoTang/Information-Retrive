 network working group b cosell request for comment bbn net nic d walden category telnet protocols echoing bbn net references january telnet issues this rfc discusses a number of telnet related issues which have been bothering us the basic central issue we started from was that of echoing we worked downward from our difficulties to discover the basic principles at the root of our unhappiness and from there worked back upwards to design a scheme which we believe to be better in this note we will discuss both the alternate scheme and its underlying principles as something of a non sequitur before discussing echoing we feel it expedient to dismiss one possible stumbling block outright hide your input may or may not be a good idea this question not concerning us at the moment whatever the case the issue of hiding input is certainly separable from that of echoing we therefore strongly recommend that a stop hiding your input command be sanctioned to replace the multiplexing of this function on the no echo command once this has been done the pair of commands hide your input and stop hiding your input can be kept or discarded together and we can discuss the issue of echoing independently of them echoing the basic observation that we made regarding echoing was that servers seem to be optimized to best handle terminals which either do their own echoing or do not but not both therefore the present telnet echoing conventions which prohibit the server from initiating a change in echo mode seemed overly confining the servers are burdened with users who are in the wrong mode in which they might not otherwise have to be and users both human and machine are burdened with remembering the proper echoing mode and explicitly setting it up for all the different servers it is our understanding that this prohibition was imposed on the servers to prevent loops from developing because of races which can arise when the server and user both try to set up an echo mode simultaneously we will describe a method wherein both parties can initiate a change of echo mode and show that the method does not loop cosell walden page rfc telnet issues january this alternate specification relies on three primary assumptions first as above the server as well as the user should be able to suggest the echo mode second all terminals must be able to provide their own echoes either internally or by means of the local host third all servers must be able to operate in a mode which assumes that a remote terminal is providing its own echoes both of these last two result from the quest for a universal minimal basis upon which to build it is fairly easy for a host which normally supplies echoes to disable the appropriate code but it will difficult for a host which does not do echoing to integrate such routines into its system similarly it is easier for a local host to supply echoes to a terminal which cannot provides its own but it borders on the impossible to undo echoing in a terminal which has automatic echoing built into it our proposed specification would use the present echo and no echo commands as follows echo when sent by the server to the user would mean i ll echo to you echo when sent by the user to the server would mean you echo to me no echo when sent by the server to the user would mean i ll not echo to you no echo when sent by the user to the server would mean don t you echo to me these are of course nearly the same meanings that the commands currently have although most current implementations seem to invert the server to user meanings in our specification whenever a connection is opened both server and user assume that the user is echoing locally if the user would in fact prefer the server to echo the user could send off an echo command similarly if the server prefers to do the echoing for instance because the server system is optimized for very interactive echoing the server could send off an echo command neither is required to do anything it is only a matter of preference upon receipt of either command by either party if that is an admissible mode of operation the recipient should begin operating in that mode and if such operation reflects a change in mode it should respond with the same command to confirm that and when the changeover took place if the received command request an inadmissible mode of operation then the command s inverse should be sent as a refusal this must be no echo since neither party can refuse a change into no echo to state these rules more formally both server and user assume that a connection is initially in no echo mode neither party can refuse a request to change into no echo mode either party may send an unsolicited command only to request a change in mode cosell walden page rfc telnet issues january a party only changes its echo mode when it receives an admissible request when a command is received the party replies with its echo mode unless it did not have to change mode to honor the request several properties of this scheme are worthy of note no echo is retained as the nominal connection mode a connection will work in echo mode only when both parties agree to operate that way the procedure cannot loop regardless of which party or both initiates a change or in what time order there are at most three commands sent between the parties servers are free to specify their preferred mode of operation thus human or machine users do not have to learn the proper mode for each server three principles let us mention the general principles we alluded to at the beginning of this note the principles are default implementation negotiated options and symmetry the principle of default implementation merely states that for all options defaults are declare which must be implemented it is this principle which leads us to seek out the minimum for each option to keep the required burden on everybody as small as possible and prevents loops in protocol the principle of negotiated options merely states that options must be agreed upon by all both parties concerned it is this principle which dictated the positive negative acknowledgement scheme the principle of symmetry merely states that neither party should have to know whether it is the server or the user our scheme as described thus far is not totally symmetrical we will consider this matter in a later section the echoing scheme we have described together with the principles stated above form the heart of our comments on the telnet protocol the remainder of this note consists of further ways in which the protocol can be expanded on the whole these suggestions are all really only applications and development of the principles we have already put forward however the fecundity of these expansions and the good feel they have make us yet more convinced of the rightness of our original proposals cosell walden page rfc telnet issues january thus far we have made a simple concrete suggestion that we believe should be immediately sanctioned looking beyond that proposal however has suggestion a large number of further more ambitious changes the remainder of this rfc describes ideas which we don t feel have the immediacy of the proposal above but should nonetheless be kept in mind if the network community decides to embark on revamping the protocol synchronization one complaint we have heard about the present convention for establishing an echoing mode is about the lack of a provision to synchronize a change of echoing mode with the user to server data stream our scheme too is guilty on this count john davidson of the university of hawaii has documented in rfc a more elaborate echoing scheme which doesn t have this problem we however feel that it is possible to eliminate most of the trouble involved with normal changing of echo mode at a more modest cost than that required by the highly interactive scheme described by davidson we can do this by borrowing a small piece of that scheme the rule we would incorporate is that whenever a party initiates a request for a change in echo mode it then buffers without transmitting or processing all data in the user to server data stream until it receives an acknowledgement positive or negative at which time it deals with the buffered data in the newly negotiated mode since with both our proposed and the current schemes such a request is guaranteed to be acknowledgement the buffering time is bounded an important aspect of this technique of eliminating the synchronization problem is that it need not ever become part of the official protocol since its operation is entirely internal to the server or user each may independently weigh the value of elegance against the cost of the required code and buffer space other options abhay bushan has suggested to us that whether the user and server operate line at a time or character at a time mode see rfc should also be a negotiated option further he suggested that whether the terminal follows the telnet end of line convention or not should also be negotiated thus when a connection is opened in addition to being set to no echo mode the terminal would also be set to line at a time and eol modes we could augment the command space with the new commands line no line character eol and no eol separate cr and lf cosell walden page rfc telnet issues january once started in this direction we found several further applications hide your input could be made an option as could davidson s echoing scheme and even the character set to be used consider that an apl subsystem might well want to suggest to its user that ebcdic be used for the connection in mentionaing that the character set could be negotiated it was implicit that bit usascii was the default the possibility of having the default be straight binary suggests itself if we augmented the protocol with a quote character the byte after which were to be always interpreted as data then codes could be retained as the telnet command space independently of the data mode in use by merely prefixing all data bytes in this region with a quote if binary were a permissible data mode then it is easy to visualize many higher level protocols e g perhaps file transfer and graphics being built on top of and into the telnet protocol what we would have accomplished is to promote telnet from being a constrained terminal oriented protocol to its being a flexible general protocol for any type of byte oriented communication with such a backbone many of the higher level protocols could be designed and implemented more quickly and less painfully conditions which would undoubtedly hasten their universal acceptance and availability looking toward a better world of the future we have come up with a more compact and flexible command scheme we ll describe it after the next section symmetry some of the tenex group in particular thomas burchfiel and tomlinson have pointed out to us that although we have made the rules for the protocol symmetrical we have not made the meanings of the commands symmetrical for example the interpretations of the echo command i ll echo to you and you echo to me implicitly assume that both the server and user know who is which this is a problem not only for server server connections where it is not clear which is the user but also for user user connections e g in linking teletypes together where it is not clear which is the server responding to this we came to understand that there are only five reasonable modes of operation for the echoing on a connection pair cosell walden page rfc telnet issues january a process process neither end echoes b process process one end echoes for itself c process process one end echoes for the other v d process v process both ends echo for themselves v e process v process one end echoes for both ends the tenex group suggested to us that four commands are sufficient to deal with completely symmetric echoing we have actually already mentioned the four commands the two possible meanings for each of echo and no echo explicitly the commands would be i ll echo to you you echo to me don t echo to me and i ll not echo to you echoing is now the negotiation of two options and the initial default modes are don t echo to me and i ll not echo to you in the case where the server or user knows which he is the modification to the scheme is minimal since the commands never had ambiguous meanings in these cases when an end truly doesn t know then things are a little more complicated for example consider both ends in i ll echo to you mode but even then the problems are not insurmountable cosell walden page rfc telnet issues january once the principle of symmetry is adopted it is no longer possible to use a function in two different ways on pages and of rfc postel gives a description of ins and sync which indicates that they are used to simulate a break user to server but flush the output buffers server to user since we do believe in symmetry we suggest that the ins data mark be treated the same in both directions and that a new clear your buffer option be added command format extending full symmetry through the other options we have suggested we can now describes the compacted command format referred to earlier rather than having four commands for each option i will i won t you do you don t there would be four prefixes will won t do don t which would be used before the single command devoted to each option won t and don t being the default modes to give an example assume the codes for will and won t are and and the codes for echo remote and hide input are and then several of the possible command combinations would be do hide input do echo remote won t echo remote won t hide input these are some of the commands that we believe should exist i will i will not you do you do not quote sync sync reply echo remote send a character at a time send independent cr and lf send in ebcdic hide input use davidson s echoing strategy an important virtue of this command structure and of our entire viewpoint is that hosts need no longer even be aware of what all the options are if we call the mode of operation in which every alternative is in its default state the nvt then a site of cosell walden page rfc telnet issues january course must handle an nvt but beyond that if it merely responds no to any command it does not understand then it can totally ignore options it chooses not to implement thus options would truly be optional for a change not only to the user who may choose not to invoke them but also to the systems builders who may now choose not to offer them we hereby volunteer to rigorously specify a version of telnet which embodies the principles we have described and to do so at any level of complexity deemed sufficient by the network community cosell walden page rfc telnet issues january appendix a sample implementation the basis scheme we described represents most of what we have been thinking about the further extensions are just that extensions we fear however that some who are spiritually in league with us might be frightened off by the magnitude of all the changes we suggest to combat this we here provide an example of how simply and straight forwardly the basis scheme could be implemented for the tip for each user terminal the tip would keep three state bits whether the terminal echoes for itself no echo always or not echo mode possible whether the human user prefers to operate in echo or no echo mode and whether the connection to this terminal is in echo or no echo mode we call these three bits p hysical d esired and a ctual when a terminal dials up the tip the p bit is set appropriately the d bit is set equal to it and the a bit is set to no echo the p and a bits may be manually reset by direct commands if the user so desires for instance a user in hawaii on a full duplex terminal might know that whatever the preference of a mainland server because of satellite delay his terminal had better operate in no echo mode he would direct the tip to change his d bit from echo to no echo when a connection is opened from the tip terminal to a server the tip would send the server an echo command if the min with no echo less than echo of the p and d bits is different from the a bit if a no echo or echo arrives from the server the tip will set the a bit to the min of the received request the p bit and d bit if this changes the state of the a bit it will send off the appropriate acknowledgement if it does not then the tip will send off the appropriate refusal if not changing meant that it had to deny the request i e the min of the p and d bits was less than the received a request if while a connection is open the tip terminal user changes either the p or d bit the tip will repeat the above tests and send off an echo or no echo if necessary when the connection is closed the tip would reset the a bit to no echo while the tip s implementation would not involve echo or no echo commands being sent to the server except when the connection is opened or the user explicitly changes his echoing mode we would suppose that bigger hosts might send these commands quite frequently for instance if a joss subsystem were running the server might put the user in no echo mode but while ddt was running the server might put the user in echo mode cosell walden page rfc telnet issues january we have assumed that telnet is defined as suggested by jon postel in rfc notice that a faulty implementation could achieve the effect of a loop by repeatedly sending a command which has previously been refused we consider this a property of the implementation not of the scheme in general a command which has be rejected should not be repeated until something changes for instance not until after a different program has been started up will crowther with an eye towards building higher protocols upon telnet has suggested that a sync command not to be confused with the existing synch and a sync reply be added to telnet for example a server might want to wait until the output buffer of a user s terminal were empty before doing something like closing the connection or passing the connection to another server although we see no current use for the command pair they seem to be a handy enough building block that we recommend that they be included it is perhaps appropriate to mention that most of the connections in the network are telnet connections which are full duplex wouldn t it be reasonable to make all host host protocol connections full duplex rather than simplex if for some reason one truly needs a simplex connection the reverse direction can always just be ignored readers unfamiliar with the tip may read the tip users guide nic this rfc was put into machine readable form for entry into the online rfc archives by helene morin via genie cosell walden page 