 network working group r braden request for comments s wolfe nic ucla ccn january netrjs a third level protocol for remote job entry a introduction netrjs is the name for a message protocol and set of control conventions which will allow users at remote hosts to access the rjs remote job service remote batch subsystem of ccn rjs was written at ccn to support remote batch car reader line printer terminals over communications lines rjs makes a remote batch terminal s unit record devices operate as if they were at the central site thus a remote user enters os jobs complete with jcl into the remote reader the jobs are spooled into the operating system and run in their turn and the printed and or punched output is returned to the remote terminal from which the jobs originated unless the user or operator re routes the output the remote terminal may also include a console typewriter to be used by the remote operator to receive and send messages and to exert control over his terminal when rjs is used via the arpa network the remote terminal is expected to be a multiprogrammed user process in a remote host we will use the rjs term remote site for such a user process which presumably simulates unit record devices by file i o furthermore several users at the same remote host may simultaneously use netrjs acting as independent remote sites distinguished by character names called terminal ids because each remote site appears to rjs as a separate physical terminal valid terminal ids will be assigned to individual users or user groups at remote hosts who wish to use netrjs under netrjs a separate arpa network connection is opened from this remote site to ccn for each simulated unit record device each such connection will be called a channel and be designated input or output with reference to ccn we define a standard remote site in netrjs to have the following five channels see figure operator input channel commands and messages entered by remote operator console operator output channel message stream which would normally be directed to remote operator braden et al page rfc netrjs a third level protocol january input stream one simulated hollerith card reader for job submission printer stream one simulated line printer to record printed output system messages and sysout data sets from jobs punch stream one simulated card punch capable of recording arbitrary i e transparent binary text rjs actually will support more than one reader printer and punch at each remote terminal so the netrjs protocol could easily be expanded to allow multiple simultaneous i o streams to each network user however this does not presently appear useful as the arpa network bandwidth will normally be the limitation on the transmission speed under netrjs under netrjs the text of a single network message is called a block a block is of variable length up to bytes except operator input and output blocks which may not exceed bytes here the term byte refers to the set of bits representing one character each byte is to be aligned on an bit boundary within the message and block thus we may consider a block to be a string of bytes the detailed format of a block will be defined in sections e f and g using essentially the formalism suggested by bobrow and sutherland in rfc since the central site host ccn is an ibm netrjs uses the ibm ebcdic character code to avoid redundant code conversion at both hosts in those cases when the remote host also uses ebcdic internally however the message formats make no assumption about the code and in fact object decks sent to the simulated card punch will normally contain arbitrary binary text to maximize the use of the available network bandwidth we strongly recommend transmitting input blocks as large as possible ccn will always fully block netrjs output furthermore to avoid excessive overhead we urge that all netrjs users make their marking a multiple of bits so the messages received at ccn arrive on a byte boundary b starting a session the initial connection protocol for netrjs is essentially that of crocker in rfc as restated by harslem and heafner in rfc with some extensions user u at a remote host presumably requests his outgoing logger to make a netrjs connection to ccn this braden et al page rfc netrjs a third level protocol january logger does so by first sending an initial rfc to connect socket user aen u s to ccn socket user at ccn is the incoming logger and aen signifies netrjs the ccn incoming logger will allocate a set of six consecutive aen numbers a a a for user u return a message containing the socket number u a as specified in rfc and close the initial connection the remote and central sites will then open an input channel between ccn socket u a socket f in figure and remote socket u s this is the remote operator input channel the other devices have fixed aen s at ccn assigned relative to a in particular ccn socket channel user aen operator input u a operator output u a card reader no u a printer no u a punch no u a once the operator input channel is open the remote site must transmit a valid rjs signon message this message is free format and consists of the command verb signon followed by the user s terminal id if rjs does not recognize the terminal id or has no available line handler for the network it will indicate refusal by closing the operator input channel central site issues subsequent rfc s for the other channels listed above only in response to corresponding rfc s from the remote site to terminate the session the remote site may close the console input channel socket a in figure alternatively the user can enter a signoff command through the operator input channel in this case rjs will wait until the current job output streams are complete and then terminate the session rjs terminates the session by closing the console output channel socket g also if rjs should abend then socket g will close if either site terminates the session all other connections for this remote site should be closed note that a user can submit a number of jobs sign off and later receive his output when he signs on again c channel control flow control in netrjs is handled by the network protocol all mechanism before transmission of a stream of records can begin on a particular channel the remote site must issue an rfc and central must reply this allows the central site to determine the remote braden et al page rfc netrjs a third level protocol january configuration dynamically a particular card reader printer or punch channel is open only while it is active so the receiver need not tie up buffer space needlessly each of these channels when open assumes a buffer allocation of at least bytes at the receiver the operator input and output channels on the other hand are open throughout the session on these channels the receiver must provide an allocation of at least bytes after sending the signon command over the operator input channel the remote site should send rfc s for all output channels which are ready to receive data when output is available for that site central returns an rfc and begins transmission central closes an output channel socket i and j at the end of the output for each complete batch job the remote site must then send a new rfc and central must reply with an rfc to start output for another job to that device this gives the remote site a chance to allocate a new file for each job without breaking the output within a job if the user at the remote site wants to cancel or backspace or defer the output of a particular job he enters appropriate rjs commands on the operator input channel when the remote site is ready to submit a job or stack of consecutive jobs it issues an rfc for the card reader input channel the remote site is not required to close the channel socket c after each job in a stack of jobs but he must close it following the last job in the stack to initiate its processing it may be necessary for the receiver site to abort a particular channel perhaps due to a transmission error see section d below on checking or a disk i o error the receiver may abort a channel other than console output by closing it sockets d e f and h this action signals the transmitter to re transmit the information after the channel has been reopened initiated by the remote site as always the transmitter on the other hand aborts a channel by sending a block with a particular bit combination e in bcbyte see section e if either site aborts card reader input channel rjs will discard the text of the last partially spooled job the remote site should re transmit this job note that repeating an entire stack will enter duplicate jobs into the system but the second copy of a job will flush due to its duplicate job name if a printer or punch output channel is aborted central will re transmit from the beginning of the current sysout data set the effect is the same as a restart command braden et al page rfc netrjs a third level protocol january if the operator input channel is aborted the remote site must re transmit the last block finally the operator output channel has no abort condition defined central will never send channel abort message on this channel if the remote site closes its socket socket b central will not re transmit but simply cease sending messages until the channel is reopened therefore a remote site can operate without an operator output channel however we do not recommend this as the user will then miss operator advisory messages such as a warning of an impending ipl d checking the nature of remote job entry service is such that a low rate of undetected errors is mandatory the imp s use crc s and sequence numbers over the communication lines so the effective imp imp error rate should be negligible although there is no checking provided for the imp host interface it seems likely that these interfaces will either be reliable or fail catastrophically it seems unlikely that drop outs or other random failures will occur therefore only the following simple checks are provided each block will at least initially contain a fixed bit check pattern using both on and off states of each bit path in the bit pda interface at ccn it is anticipated that even this crude check on imp host transmission will be useful both during the initial checkout of hardware and software and also later if the interface becomes marginal however either site can omit the check pattern if it sets a bit in the block control byte bcbyte see section f each block contains a sequence number again this is intended for initial checkout and to signal catastrophic hardware or software problems if the receiver detects an incorrect check pattern or block sequence number he aborts the channel by closing the corresponding network connection the remote site should then issue an rfc to re establish the network connection the sequence number of the first block after an rfc is the numbers are never reset while the connection is open braden et al page rfc netrjs a third level protocol january e block format block blockhead record r endofblock here r blockhead bcbyte e check devbyte the blockhead field consists of a block control byte a bit check field check and a device byte bcbyte bit e errorcontrol b blkseq here blkseq contains a bit modulo block sequence number b errorcontrol is a bit field with the following meanings e normal block contains a presumably valid check field check e block contains no check field check e abort channel initiated by transmitter channels is not closed transmission restarts on job related boundary devbyte bit n devno t devtype this byte identifies a particular remote device i e it identifies a stream devtype specifies the type of device as follows t output to remote operator console input from remote operator console input from card reader output to printer output to card punch unused devno is a bit integer which identifies the particular device type of type t at this remote site check byte byte byte byte endofblock byte braden et al page rfc netrjs a third level protocol january record format record data record jobnamerecord the first record sent on a printer or punch output channel will be a jobnamerecord identifying the os jobname of the job which produced the following output datarecord bit devcntrl string p endofrecord jobnamerecord byte byte jobname endofrecord jobname textbyte this is the character os jobname for the following job devcntrl d bit k bit devcntrl specifies carriage control for a printer so if the device is not a printer then devcntrl should be for a printer d space k lines after printing k is allowed d immediately space k lines d k skip to top of new page after printing d k immediately skip to top of new page string i dupcount this is a string of i consecutive blanks i dupcount textbyte this is a string of i consecutive duplicates of textbyte j length textbyte j this is an uncompressed string of j characters endofrecord byte braden et al page rfc netrjs a third level protocol january g field definitions name meaning length bits bit bit field bit bit field bit bit field blkseq block sequence number byte bit field aligned on bit boundary check block check number devno device number of a given type devtype device type dupcount number of replications of duplicated character in compressed text errorcontrol block transmission error control length length in bytes of the following string of text textbyte an bit byte of text note all non terminal fields whose names end in byte represent bytes in both length and alignment braden et al page rfc netrjs a third level protocol january h notes and references martin v a and springer t w implementation of a remote job service technical report tr campus computing network ucla los angeles undated the rjs operator commands and messages are described in detail in reference we use the phrase starting a session rather than logging on because rjs has its own log on procedure which is we suppose a fourth level protocol note that netrjs uses closing of connections as end of file signals remote site central site ccn a console input o o f b console output o o g c card reader o o h d printer o o i e card punch o o j figure arpa network connections channels for a standard remote site under netrjs r t braden rb s m wolfe this rfc was put into machine readable form for entry into the online rfc archives by lorrie shiota braden et al page 