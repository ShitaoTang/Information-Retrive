 network working group e harslem request for comments j heafner nic rand december protocols and data formats because of recent discussions of protocols and data formats we issue this note to highlight our current attitudes and investigations in those regards we first discuss some specific sequences and then offer some thoughts on two general implementation approaches that will handle these and other specifics we wish to place emphasis on the general solutions and not on the specifics initial connection protocols we wish to make two points concerning specific initial connection protocols ipcs firstly the ipc described in new rfc its generality and a restatement of that icp secondly a proposal for a variant icp using basically the same logic as nwg rfc i nwg rfc the only technical error in this ipc is that as diagrammed both the server and user send all messages before the connections are established which is inconsistent with network document no this can easily be remedied as will be shown in the restatement below in terms of generality any icp that is adopted as a standard should apply to more situations than a process calling a logger that is some network service processes that hook directly to a user process independent of logger action could perhaps use a standard icp thus as is shown below the process name field of the server socket should be a parameter with a value of zero being a special case for loggers restatement of nwg rfc using the same wording where appropriate to initiate contact the using process attaches a receive socket us and requests connection to process serv socket in the serving host serv for icp to the logger as a result the using ncp sends harslem et al page rfc protocols and data formats december rts us serv p over link where p is the receive link the serving process serv may decide to refuse to the call in which case it closes the connection if it accepts the call the serving process completes the connection via an init system call hence an str str serv us when the connection is completed the user process allocates a nominal amount of space to the connection resulting in the ncp sending all p space where space is the amount the serving process then selects the socket pair it wishes to assign this user it sends exactly an even bit number over the connection this even bit number ss is the receive socket in the serving host this socket and the next higher numbered socket are reserved for the using process it then closes the connection the serving ncp sends step ss on link p and step harslem et al page rfc protocols and data formats december cls serv us on the control link which is echoed by the using ncp now that both server and user are aware of the remote socket pair for the duplex connection s can be exchanged sever sends user str ss us rts ss ss q where q is the server s receive link user sends server str us ss rts us ss r where r is the user s receive link allocates may then be sent and transmission begun ii a variation of nwg rfc this variation reduces network messages and eliminates duplication of information transfer steps and above are deleted the user process is not notified directly which of the server s sockets it will be assigned the user process however will listen on sockets us and us for calls from serv after step above it can reject any spurious calls in accepting the calls from serv the connection is established the following sample sequence illustrates this icp the notation is as above harslem et al page rfc protocols and data formats december user server rts us serv p server user if accepted str serv us cls serv us if rejected cls serv us if accepted user listens on us and us server user str ss us rts ss us q user accepts the calls hence user sender str us ss rts us ss r and the connection is established harslem et al page rfc protocols and data formats december this reduces the number of network messages by two and only passes the information regarding the server s sockets once via rts and str pre specified data formats we would like to adopt those suggestions for data formats in nwg rfc and we subscribe to multiple standards as solutions to particular problem classes an adaptable mechanism we would like to adapt to network use problem programs that were not planned with the network in mind and which no doubt will not easily succumb to network standards existing at the time of their inclusion this incompatibility problem is just as fundamental a part of the research underlying the network as is different host hardware to require extensive front ends on each such program is not a reasonable goal we view the network as an amalgamation of a hosts that provide services b parasite hosts that interface terminals to the services and c a spectrum of hosts that behave as both users and providers of services to require that each parasite host handle different protocols and data formats for all services that its users need is not a reasonable goal the result is programs and terminals that wish to communicate but do not speak the same language one approach to the protocol and data format problems is to provide an adaptable mechanism that programs and terminals can use to easily access network resources arpa is sponsoring the adaptive communicator project at rand which is a research effort to investigate a teachable front end process to interface man to program the variety of terminal devices being explored include voice tablets sophisticated graphics terminals etc the adaptive communicator looks very encouraging but it will not be ready for some time the network project at rand chose to take the adaptable approach not adaptive i e no heuristics no self learning our problem is to get rand researchers onto the network easily assuming that they have different simultaneous applications calling for different program protocols and data configurations protocols and data formats will be described separately to illustrate what we mean by adaptation protocols are sequences of system calls that correspond to and result in ncp s issuance of ncp commands data formats are the descriptions of regular message contents and are not meaningful to an ncp harslem et al page rfc protocols and data formats december the form machine adapting to data formats to put the reader in context the form machine is of the class of finite state machines that recognize a form of regular expressions which in our case describe data formats the notation however is aimed at particular descriptions and therefore can be more succinct for our purposes than the language of regular expressions the form machine is an experimental software package that couples a variety of programs and terminals whose data format requirements are different we envision form machines located to reduce network traffic at various service providing hosts to test the form machine idea we are implementing two ibm os callable subroutines a compiler that compiles statements which describe forms of data formats and an executor that executes a compiled form on a data stream to describe the form machine test it is necessary to mention another program at rand the network services program nsp which is a multi access program that interfaces the network control program both to arbitrary programs and to video graphics consoles we view a terminal as just another program with a different interface i e characters line lines page unique hardware features the application to which it is put etc the form machine subroutines are callable from nsp upon consoles or program direction operationally a console user names and specifies the data forms that he will use the forms are compiled and stored for later use at some future time when the user wishes to establish network connections and transmit data he dynamically associates named forms with each side of a port a symbolically named network full duplex connection data streams incoming or outgoing are executed according to the compiled form and the transformed data stream is then passed along to the console program or to the network respectively the details of the syntax of our form machine notation are unimportant to the collective network community however the provisions of the notation are of interest it will eventually encompass the description of high performance crt displays tty and arbitrary file structures to test its viability a subset of such features is being implemented harslem et al page rfc protocols and data formats december the current version is characterized by the following features character code translation viz decimal octal hexidecimal bit ascii bit ascii ebcdic and binary multiple break strings many terminals have multiple termination signals insertion of literals used primarily for display information presentation skip or delete arbitrary strings used to remove record sequence numbers etc that are not to be displayed record sequence number generation string length computation and insertion arbitrary data string length specifications e g a hex literal string followed by an arbitrary number of ebcdic characters followed by a break string concatenation of network messages i e the execution of compiled forms on incomplete data strings data field transposition both explicit and indefinite multiplicative factors for both single and multi line messages features that are not being implemented but will be added if successful include graphics oriented descriptions general number translations conditional statements a pointer capability the protocol manager adapting to ncp command sequences the nsp allows terminal users and programs to work at the ncp protocol level i e listen init et al it also allows them to transmit and massage information meaningful only to themselves this hands on approach is desirable from the systems harslem et al page rfc protocols and data formats december programmer s or exploratory point of view however it is desirable to eliminate the laborious handshaking for the researcher who repeatedly uses a given remote program by allowing him to define store retrieve and execute canned protocol sequences we are currently specifying a protocol manager as a module of nsp that will allow the above operations on ncp command sequences features of the module are the sequences may contain break points to permit the console user to dynamically inject any contextually needed information the parameters of a command may contain tokens whose values are supplied by the remote party during the protocol dialog for example in note the socket number provided by the server is to be used by the user in subsequent rts str commands request we would like to hear from anyone concerning the notion of adaptation to data formats and protocol is this a reasonable approach what should it encompass jfh efh hs harslem et al page rfc protocols and data formats december distribution albert vezza mit alfred cocanower merit gerry cole sdc bill english sri bob flegel utah james forgie ll peggy karp mitre nico haberman carnegie mellon john heafner rand bob kahn bb n margie lannon harvard james madden univ of ill thomas o sullivan raytheon larry roberts arpa robert sproull stanford ron stoughton ucsb chuck rose case university benita kirstel ucla this rfc was put into machine readable form for entry into the online rfc archives by lorrie shiota harslem et al page 