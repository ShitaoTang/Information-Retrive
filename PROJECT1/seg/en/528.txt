 network working group a bhushan request for comments mit project mac nic april a file transfer protocol i introduction computer network usage may be divided into two broad categories direct and indirect direct usage implies that you the network user are logged into a remote host and use it as a local user you interact with the remote system via a terminal teletypewriter graphics console or a computer differences in terminal characteristics are handled by host system programs in accordance with standard protocols such as telnet rfc for teletypewriter communications netrjs rfc for remote job entry you however have to know the different conventions of remote systems in order to use them indirect usage by contrast does not require that you explicitly log into a remote system or even know how to use the remote system an intermediate process makes most of the differences in commands and conventions invisible to you for example you need only know a standard set of network file transfer commands for your local system in order to utilize remote file system this assumes the existence of a network file transfer process at each host cooperating via a common protocol indirect use is not limited to file transfers it may include execution of programs in remote hosts and the transfer of core images the extended file transfer protocol would facilitate the exchange of programs and data between computers the use of storage and file handling capabilities of other computers possibly including the trillion bit store data computer and have programs in remote hosts operate on your input and return an output the protocol described herein has been developed for immediate implementation on two hosts at mit the ge multics and the pdp dm cg its and possibly harvard s pdp an interim version with limited capabilities is currently in the debugging stage since our implementation involves two dissimilar systems multics is a service system its is not with different file systems multics provides elaborate access controls its provides none we feel that the file transfer mechanisms proposed are generalizable in addition our specification reflects a consideration of other file systems on the network we conducted a survey of network host bhushan page rfc a file transfer protocol april systems to determine the requirements and capabilities this paper is a first cut at a protocol that will allow users at any host on the network to use the file system of every cooperating host ii discussion a few definitions are in order before the discussion of the protocol a file is an ordered set consisting of computer instructions and or data a file can be of arbitrary length a named file is uniquely identified in a system by its file name and directory name the directory name may be the name of a physical directory or it may be the name of a physical device an example of physical directory name is owner s project programmer number and an example of physical device name is tape number a file may or may not have access controls associated with it the access controls designate the users access privileges in the absence of access controls the files cannot be protected from accidental or unauthorized usage a principal objective of the protocol is to promote the indirect use of computers on the network therefore the user or his program should have a simple and uniform interface to the file systems on the network and be shielded from the variations in file and storage systems of different host computers this is achieved by the existence of a standard protocol in each host criteria by which a user level protocol may be judged were described by mealy in rfc as involving the notion of logical records ability to access files without program modifications and implementability i would add to these efficiency extendibility adaptability and provision of error recovery mechanisms the attempt in this specification has been to enable the reliable transfer of network ascii bit ascii in bit field with leftmost bit zero as well as binary data files with relative ease the use of other character codes such as ebcdic and variously formatted data decimal octal ascii characters packed differently is facilitated by inclusion of data type in descriptor headings an alternative mechanism for defining data is also available in the form of attributes in file headings the format control characters reserved for the syntax of this protocol have identical code representation in ascii and ebcdic these character are soh stx etx dc dc dc us rs gs and fs bhushan page rfc a file transfer protocol april the notion of messages the physical blocks of data communicated between ncp s is suppressed herein and that of logical records and transactions is emphasized the data passed by the ncp is parsed into logical blocks by use of simple descriptors code and count mechanisms as described in section iii the alternative to count is fixed length blocks or standard end of file characters scan data stream both seem less desirable than count the cooperating processes may be daemon processes which listen to agreed upon sockets and follow the initial connection protocol much in the same way as a logger does we recommend using a single full duplex connection for the exchange of both data and control information and using cls to achieve synchronization when necessary a cls is not transmitted until a rfnm is received the user may be identified by having the using process send at the start of the connection the user s name information either passed on by user or known to the using system this user name information a sequence of standard ascii characters along with the host number known to the ncp positively identifies the user to the serving process at present more elaborate access control mechanisms such as passwords are not suggested the user however will have the security and protection provided by the serving system the serving host if it has access controls can prevent unprivileged access by users from other host sites it is up to the using host to prevent its own users from violating access rules the files in a file system are identified by a pathname similar to the labels described in rfc bouknight madden and grossman the pathname contains the essential information regarding the storage and retrieval of data in order to facilitate use default options should be provided for example the main file directory on disk would be the default on the pdp its and a pool directory would be the default on multics the file to be transferred may be a complete file or may consist of smaller records it may or may not have a heading a heading should contain ascii or ebcdic characters defining file attributes the file attributes could be some simple agreed upon types or they could be described in a data reconfiguration or interpretation language similar to that described in rfc anderson haslern and heffner or a combination bhushan page rfc a file transfer protocol april the protocol does not restrict the nature of data in the file for example a file could contain ascii text binary core image graphics data or any other type of data the protocol includes an execute request for files that are programs this is intended to facilitate the execution of programs and subroutines in remote host computers iii specifications transactions a the protocol is transaction oriented a transaction is defined to be an entity of information communicated between cooperating processes b syntax a transaction has three fields a bit descriptor field and variable length including zero data and filler fields as shown below the total length of a transaction is data filler bits bits bits bits bits bits variable length descriptor field bits data and filler c semantics the code field has three bit bytes the first byte is interpreted as transaction type the second byte as data type and the third byte as extension of data type the filler count is a binary count of bits used as filler i e not information at the end of a transaction as the length of the filler count field is bits the number of bits of filler shall not exceed bits the data count is a binary count of the number of data i e information bits in the data field not including filler bits the number of data bits is limited to as there are bits in the data count field bhushan page rfc a file transfer protocol april the nul bytes are inserted primarily as fillers in the descriptor field and allow the count information to appear at convenient word boundaries for different word length machines transaction types a a transaction may be of the following four basic types request response transfer and terminate although large number of request and transfer types are defined implementation of a subset is specifically permitted host computers on which a particular transaction type is not implemented may refuse to accept that transaction by responding with an unsuccessful terminate the following transaction type codes are tentatively defined transaction type transaction type code ascii octal hexidecimal request identify i retrieve r store s append a delete d rename n e addname plus p deletename minus m d lookup l c open o f close c execute e response ready to receive rr c ready to send rs e transfer complete file heading part of file c last part e terminate successful pos b unsuccessful neg d bhushan page rfc a file transfer protocol april b syntax in the following discussion us rs gs fs dc dc and dc are the ascii characters unit separator octal record separator octal group separator octal file separator octal device control octal device control octal and device control octal respectively these have an identical interpretation in ebcdic b requests identify retrieve store append delete open lookup and execute requests have the following data field rename request has the data field gs addname and deletename requests have the data field gs where pathname name and filenames have the following syntax expressed in bnf the metalanguage of the algol report us dc all bit ascii or ebcdic characters except us rs gs fs dc dc and dc rs the data type for the request transaction shall be either a octal for ascii or e octal for ebcdic some examples of pathname are dc mt dc dsk us net us j doe us foo udd us proj us h n x us user us file filename filename bhushan page rfc a file transfer protocol april b responses the response transactions shall normally have an empty data field b transfers the data types defined in section will govern the syntax of the data field in transfer transactions no other syntactical restrictions exist b terminates the successful terminate shall normally have an empty data field the unsuccessful terminate may have a data field defined by the data types a octal for ascii e octal for ebcdic or s octal for status a data type code of s would imply byte oriented error return status codes in the data field the following error return status codes are defined tentatively error code meaning error code ascii octal hexadecimal undefined error u transaction type error t syntax error s file search failed f data type error d access denied a improper transaction sequence i time out error o f error condition by system e c semantics c requests requests are always sent by using host in absence of a device name or complete pathname default options should be provided for all types of requests identify request identifies the user as indicated by from serving to using host retrieve request achieves the transfer of file specified in from serving to using host bhushan page rfc a file transfer protocol april store request achieves the transfer of file specified in from using to serving host append request causes data to be added to file specified in pathname rename request causes name of file specified in to be replaced by name specified in delete request causes file specified in to be deleted if an extra level of protection for delete is desired such as the query do you wish to delete file x it is to be a local implementation option addname and deletename requests cause names in to be added or deleted to existing names of file specified in these requests are useful in systems such as multics which allow multiple names to be associated with a file lookup request achieves the transfer of attributes such as date last modified access list etc of file specified in instead of the file itself open request does not cause a data transfer instead file specified in is opened for retrieve read or store write subsequent requests are then treated as requests pertaining to the file that is opened till such a time that a close request is received execute request achieves the execution of file specified in which must be an executable program upon receipt of rr response using host will transmit the necessary input data parameters arguments etc upon completion of execution serving host will send the results to using host and terminate c response responses are always sent by serving host the rr response indicates that serving host is ready to receive the file indicated in the preceding request the rs response indicates that the next transaction from serving host will be the transfer of file indicated in the preceding request bhushan page rfc a file transfer protocol april c transfers transfers may be sent by either host transfer transactions indicate the transfer of file indicated by a request files can be transferred either as complete file transactions or as part of file transactions followed by last part transactions the file may also have a heading transaction in the beginning the syntax of a file therefore may be defined as headings may be used to communicate the attributes of files the form of headings is not formally specified but is discussed in section iv as possible extension to this protocol c terminates the successful terminate is always sent by serving host it indicates to using host that serving host has been successful in serving the request and has gone to an initial state using host will then inform user that his request is successfully served and go to an initial state the unsuccessful terminate may be sent by either host it indicates that sender of the terminate is unable to or does not not wish to go through with the request both hosts will then go to their initial states the using host will inform the user that his request was aborted if any reasons for the unsuccessful terminate either as text or as error return status codes are received these shall be communicated to the user transaction sequence a the transaction sequence may be defined as an instance of file transfer initiated by a request and ended by a terminate the exact sequence in which transactions occur depends on the type of request a transaction sequence may be aborted anytime by either host as explained in section c b examples the identify request doesn t require a response or terminate and constitutes a transaction sequence by itself bhushan page rfc a file transfer protocol april rename delete addname deletename and open requests involve no data transfer but require terminates the user sends the request and the server sends a successful or an unsuccessful terminate depending on whether or not he is successful in complying with the request retrieve and lookup requests involve data transfer from the server to the user the user sends the request the server responds with a rs and transfers the data specified by the request upon completion of the data transfer the server terminates the transaction sequence with a successful terminate if all goes well or with an unsuccessful terminate is errors were detected store and append requests involve data transfer from the user to server the user sends the request and the server responds with a rr the user then transfers the data upon receiving the data the server terminates the sequence execute request involves transfer of inputs from user to server and transfer of outputs from server to user the user sends the request to which the server responds with rr the user then transfers the necessary inputs the server executes the program or subroutine and transfers the outputs to the user upon completion of the output transfer the server terminates the transaction sequence c aborts either host may abort the transaction sequence at any time by sending an unsuccessful terminate or by closing the connection ncp to transmit a cls for the connection the cls is a more drastic type of abort and shall be used when there is a catastrophic failure or when an abort is desired in the middle of a long file transfer the abort indicates to the receiving host that the other host wishes to terminate the transaction sequence and is now in the initial state when cls is used to abort the using host will reopen the connection data types a the data type code together with the extension code defines the manner in which the data field is to be parsed and interpreted although a large number of data types are defined specific implementations may handle only a limited subset of data types it is recommended that all host sites accept the bhushan page rfc a file transfer protocol april network ascii and binary data types host computers which do not recognize particular data types may abort the transaction sequence and return a data type error status code b the following data types are tentatively defined the code in the type and extension field is represented by its ascii equivalent with th bit as zero bhushan page rfc a file transfer protocol april data type code byte size type extension ascii character bit network a nul ascii characters bit a ascii characters bit even parity a e ascii characters bit odd parity a o ascii characters th bit info a ascii characters bits a ascii characters in bit field a ascii formatted files with soh stx etx etc a f dec packed ascii bit char th bit or a d ebcdic characters e nul sixbit characters s nul binary data b nul binary bytes size is binary ext b any decimal numbers net ascii d a decimal numbers ebcdic d e decimal numbers sixbit d s decimal numbers bcd binary coded d b octal numbers net ascii o a octal numbers ebcdic o e octal numbers sixbit o s hexadecimal numbers net ascii h a hexadecimal numbers ebcdic h e hexadecimal numbers sixbit h s unsigned integers binary ext field is byte size u any sign magnitude integers field is binary size i any s complement integers ext field is byte size any s complement integers ext field is byte size any floating point ibm f i floating point pdp f d status codes s nul bhushan page rfc a file transfer protocol april c the data type information is intended to be interpretive if a host accepts a data type it can interpret it to a form suited to its internal representation of characters or numbers specifically when no conversion is to be performed the data type used will be binary the implicit or explicit byte size is useful as it facilitates storing of data for example if a pdp receives data types a a ae or a it can store the ascii characters five to a word dec packed ascii if the datatype is a or a it would store the characters four to a word sixbit characters would be stored six to a word if conversion routines are available on a system the use of system program could convert the data from one form to another such as ebcdic to ascii ibm floating point to dec floating point decimal ascii to integers etc initial connection cls and identifying users a there will be a prearranged socket number for the cooperating process on the serving host the connection establishment will be in accordance with the initial connection protocol of rfc as modified by rfc the ncp dialog would be user to server rts if accepted server to user str server to user on link p server to user strrts user to server strrts this sets up a full duplex connection between user and server processes with server receiving through local socket ss from remote socket us via link q and sending to remote socket us through local socket ss via link r b the connection will be broken by trading a cls between the ncp s for each of the two connections normally the user will initiate the cls cls may also be used by either the user or the server to abort a data transmission in the middle if a cls is received in the middle of a transaction sequence the whole transaction sequence will be aborted the using host will then reopen the connection c the first transaction from the user to server will be the identify transaction the users will be identified by the pathname in data field of the transaction which should be a bhushan page rfc a file transfer protocol april form acceptable to the server the server is at liberty to truncate pathnames for its own use since the identify transaction does not require a response or terminate the user can proceed directly with other requests iv extensions to protocol the protocol specified above has been designed to be extendable the obvious extensions would be in the area of transaction types new types of requests error return status words and data types some of the non obvious extensions that i can visualize are provisions of access control mechanisms developing a uniform way of specifying file attributes in headings of files increasing the scope of the execute command to include subroutine mediation and the provision of transaction sequence identification numbers to facilitate handling of multiple requests over the same connection pair users of protected file systems should be able to have a reasonable degree of confidence in the ability of the serving process to identify remote users correctly in the absence of such confidence some users would not be willing to give access to the serving process especially write access inclusion of access control mechanisms such as passwords is likely to enhance the indirect use of network by users who are concerned about privacy and security a simple extension to the protocol would be to have the serving host sent a transaction type password after it receives user name upon receipt of password the using host will transmit the password which when successfully acknowledged would indicate to the user that requests may proceed there are a number of file attributes which properly belong in the heading of a file rather than the file itself or the data type in descriptors of transactions such attributes include access control lists date file was last modified information about the nature of file and description of its contents in a data description or data reconfiguration language some uniformity in the way file attributes are specified would be useful until then the interpretation of the heading would be up to the user or the using process for example the heading of files which are input to a data reconfiguration form machine may be the desired transformations expressed in the reconfiguration language the execute command which achieves the execution of programs resident in remote hosts is a vital part of indirect use of remote hosts the present scope of the execute command as outlined in the specifications is somewhat limited it assumes that the user or bhushan page rfc a file transfer protocol april using process is aware of the manner in which the arguments and results should be exchanged one could broaden the scope of the execute command by introducing a program mediation protocol the present specification of the protocol does not allow the simultaneous transfer and processing of multiple requests over the same pair of connections if such a capability is desired there is an easy way to implement it which only involves a minor change a transaction sequence identification number tsid could replace a nul field in the descriptor of transactions the tsid would facilitate the coordination of transactions related to a particular transaction sequence the code combinations permitted by the tsid would be used in a round robin manner i can t see more than outstanding requests between two user processes in any practical implementation an alternate way of simultaneous processing of requests is to open new pairs of connection i am not sure as to how useful simultaneous processing of requests is and which of the two is a more reasonable approach v conclusions i tried to present a user level protocol that will permit users and using programs to make indirect use of remote host computers the protocol facilitates not only file system operations but also program execution in remote hosts this is achieved by defining requests which are handled by cooperating processes the transaction sequence orientation provides greater assurance and would facilitate error control the notion of data types is introduced to facilitate the interpretation reconfiguration and storage of simple and limited forms of data at individual host sites the protocol is readily extendible endnotes the interim version of the protocol limited to transfer of ascii files was developed by chander ramchandani and howard brodie of project mac the ideas of transactions descriptors error recovery aborts file headings and attributes execution of programs and use of data types pathnames and default mechanisms are new here howard brodie and neal ryan have coded the interim protocol in the pdp and the respectively the network system survey was conducted last fall by howard brodie of project mac primarily by telephone pdp reference handbook page bhushan page rfc a file transfer protocol april we considered using two full duplex links one for control information the other for data the use of a separate control link between the cooperating processes would simplify aborts error recoveries and synchronization the synchronization function may alternatively be performed by closing the connection in the middle of a transaction sequence and reopening it with an abort message the use of inr and ins transmitted via the ncp control link has problems as mentioned by kalin in rfc we prefer the latter approach identifying users through use of socket numbers is not practical as unique user identification numbers have not been implemented and file systems identify users by name not number this subject is considered in detail by bob metcalfe in a forthcoming paper filler bits may be necessary as particular implementations of ncp s may not allow the free communication of bits instead the ncp s may only accept bytes as suggested in rfc the filler count is needed to determine the boundary between transactions bits in descriptor field are convenient as is the least common multiple of and the commonly encountered byte sizes on the arpa network host computers the execute request is intended to facilitate the indirect execution of programs and subroutines however this request in its present form may have only limited use a subroutine or program mediation protocol would be required for broader use of the execute feature metcalfe considers this problem in a forthcoming paper the pathname idea used in multics is similar to that of labels in rfc by bouknight madden and grossman we however urge the use of standard network ascii the exact manner in which the input and output are transmitted would depend on specific mediation conventions names of input and output files may be transmitted instead of data itself the transactions including terminate are not echoed as echoing does not solve any hung conditions instead time out mechanisms are recommended for avoiding hang ups the data type mechanism suggested here does not replace data reconfiguration service suggested by harslem and heafner in rfc and nic in fact it complements the reconfiguration for bhushan page rfc a file transfer protocol april example data reconfiguration language can be expressed in ebcdic network ascii or any other code that form machine may recognize subsequent data may be transmitted binary and the form machine would reconfigure it to the required form i have included in data types a large number suggested by harslem and heafner as i do not wish to preclude interpretation reconfiguration and storage of simple forms of data at individual host sites the internal character representation in the hosts may be different even in ascii for example pdp stores bit characters five per word with th bit as don t care while multics stores them four per word right justified in bit fields it seems that socket has been assigned to logger and socket to netrjs socket seems a reasonable choice for the file transfer process the term program mediation was suggested by bob metcalfe who is intending to write a paper on this subject this rfc was put into machine readable form for entry into the online rfc archives by ryan kato bhushan page 