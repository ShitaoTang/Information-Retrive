 network working group bob thomas request for comments bbn tenex nic january categories protocols telnet references reconnection protocol there are situations in which it is desirable to move one or both ends of a communication path from one host to another this note describes several situations in which the ability to reconnect is useful presents a mechanism to achieve reconnection sketches how the mechanism could be added to host host or telnet protocol and recommends a place for the mechanism in the protocol hierarchy some examples a consider the case of an executive program which tip users could use to get network status information send messages link to other users etc due to the tip s limited resources the executive program would probably not run on the tip itself but rather would run on one or more larger hosts who would be willing to share some of their resources with the tip see figure the tip user could access the executive by typing a command such as exec the tip would then icp to host s executive port after obtaining the latest network news and perhaps sending a few messages the user would be ready to log into host in general not the same as host and do some work at that point he would like to tell the executive program that he is ready to use host and have executive hand him off to host to do this the executive program would first interact with host telling it to expect a call from tip and then would instruct the tip to reconnect to host when the user logs off host he could be passed back to the executive at host prepatory to doing more work elsewhere the reconnection activity would be invisible to the tip user reconnection exec user host v tip host figure thomas page rfc reconnection protocol january b imagine a scenario in which a user could use the same name and password and perhaps account to log into any server on the network for reasons of security and economy it would be undesirable to have every name and password stored at every site a user wanting to use a host that doesn t have his name or password locally would connect to it and attempt to log in as usual see figure the host discovering that it doesn t know the user would hand him off to a network authentication service which can determine whether the user is who he claims to be if the user passes the authentication test he can be handed back to host which can then provide him service the idea is that the shuffling of the user back and forth between host and authenticator should invisible to the user a for authentication user host x v authenticator b user host authentication complete authenticator figure thomas page rfc reconnection protocol january if the user doesn t trust the host and is afraid that it might read his password rather than pass him off to the authenticator he could connect directly to the authentication service after authentication the authenticator can pass him off to the host c the mcross air traffic simulation system see sjcc paper already supports reconnection it permits an on going simulation to reconfigure itself by allowing parts to move from computer to computer for example in a simulation of air traffic in the northeast the program fragment simulating the new york enroute air space could move from host to host see figure as part of the reconfiguration process the new york terminal area simulator and boston enroute area simulators break their connections with new york enroute simulator at host and reconnect to it at host ny terminal ny enroute boston enroute boston terminal host host host host x move x v v v reconnect reconnect host ny enroute figure a reconnection mechanism the mechanism proposed here could be added to the existing host host protocol or to the telnet protocol the mechanism is first described and then its adaptation to each of the protocols is discussed the reconnection mechanism includes four commands reconnect request rrq reconnect ok rok reconnect no rno reconnect do rdo where is the communication path to be redirected to assume that h wants to move its end of communication path a c from itself to port d at h see figure thomas page rfc reconnection protocol january a situation b desired situation h h h h c d c d a a h h figure the reconnection proceeds by steps a h arranges for the reconnection by sending rrq to h h h rrq path a c b h agrees to reconnect and acknowledges with rok h h rok path c a c h notes that h has agreed to reconnect and instructs h to perform the reconnection h h rdo path a c host h port d d h breaks paths a c h breaks path c a and initiates path c d in order for the reconnection to succeed h must of course have arranged for h s cooperation one way h could do this would be to establish the path b d and then proceed through the reconnection protocol exchange with h concurrently with its exchange with h see figure h h rrq path b d h h rok path d b h h rdo path b d host h port c thomas page rfc reconnection protocol january h h c d x x reconnection reconnection a b h figure either of the parties may use the rno command to refuse or abort the reconnection h could respond to h s rrq with rno h can abort the reconnection by responding to rok with rno rather than rdo it is easy to insure that messages in transit are not lost during the reconnection receipt of the rok message by h is taken to mean that no further messages are coming from h similarly receipt of rdo from h by h is taken to mean that no further messages are coming from h to complete the specification of the reconnection mechanism consider the situation in which two adjacent entities initiate reconnections a situation b desired situation h h h h c e c e h h h h b d b d thomas page rfc reconnection protocol january h and h simultaneously try to arrange for reconnection h h rrq path b d h h rrq path d b thus h sees an rrq from h rather than an rok or rno in response to its rrq to h this race situation can be resolved by having the reconnections proceed in series rather than in parallel first one entity say h performs its reconnect and then the other h performs its reconnect there are several means that could be used to decide which gets to go first perhaps the simplest is to base the decision on sockets and site addresses the entity for which the bit number formed by concatenating the bit socket number with the bit site address is largest gets to go first using this mechanism the rule is the following if h receives an rrq from h in response to an rrq of its own let nh nh the bit numbers corresponding to h and h a if nh nh then both h and h interpret h s rrq as an rok in response to h s rrq b if nh q r r q v q p r o k r n o r r q e v yes no np nq v v p q r d o r n o e e v q p r d o r n o e e np and nq are the bit numbers for p and q e indicates end of sequence adding the reconnection mechanism to host host protocol the four reconnect commands could be included directly in host host protocol as follows rrq rok rno rdo the rok and rdo commands for a send connection should not be sent until there are no messages in transit over the connection the rdo thomas page rfc reconnection protocol january command is to be interpreted as a cls the reconnection h h h h c d c d a b h h could be accomplished as follows h h rrq a c h h rrq b d h h rok c a h h rok d b h h rdo a c h d h h rdo b d h c h h cls c a h h cls d b h h str c d size h h rts d c link note that it is possible for the str from h to arrive at h before the rdo from h h must be prepared to queue such an rfc until it gets an rdo or rno from h stated differently transmission of an rok for a local socket causes the socket to move from an open state to a reconnect pending state and indicates willingness to queue subsequent rfc s until receipt of a matching rdo or rno reconnection in telnet protocol independently of whether host host protocol directly supports reconnection the reconnection mechanism could be included in telnet with the addition to the telnet protocol of the five commands rrq rok rno rdo rwt thomas page rfc reconnection protocol january where rrq rok rno rdo and rwt are appropriately chosen characters in the range to the first three commands require no parameters since they refer to the connections they are received on for rdo and rwt is an bit telnet character host address and is a bit telnet characters number that specifies a telnet receive socket at the specified host a pending reconnection can be activated with either rdo or rwt the response to either is to first break the telnet connection with the sender and then reopen the telnet connection to the host and sockets specified for rdo the connection is to be reopened by sending two rfc s for rwt by waiting for two rfc s the rwt command is introduced to avoid races such as the one between the str and cls rdo discussed above in host host protocol the race is avoided by putting a connection into reconnect pending state upon transmission of rok for telnet the race can be avoided by the initiator of the reconnection by judicious use of rwt and rdo for example the reconnection h h h h m y n q z y n z h m p x h h x could be accomplished as follows x y rrq x z rrq y x rok z x rok x y rwt h p x closes connections to y y closes connections to x y waits for str and rts from h x z rdo h n x closes connections to z z closes connections to x z sends str and rts to h which y answers with matching rts and str to complete reconnection thomas page rfc reconnection protocol january the reconnection mechanism for telnet can be made to fit nicely into the command format suggested by cosell and walden in rfc consider the addition of three new commands to telnet prepare for reconnect rcp begin reconnect by sending rfc s rcs begin reconnect by waiting for rfc s rcw using these three command and the do don t will won t commands of rfc the commands proposed earlier become rrq do rcp rok will rcp rno won t rcp for responses to do rcp don t rcp for responses to will rcp i e used to cancel an rcp rdo do rcs rwt do rcw as rfc notes the nice thing about this structure is that a host choosing not to implement reconnection does not even have to know what rcp means all that it need do in response to do rcp is to transmit won t rcp recommendation i feel that reconnection is a basic notion and that its proper place within the protocol hierarchy is at the host host level where it would be available for use in all higher level protocols the difficulty is that placing it there would of course require ncp rewrites reluctance to make ncp modifications would probably be sufficient to kill interest in the proposal therefore for pragmatic reasons i recommend that the reconnection mechanism be included in telnet as an option in the spirit of rfc this can be accomplished with the addition to the telnet protocol of the rcp rcs rcw commands as described in section modification of user and server telnet programs to handle these new commands should be straightforward if a reconnection option is made part of telnet protocol the tenex hosts will support it in addition the tip guys walden and cosell have said that they like the reconnection mechanism and have agreed in principle to implement it for tips if it is accepted as part of telnet protocol thomas page rfc reconnection protocol january addition of reconnection at the telnet level rather than the host host level is admittedly a compromise however with it activity of the sort described in examples a and b of section will be possible additional remarks a reconnection is not a new notion an early proposal for host host protocol rfc included facilities to support reconnection the reconnection mechanism in rfc supposes a configuration in which entities are daisy chained together by connections and specifies how one or more entities can break out of the chain as suggested above figure the mechanism proposed in this note supports that kind of reconnection b in practice one would expect simultaneous initiation of reconnects by adjacent entities to be relatively rare c the approach taken in rfc to handle simultaneous reconnection attempts by entities adjacent in the chain is to accomplish the reconnect as a single carefully coordinated global reconnect i feel that the sequence of locally coordinated reconnects as proposed above is preferable when n adjacent entities simultaneously attempt reconnection the single globally coordinated reconnect as outlined in rfc requires n control messages whereas the sequential locally coordinated reconnect requires n d a word about security is in order it should be clear that the decision to accept or reject a particular reconnection request is the responsibility of the entity person at a terminal or process using the connection in many cases the entity may choose to delegate that responsibility to its ncp or telnet e g example a section however the interface a host provides to the reconnection mechanism should include means for local entities to exercise control over response to remotely initiated reconnection requests for example a user telnet might support several modes of operation with respect to remotely initiated reconnections transparent all requested reconnections are to be performed in a way that is invisible to the user visible all requested reconnections are to be performed and the user is to be informed whenever a reconnection occurs thomas page rfc reconnection protocol january confirmation the user is to be informed of each reconnection request which he may accept or reject rejection all requested reconnects are to be rejected e reconnection can be achieved almost trivially within the message switched protocol msp proposed by bressler murphy and walden in rfc within msp reconnection is probably not the correct term for example use of the following conventions with that msp expressed in the terminology of rfc support reconnection unless a reconnection is in progress rendezvous is to occur at the sending site the receiving end of a communication path can be moved by passing the names of the rendezvous site and the ports to the new receiver receipt of an out message for which the source site differs from the rendezvous site signals that the sending end is being moved the source site should be used as the rendezvous site for subsequent in messages the sending end of a communication path can be moved by passing the names of the ports to the new sender to complete the move the new sender uses the previous sender s site as rendezvous site for its first out message and its own site as rendezvous for subsequent out messages as simple and appealing as this procedure seems i doubt that it would be used in practice if msp were to be implemented as a replacement for or alternative to existing host host protocol the reason is that the ability to pass ports from host to host needlessly complicates port name allocation by requiring cooperation among hosts to manage the allocation e g before a host can safely allocate a port name for use by a local process it must not only insure that the port is not in use locally but also that no process out in the network is using it the inter host cooperation required to support the passage of ports among hosts can probably not be reliably achieved in practice therefore port passage of the sort described in rfc should not be supported at the host host protocol level for this reason i feel that within an msp reconnection would be best handled by a mechanism such as the one proposed in this note this rfc was put into machine readable form for entry into the online rfc archives by anthony anderberg thomas page 