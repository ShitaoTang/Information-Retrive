 network working group r braden request for comment ucla ccn nic march ftp data compression i introduction apologia major design objectives of the proposed file transfer protocol ftp are reliability and efficiency for transmission of large files efficiency has two faces efficiency of the host cpu s and efficient use of the network bandwidth block mode is intended to minimize cpu overhead for bandwidth efficiency there is a mode called hasp in rfc the hasp mode of ftp is really transmission with data compression i e an encoding scheme to reduce the information redundancy in the messages rfc contains no explicit definition of the hasp or compressed mode but instead notes that a future rfc by yours truly will define the mode students of ftp may find this scarcely credible but you are now reading the promised rfc it turned out to be much farther in the future than any of us expected mea culpa general considerations in the early years of the network its major uses have been remote terminal interactions and the small to medium sized file transmission typical of remote job entry as facilities such as the illiac iv and the data machine become operational on the network and the network community begins to include users with heavy data transmission requirements large file transmission will become a major mode of network use for example one user of ccn expects to send x bits of data each day over the network local byte compression of the type proposed here is particular effective for reducing the size of printer files such as those transmitted under the network rje protocol experience with ccn s rjs service has shown a typical compression of print files by a factor of between two and three since ftp was intended to contain the data transfer part of network rje protocol as a subset it is appropriate to include a print file compression mechanism in ftp these considerations led the ftp committee to include a compressed mode within ftp braden page rfc ftp data compression march the two main arguments for data compression are economics and convenience usability consider first economics which is essentially a trade off between cpu time and transmission costs of course as long as network use is a free commodity the economics of data compression are all bad that happy state won t last forever what does data compression cost let us consider only simple linear compression schemes such as the one proposed here by linear i mean that the cpu time to examine a source record is proportional to number of bytes in the record a simple linear scheme could detect repeated single characters for example one could imagine quadratic schemes which detected repeated substrings but except for possible special circumstance where the source stings have some structure known to the compression algorithm the cpu economics don t favor quadratic compression assuming a reasonable figure for large scale cpu costs in the generation of ccn s we concluded that an upper bound on cpu costs for total compression and decompression would be cents per megabit this is based on very loose coding of a simple linear algorithm this may be compared with the projected network transmission costs of over cents per megabit possibly a lot over thus the cpu time to conserve bandwidth costs significantly less than the bandwidth saved both cpu costs and bandwidth costs are trending downward but it seems exceedingly unlikely that the ratio of cpu cost to bandwidth cost for linear compression will reverse in the next few years on the other hand this calculation clearly discourages one from using quadratic compression why hasp ccn s batch remote job entry protocol netrjs see rfc july was designed to include two data transfer modes truncated and compressed the netrjs truncated mode is essentially identical to current ftp block mode record structure except for minor bit format differences the compressed mode of netrjs uses an adaptation of the particular compression scheme which is incorporated in the multileaving protocol of the binary synchronous rje support in ibm s hasp system although it isn t really necessary for the purpose of defining a compression scheme in ftp i have included an appendix summarizing very briefly the nature of hasp and its rje package that appendix may be considered cultural enrichment for those in the network community who have been denied the privilege of being an ibm customer after all i know a lot of hasp experts who never heard of braden page rfc ftp data compression march tenex more seriously because hasp is widely used on ibm machines the hasp compression scheme is also widely used in designing netrjs we chose the hasp scheme of compression because of its ubiquity and plausibility however certain details of the hasp bit formats are inappropriate or sub optimal for ftp therefore our proposal for compressed mode of ftp is only an adaptation of the hasp compression scheme it should be clear from appendix a that the compression scheme of hasp even if used literally is a very minor and incidental part of that system although we ought to properly credit the intellectual origin of ftp s compressed mode it seems a little strange to call the compressed mode in ftp the hasp mode i trust this will be rectified by the forthcoming ftp meeting ii proposed ftp compressed data mode byte size is b bits figures above boxes are field lengths in bits n bytes of data b b b byte string n d d n string of n data bytes d d n count n must be positive b b replicated byte n d string consisting of n replications of the data byte d b filler string n string of n filler bytes the filler byte is a space character for ascii or ebcdic type or a binary zero byte for image or local byte type b b control escape sequence c see below braden page rfc ftp data compression march the control byte c which is the second byte of a control escape sequence is to have the same coding as the descriptor byte in block mode this includes end of file and end of record indications i will not specify this further because there is some question at present about the exact coding of the block mode descriptor byte following the example of apl we have let the meaning of the filler blank or be determined by the type character ascii ebcdic vs binary image local byte if byte size is equal to the word size of the transmitting host the compressed mode allows one to send sparse notices with reasonable efficiency compare take a with take braden page rfc ftp data compression march appendix a hasp multileaving hasp houston automatic spooling program is a subsystem which essentially runs within os as a job but takes over the batch processing management functions from the operating system that is hasp handles spooling of card input and printer and punch output queueing and scheduling of job execution and the operator control interface it is a tightly written and efficient system for running a large and varied job load through a large scale machine the name results from the historical fact that hasp was originally by a local ibm group for one particular customer nasa houston hasp has always been an anomaly in the ibm scheme of things the system was written around by two programmers the hasp group has probably averaged three programmers during most of its life the leader of the group has been mr hasp tom simpson the hasp system spread rapidly through more or less underground channels to many of the medium and large scale s at least once only intense customer pressure prevented ibm from killing the hasp effort hasp generated an astonishing emotional mystique among its users the hasp sessions at share meetings were reminiscent of revival meetings for years every share meeting has included hasp song sessions around the piano during the nightly open bar hasp forms a fascinating chapter in the history of ibm s large machine business the core concepts in hasp are pseudo devices and the general technique of intercepting supervisor calls to augment operating system functions without changing the operating system itself a generation of os system programmers learned these techniques from hasp these important techniques are hardly ever described in the literature and practical programmers don t read the literature anyway when hasp starts up in supervisor state it overlays an instruction in the i o supervisor with a branch to its own code a user program is written as if it were doing real i o to card readers and printers hasp intercepts and interprets these i o operations to handle job i o in a manner transparent to os it similarly intercepts and interprets operator console i o hasp includes batch remote job entry using binary synchronous communication the hasp communication protocol and message formats use a scheme developed by simpson s group called multileaving protocol the hasp rje system by far the best rje package ibm has produced finally replaced two competitive ibm packages and has effectively become the ibm standard for rje ccn s rjs system not only adopted the multileaving protocol but essentially copied its binary synchronous communication line handler directly form hasp braden page rfc ftp data compression march the multileaving protocol is described in the hasp manual as the fully synchronized pseudo simultaneous bidirectional transmission of a variable number of data streams between two or more computers using binary synchronous communications facilities it allows a remote batch terminal to operate a variable number of card readers and printers simultaneously at different speeds over one communication line it is not surprising that hasp multileaving contains in miniature many of the features of imp imp protocol and a little host host protocol specifically multileaving includes the following general features conversational transmission line protocol using transparency dle stx etc strong error control and retransmission using a bit crc and a modulo block sequence number flow control for multiple streams in both directions this includes the interchanging of matching control records rfc s to open a stream and a set of flow control bits in each block each flow control bit is logically equivalent to an allocate command for one message buffer for a particular stream optional special control information for remote devices this includes printer carriage control switching card reader hoppers etc multiplexing multileaving multiple streams into a single block for transmission marking end of file and ends of records within each stream compressing transmitted text by encoding repeated blanks and repeated single characters braden page rfc ftp data compression march finally we have reached the only aspect of hasp relevant to ftp its compression scheme hasp uses the following encoding end of record data string n d d n n duplicate blanks n n replicated characters d n d hasp is concerned only with bit bytes however there is a provision which was never implemented in the multileaving protocol to set the unit of the counts n as byte bytes or bytes reference hasp ii system manual ibm corporation february this rfc was put into machine readable form for entry into the online rfc archives by via genie braden page 