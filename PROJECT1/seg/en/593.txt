 file transfer protocol aug rfc nic nancy j neigus see also rfcs bolt beranek and newman inc cambridge mass file transfer protocol for the arpa network file transfer protocol aug rfc nic preface this document is the result of several months discussion via rfc relevant numbers are followed by a meeting of the ftp committee at bbn on march followed by further communication among committee members there are a considerable number of changes for the last official version see rfcs but the gross structure remains the same the places to look for differences are in the definitions pf types and modes in the specification of the data connection and data sockets in the command reply sequences in the functions dependent on the telnet protocol ftp has been altered to correspond to the new telnet spec the model has been clarified and enlarged to allow inter server file transfer and several new commands have been added to accommodate more specialized or site specific functions it is my belief that this new specificiation reflects the views expressed by the committee at the above mentioned meeting and in subsequent conversations the large number of incompatibilities would complicate a phased implementation schedule such as is in effect for the telnet protocol therefore we have assigned a new socket decimal as a temporary logger socket for the new version and a change over date of february until that date the old version of ftp will be available on socket and the new version attached should be implemented on socket on february the new version will shift to socket and the old disappear from view the file transfer protocol should be considered stable at least until february though one should feel free to propose further changes via rfc implementation of new commands on an experimental basis is encouraged and should also be reported by rfc in addition members of the ftp committee may be contacted directly about changes based on attendance at the march meeting they are abhay bhushan mit dmcg bob braden ucla ccn bob bressler bbn net bob clements bbn tenex john day ill ants peter deutsch parc maxc wayne hathaway ames mike kudlick sri arc alex mckenzie bbn net bob merryman ucsd cc nancy neigus bbn net mike padlipsky mit multics jim pepin usc ken pogran mit multics jon postel ucla nmc file transfer protocol aug rfc nic milton reese fnwc brad reussow harv marc seriff mit dmcg ed taft harv bob thomas bbn tenex ric werme cmu jim white sri arc i would especially like to thank bob braden ken pogran wayne hathaway jon postel ed taft and alex mckenzie for their help in preparing this document njn jm file transfer protocol aug rfc nic file transfer protocol introduction the file transfer protocol ftp is a protocol for file transfer between hosts including terminal interface message processors tips on the arpa computer network arpanet the primary function of ftp is to transfer files efficiently and reliably among hosts and to allow the convenient use of remote file storage capabilities the objectives of ftp are to promote sharing of files computer programs and or data to encourage indirect or implicit via programs use of remote computers to shield a user from variations in file storage systems among hosts and to transfer data reliably and efficiently ftp though usable directly by a user at a terminal is designed mainly for use by programs the attempt in this specification is to satisfy the diverse needs of users of maxi hosts mini hosts tips and the datacomputer with a simple and easily implemented protocol design this paper assumes knowledge of the following protocols described in nic the host host protocol the initial connection protocol the telnet protocol discussion in this section the terminology and the ftp model are discussed the terms defined in this section are only those that have special significance in ftp terminology ascii the usascii character set as defined in nic in ftp ascii characters are defined to be the lower half of an eight bit code set i e the most significant bit is zero access controls access controls define users access privileges to the use of a system and to the files in that system access controls are necessary to prevent unauthorized or accidental use of files file transfer protocol aug rfc nic it is the prerogative of a server ftp process to provide access controls byte size the byte size specified for the transfer of data the data connection is opened with this byte size the data connection byte size is not necessarily the byte size in which data is to be stored in a system nor the logical byte size for interpretation of the structure of the data data connection a simplex connection over which data is transferred in a specified byte size mode and type the data transferred may be a part of a file an entire file or a number of files the path may be between a server dtp and a user dtp or between two server dtps data socket the passive data transfer process listens on the data socket for an rfc from the active transfer process server in order to open the data connection the server has fixed data sockets the passive process may or may not eof the end of file condition that defines the end of a file being transferred eor the end of record condition that defines the end of a record being transferred error recovery a procedure that allows a user to recover from certain errors such as failure of either host system or transfer process in ftp error recovery may involve restarting a file transfer at a given checkpoint ftp commands a set of commands that comprise the control information flowing from the user ftp to the server ftp process file transfer protocol aug rfc nic file an ordered set of computer data including programs of arbitrary length uniquely identified by a pathname mode the mode in which data is to be transferred via the data connection the mode defines the data format during transfer including eor and eof the transfer modes defined in ftp are described in the section on transmission modes nvt the network virtual terminal as defined in the arpanet telnet protocol nvfs the network virtual file system a concept which defines a standard network file system with standard commands and pathname conventions ftp only partially embraces the nvfs concept at this time pathname pathname is defined to be the character string which must be input to a file system by a user in order to identify a file pathname normally contains device and or directory names and file name specification ftp does not yet specify a standard pathname convention each user must follow the file naming conventions of the file systems he wishes to use record a sequential file may be structured as a number of contiguous parts called records record structures are supported by ftp but a file need not have record structure reply a reply is an acknowledgment positive or negative sent from server to user via the telnet connections in response to ftp commands the general form of a reply is a completion code including error codes followed by a text string the codes are for use by programs and the text is usually intended for human users file transfer protocol aug rfc nic server dtp the data transfer process in its normal active state establishes the data connection by rfc to the listening data socket sets up parameters for transfer and storage and tranfers data on command from its pi the dtp can be placed in a passive state to listen for rather than initiate an rfc on the data socket server ftp process a process or set of processes which perform the function of file transfer in cooperation with a user ftp process and possibly another server the functions consist of a protocol interpreter pi and a data transfer process dtp server pi the protocol interpreter listens on socket for an icp from a user pi and establishes a telnet communication connection it receives standard ftp commands from the user pi sends replies and governs the server dtp telnet connections the full duplex communication path between a user pi and a server pi the telnet connections are established via the standard arpanet initial connection protocol icp type the data representation type used for data transfer and storage type implies certain transformations between the time of data storage and data transfer the representation types defined in ftp are described in the section on establishing data connections user a human being or a process on behalf of a human being wishing to obtain file transfer service the human user may interact directly with a server ftp process but use of a user ftp process is preferred since the protocol design is weighted towards automata file transfer protocol aug rfc nic user dtp the data transfer process listens on the data socket for an rfc from a server ftp process if two servers are transferring data between them the user dtp is inactive user ftp process a set of functions including a protocol interpreter a data transfer process and a user interface which together perform the function of file transfer in cooperation with one or more server ftp processes the user interface allows a local language to be used in the command reply dialogue with the user user pi the protocol interpreter initiates the icp to the server ftp process initiates ftp commands and governs the user dtp if that process is part of the file transfer the ftp model with the above definitions in mind the following model shown in figure may be diagrammed for an ftp service user interface user v ftp commands server user pi pi ftp replies v v data file server user file system dtp connections dtp system server ftp user ftp notes the data connection may be in either direction the data connection need not exist all of the time figure model for ftp use file transfer protocol aug rfc nic in the model described in figure the user protocol interpreter initiates the telnet connections at the initiation of the user standard ftp commands are generated by the user pi and transmitted to the server process via the telnet connections the user may establish a direct telnet connection to the server ftp from a tip terminal for example and generate standard ftp commands himself by passing the user ftp process standard replies are sent from the server pi to the user pi over the telnet connections in response to the commands the ftp commands specify the parameters for the data connection data socket byte size transfer mode representation type and structure and the nature of file system operation store retrieve append delete etc the user dtp or its designate should listen on the specified data socket and the server initiate the data connection and data transfer in accordance with the specified parameters it should be noted that the data socket need not be in the same host that initiates the ftp commands via the telnet connections but the user or his user ftp process must ensure a listen on the specified data socket it should also be noted that two data connections one for send and the other for receive may exist simultaneously in another situation a user might wish to transfer files between two hosts neither of which is his local host he sets up telnet connections to the two servers and then arranges for a data connection between them in this manner control information is passed to the user pi but data is transferred between he server data transfer processes following is a model of this server server interaction telnet telnet user ftp user pi c v v server ftp data connection server ftp a b socket a socket b figure file transfer protocol aug rfc nic the protocol requires that the telnet connections be open while data transfer is in progress it is the responsibility of the user to request the closing of the telnet connections when finished using the ftp service while it is the server who takes the action the server may abort data transfer if the telnet connections are closed without command data transfer functions files are transferred only via the data connection s the telnet connection is used for the transfer of commands which describe the functions to be performed and the replies to these commands see the section on ftp replies several commands are concerned with the transfer of data between hosts these data transfer commands include the byte mode and socket commands which specify how the bits of the data are to be transmitted and the structure and type commands which are used to define the way in which the data are to be represented the transmission and representation are basically independent but stream transmission mode is dependent on the file structure attribute and if compressed transmission mode is used the nature of the filler byte depends on the representation type data representation and storage data is transferred from a storage device in the sending host to a storage device in the receiving host often it is necessary to perform certain transformations on the data because data storage representations in the two systems are different for example nvt ascii has different data storage representations in diffeent systems pdp s generally store nvt ascii as five bit ascii characters left justified in a bit word s store nvt ascii as bit ebcdic codes multics stores nvt ascii as four bit characters in a bit word it may be desirable to convert characters into the standard nvt ascii representation when transmitting text between dissimilar systems the sending and receiving sites would have to perform the necessary transformations between the standard representation and their internal representations a different problem in representation arises when transmitting binary data not character codes between host systems with different word lengths it is not always clear how the sender should send data and the receiver store it for example when transmitting bit bytes from a bit word length system to a bit word length system it may be desirable for reasons of efficiency and usefulness to store the bit bytes right justified in a bit word in the latter system in any case the user should have the option of specifying data representation and transformation functions it should be noted that ftp provides for very limited data type representations transformations desired beyond this limited capability should be file transfer protocol aug rfc nic performed by the user directly or via the use of the data reconfiguration sevice drs rfc nic additonal representation types may be defined later if there is a demonstrable need data representations are handled in ftp by a user specifying a representation type this type may implicitly as in ascii or ebcdic or explicitly as in local byte define a byte size for interpretation which is referred to as the logical byte size this has nothing to do with the byte size used for transmission over the data connection s called the transfer byte size and the two should not be confused for example nvt ascii has a logical byte size of bits but an ascii file might be transferred using a transfer byte size of if the type is local byte then the type command has an obligatory second parameter specifying the logical byte size the types ascii and ebcdic also take a second optional parameter this is to indicate what kind of vertical format control if any is associated with a file the following data representation types are defined in ftp ascii format this is the default type and must be accepted by all ftp implementations it is intended primarily for the transfer of text files except when both hosts would find the ebcdic type more convenient the sender converts the data from his internal character representation to the standard bit nvt ascii representation see the telnet specification the receiver will convert the data from the standard form to his own internal form in accordance with the nvt standard the sequence should be used where necessary to denote the end of a line of text see the discussion of file structure at the end of the section on data representation and storage using the standard nvt ascii representation means that data must be interpreted as bit bytes if the byte command see the section on transfer parameter commands specifies a transfer byte size different from bits the bit ascii characters should be packed contiguously without regard for transfer byte boundaries the format parameter for ascii and ebcdic types is discussed below file transfer protocol aug rfc nic ebcdic format this type is intended for efficient transfer between hosts which use ebcdic for their internal character representation for transmission the data are represented as bit ebcdic characters the character code is the only difference between the functional specifications of ebcdic and ascii types end of line as opposed to end of record see the discussion of structure will probably be rarely used with ebcdic type for purposes of denoting structure but where it is necessary the character should be used a character file may be transferred to a host for one of three purposes for printing for storage and later retrieval or for processing if a file is sent for printing the receiving host must know how the vertical format control is represented in the second case it must be possible to store a file at a host and then retrieve it later in exactly the same form finally it ought to be possible to move a file from one host to another and process the file at the second host without undue trouble a single ascii or ebcdic format does not satisfy all these conditions and so these types have a second parameter specifying one of the following three formats non print this is the default format to be used if the second format parameter is omitted non print format must be accepted by all ftp implementations the file need contain no vertical format information if it is passed to a printer process this process may assume standard values for spacing and margins normally this format will be used with files destined for processing or just storage telnet format controls the file contains ascii ebcdic vertical format controls i e which the printer process will interpret appropriately in exactly this sequence also denotes end of line carriage control asa the file contains asa fortran vertical format control characters see nwg rfc appendix c and communications of file transfer protocol aug rfc nic the acm vol no oct in a line or a record formatted according to the asa standard the first character is not to be printed instead it should be used to determine the vertical movement of the paper which should take place before the rest of the record is printed the asa standard specifies the following control characters character vertical spacing blank move paper up one line move paper up two lines move paper to top of next page no movement i e overprint clearly there must be some way for a printer process to distinguish the end of the structural entity if a file has record structure see below this is no problem records will be explicitly marked during transfer and storage if the file has no record structure the end of line sequence is used to separate printing lines but these format effectors are overridden by the asa controls image the data are sent as contiguous bits which for transfer are packed into transfer bytes of the size specified in the byte command the receiving site must store the data as contiguous bits the structure of the storage system might necessitate the padding of the file or of each record for a record structured file to some convenient boundary byte word or block this padding which must be all zeroes may occur only at the end of the file or at the end of each record and there must be a way of identifying the padding bits so that they may be stripped off if the file is retrieved the padding transformation should be well publicized to enable a user to process a file at the storage site image type is intended for the efficient storage and retrieval of files and for the transfer of binary data it is recommended that this type be accepted by all ftp implementations local byte byte size the data is transferred in logical bytes of the size specified by the obligatory second parameter byte size the value of byte size must be a decimal integer there is no default value the logical byte size is not necessarily the same as the transfer byte size if there is a difference in byte sizes file transfer protocol aug rfc nic then the logical bytes should be packed contiguously disregarding transfer byte boundaries and with any necessary padding at the end when the data reaches the receiving host it will be transformed in a manner dependent on the logical byte size and the particular host this transformation must be invertible that is an identical file can be retrieved if the same parameters are used and should be well publicized by the ftp implementors this type is intended for the transfer of structured data for example a user sending bit floating point numbers to a host with a bit word could send his data as local byte with a logical byte size of the receiving host would then be expected to store the logical bytes so that they could be easily manipulated in this example putting the bit logical bytes into bit double words should suffice a note of caution about parameters a file must be stored and retrieved with the same parameters if the retrieved version is to be identical to the version originally transmitted conversely ftp implementations must return a file identical to the original if the parameters used to store and retrieve a file are the same in addition to different representation types ftp allows the structure of a file to be specified currently two file structures are recognized in ftp file structure where there is no internal structure and record structure where the file is made up of records file structure is the default to be assumed if the structure command has not been used but both structures must be accepted for text files i e files with type ascii or ebcdic by all ftp implementations the structure of a file will affect both the transfer mode of a file see the section on transmission modes and the interpretation and storage of the file the natural structure of a file will depend on which host stores the file a source code file will usually be stored on an ibm in fixed length records but on a pdp as a stream of characters partitioned into lines for example by if the transfer of files between such disparate sites is to be useful there must be some way for one site to recognize the other s assumptions about the file with some sites being naturally file oriented and others naturally record oriented there may be problems if a file with one structure is sent to a host oriented to the other if a text file is sent with record structure to a host which is file oriented then that host should apply an internal transformation to the file based on the file transfer protocol aug rfc nic record structure obviously this transformation should be useful but it must also be invertible so that an identical file may be retreieved using record structure in the case of a file being sent with file structure to a record oriented host there exists the question of what criteria the host should use to divide the file into records which can be processed locally if this division is necessary the ftp implementation should use the end of line sequence for ascii or for ebcdic text files as the delimiter if an ftp implementation adopts this technique it must be prepared to reverse the transformation if the file is retrieved with file structure establishing data connections the mechanics of transferring data consists of setting up the data connection to the appropriate sockets and choosing the parameters for transfer byte size and mode both the user and the server dtps have default data sockets these are the two sockets for send and receive immediately following the standard icp telnet socket i e u and u for the user process and s s for the server the use of default sockets will ensure the security of the data transfer without requiring the socket information to be explicitly exchanged the byte size for the data connection is specified by the byte command or if left unspecified defaults to bit bytes this byte size is relevant only for the actual transfer of the data it has no bearing on representation of the data within a host s file system the protocol does not require servers to accept all possible byte sizes since the use of various byte sizes is intended for efficiency of transfer servers may implement only those sizes for which their data transfer is efficient including the default byte size of bits the passive data transfer process this may be a user dtp or a second server dtp shall listen on the data socket prior to sending a transfer request command the ftp request command determines the direction of the data transfer and thus which data socket odd or even is to be used in establishing the connection the server upon receiving the transfer request will initiate the data connection by rfc to the appropriate socket using the specified or default byte size when the connection is opened the data transfer begins between dtp s and the server pi sends a confirming reply to the user pi it is possible for the user to specify an alternate data socket by use of the sock command he might want a file dumped on a tip line printer or retrieved from a third party host in the latter case the user pi sets up telnet connections with both server pi s and sends file transfer protocol aug rfc nic each a sock command indicating the fixed data sockets of the other one server is then told by an ftp command to listen for an rfc which the other will initiate and finally both are sent the appropriate transfer commands the exact sequence of commands and replies sent between the user controller and the servers is defined in the section on ftp replies in general it is the server s responsibility to maintain the data connection to initiate the rfc s and the closes the exception to this is when the user dtp is sending the data in a transfer mode that requires the connection to be closed to indicate eof the server must close the data connection under the following conditions the server has completed sending data in a transfer mode that requires a close to indicate eof the server receives an abort command from the user the socket or byte size specification is changed by a command from the user the telnet connections are closed legally or otherwise an irrecoverable error condition occurs otherwise the close is a server option the exercise of which he must indicate to the user process by an appropriate reply transmission modes the next consideration in transferring data is choosing the appropriate transmission mode there are three modes one which formats the data and allows for restart procedures one which also compresses the data for efficient transfer and one which passes the data with little or no processing in this last case the mode interacts with the structure attribute to determine the type of processing in the compressed mode the representation type determines the filler byte all data transfers must be completed with an end of file eof which may be explicitly stated or implied by the closing of the data connection for files with record structure all the end of record markers eor are explicit including the final one note in the rest of this section byte means transfer byte except where explicitly stated otherwise file transfer protocol aug rfc nic the following transmission modes are defined in ftp stream the data is transmitted as a stream of bytes there is no restriction on the representation type used record structures are allowed in which case the transfer byte size must be at least bits in a record structured file eor and eof will each be indicated by a two byte control code of whatever byte size is used for the transfer the first byte of the control code will be all ones the escape character the second byte will have the low order bit on and zeroes elsewhere for eor and the second low order bit on for eof that is the byte will have value for eor and value for eof eor and eof may be indicated together on the last byte transmitted by turning both low order bits on i e the value if a byte of all ones was intended to be sent as data it should be repeated in the second byte of the control code if the file does not have record structure the eof is indicated by the sending host closing the data connection and all bytes are data bytes for the purpose of standardized transfer the sending host will translate his internal end of line or end of record denotation into the representation prescribed by the transfer mode and file structure and the receiving host will perform the inverse translation to his internal denotation an ibm record count field may not be recognized at another host so the end of record information may be transferred as a two byte control code in stream mode or as a flagged bit in a block or compressed mode descriptor end of line in an ascii or ebcdic file with no record structure should be indicated by or respectively since these transformations imply extra work for some systems identical systems transferring non record structured text files might wish to use a binary representation and stream mode for the transfer block the file is transmitted as a series of data blocks preceded by one or more header bytes the header bytes contain a count field and descriptor code the count field indicates the total length of the data block in bytes thus marking the beginning of the next data block there are no filler bits the descriptor code defines last block in the file eof last block in the record eor restart marker see the section on error recovery and restart or suspect data i e the data file transfer protocol aug rfc nic being transferred is suspected of errors and is not reliable this last code is not intended for error control within ftp it is motivated by the desire of sites exchanging certain types of data e g seismic or weather data to send and receive all the data despite local errors such as magnetic tape read errors but to indicate in the transmission that certain portions are suspect record structures are allowed in this mode and any representation type may be used there is no restriction on the transfer byte size the header consists of the smallest integral number of bytes whose length is greater than or equal to bits only the least significant bits right justified of header shall have information the remaining most significant bits are don t care bits of the bits of header information the low order bits shall represent byte count and the high order bits shall represent descriptor codes as shown below integral number of bytes greater than or equal to bits don t care descriptor byte count to bits bits bits the descriptor codes are indicated by bit flags in the descriptor byte four codes have been assigned where each code number is the decimal value of the corresponding bit in the byte code meaning end of data block is eor end of data block is eof suspected errors in data block data block is a restart marker with this encoding more than one descriptor coded condition may exist for a particular block as many bits as necessary may be flagged the restart marker is embedded in the data stream as an integral number of bit bytes representing printable characters in the language being used over the telnet connection e g default nvt ascii these marker bytes are right justified in the smallest integral number of transfer bytes greater than or equal to bits for example if the file transfer protocol aug rfc nic byte size is bits the restart marker byte would be one byte right justified per two bit bytes as shown below two bit bytes marker char bits if the transfer byte size is or more bits the maximum possible number of complete marker bytes should be packed right justified into each transfer byte the restart marker should begin in the first marker byte if there are any unused marker bytes these should be filled with the character space in the appropriate language must not be used within a restart marker for example to transmit a six character marker with a bit transfer byte size the following three bit bytes would be sent don t care descriptor byte count bits code marker marker marker marker bits bits bits bits marker marker space space bits bits bits bits compressed the file is transmitted as series of bytes of the size specified by the byte command there are three kinds of information to be sent regular data sent in a byte string compressed data consisting of replications or filler and control information sent in a two byte escape sequence if the byte size is b bits and n bytes of regular data are sent these n bytes are preceded by a byte with the left most bit set to and the right most b bits containing the number n file transfer protocol aug rfc nic b b b byte string n d d n n bytes of data string of n data bytes d d n count n must be positive to compress a string of n replications of the data byte d the following bytes are sent b b replicated byte n d a string of n filler bytes can be compressed into a single byte where the filler byte varies with the representation type if the type is ascii or ebcdic the filler byte is space ascii code ebcdic code if the transfer byte size is not the expanded byte string should be filled with bit characters in the manner described in the definition of ascii representation type see the section on data representation and storage if the type is image or local byte the filler is a zero byte b filler string n the escape sequence is a double byte the first of which is the escape byte all zeroes and the second of which contains descriptor codes as defined in block mode this implies that the byte size must be at least bits which is not much of a restriction for efficiency in this mode the descriptor codes have the same meaning as in block mode and apply to the succeeding string of bytes compressed mode is useful for obtaining increased bandwidth on very large network transmissions at a little extra cpu cost it is most efficient when the byte size chosen is that of the word size of the transmitting host and can be most effectively used to reduce the size of printer files such as those generated by rje hosts file transfer protocol aug rfc nic error recovery and restart there is no provision for detecting bits lost or scrambled in data transfer this issue is perhaps handled best at the ncp level where it benefits most users however a restart procedure is provided to protect users from gross system failures including failures of a host an ftp process or the imp subnet the restart procedure is defined only for the block and compressed modes of data transfer it requires the sender of data to insert a special marker code in the data stream with some marker information the marker information has meaning only to the sender but must consist of printable characters in the default or negotiated language of the telnet connection the marker could represent a bit count a record count or any other information by which a system may identify a data checkpoint the receiver of data if it implements the restart procedure would then mark the corresponding position of this marker in the recieving system and return this information to the user in the event of a system failure the user can restart the data transfer by identifying the marker point with the ftp restart procedure the following example illustrates the use of the restart procedure the sender of the data inserts an appropriate marker block in the data stream at a convenient point the receiving host marks the corresponding data point in its file system and conveys the last known sender and receiver marker information to the user either directly or over the telnet connection in a reply depending on who is the sender in the event of a system failure the user or controller process restarts the server at the last server marker by sending a restart command with server s marker code as its argument the restrart command is transmitted over the telnet connection and is immediately followed by the command such as retr stor or list which was being executed when the system failure occurred file transfer functions the communication channel from the user pi to the server pi is established by icp from the user to a standard server socket the user protocol interpreter is responsible for sending ftp commands and interpreting the replies received the server pi interprets commands sends replies and directs its dtp to set up the data connection and transfer the data if the second party to the data transfer the passive transfer process is the user dtp then it is governed through the internal protocol of the user ftp host if it is a second server dtp then it is governed by its pi on command from the user pi file transfer protocol aug rfc nic ftp commands the file transfer protocol follows the specifications of the telnet protocol for all communications over the telnet connection see nic since in the future the language used for telnet communication may be a negotiated option all references in the next two sections will be to the telnet language and the corresponding telnet end of line code currently one may take these to mean nvt ascii and no other specifications of the telnet protocol will be cited ftp commands are telnet strings terminated by the telnet end of line code the command codes themselves are alphabetic characters terminated by the character space if parameters follow and telnet eol otherwise the command codes and the semantics of commands are described in this section the detailed syntax of commands is specified in the section on commands the reply sequences are discussed in the section on sequencing of commands and replies and scenarios illustrating the use of commands are provided in the section on typical ftp scenarios ftp commands may be partitioned as those specifying access control identifiers data transfer parameters or ftp service requests certain commands such as abor stat bye may be sent over the telnet connections while a data transfer is in progress some servers may not be able to monitor the telnet and data connections simultaneously in which case some special action will be necessary to get the server s attention the exact form of the special action is related to decisions currently under review by the telnet committee but the following ordered format is tentatively recommended user system inserts the telnet interrupt process ip signal in the telnet stream user system sends the telnet synch signal user system inserts the command e g abor in the telnet stream server pi after receiving ip scans the telnet stream for exactly one ftp command for other servers this may not be necessary but the actions listed above should have no unusual effect file transfer protocol aug rfc nic access control commands the following commands specify access control identifiers command codes are shown in parentheses user name user the argument field is a telnet string identifying the user the user identification is that which is required by the server for access to its file system this command will normally be the first command transmitted by the user after the telnet connections are made some servers may require this additional identification information in the form of a password and or an account command may also be required by some servers servers may allow a new user command to be entered at any point in order to change the access control and or accounting information this has the effect of flushing any user password and account information already supplied and beginning the login sequence again all transfer parameters are unchanged and any file transfer in progress is completed under the old acccount password pass the argument field is a telnet string identifying the user s password this command must be immediately preceded by the user name command and for some sites completes the user s identification for access control since password information is quite sensitive it is desirable in general to mask it or suppress typeout it appears that the server has no foolproof way to achieve this it is therefore the responsibility of the user ftp process to hide the sensitive password information account acct the argument field is a telnet string identifying the user s account the command is not necessarily related to the user command as some sites may require an account for login and others only for specific access such as storing files in the latter case the command may arrive at any time there are two reply codes to differentiate these cases for the automaton when account information is required for login the response to a successful password command is reply code then if a command other than account is sent the server may remember it and return a reply prepared to act on the command after the account information is received or he may flush the command and return a reply asking for the account on the other hand if account information is not required for login the reply to a successful password command is and if the file transfer protocol aug rfc nic information is needed for a command issued later in the dialogue the server should return a or reply depending on whether he stores pending receipt of the account command or discards the command respectively reinitialize rein this command terminates a user flushing all i o and account information except to allow any transfer in progress to be completed all parameters are reset to the default settings and the telnet connection is left open this is identical to the state in which a user finds himself immediately after the icp is completed and the telnet connections are opened a user command may be expected to follow logout bye this command terminates a user and if file transfer is not in progress the server closes the telnet connection if file transfer is in progress the connection will remain open for result response and the server will then close it if the user process is transferring files for several users but does not wish to close and then reopen connections for each then the rein command should be used instead of bye an unexpected close on the telnet connection will cause the server to take the effective action of an abort abor and a logout bye transfer parameter commands all data transfer parameters have default values and the commands specifying data transfer parameters are required only if the default parameter values are to be changed the default value is the last specified value or if no value has been specified the standard default value as stated here this implies that the server must remember the applicable default values the commands may be in any order except that they must precede the ftp service request the following commands specify data transfer parameters byte size byte the argument is a decimal integer through specifying the byte size for the data connection the default byte size is bits a server may reject certain byte sizes that he has not implemented file transfer protocol aug rfc nic data socket sock the argument is a host socket specification for the data socket to be used in data connection there may be two data sockets one for transfer from the active dtp to the passive dtp and one for passive to active an odd socket number defines a send socket and an even socket number defines a receive socket the default host is the user host to which telnet connections are made the default data sockets are u and u where u is the socket number used in the telnet icp and the telnet connections are on sockets u and u the server has fixed data sockets s and s as well and under normal circimstances this command and its reply are not needed passive pasv this command requests the server dtp to listen on both of his data sockets and to wait for an rfc to arrive for one socket rather than initiate one upon receipt of a transfer command it is assumed the server has already received a sock command to indicate the foreign socket from which the rfc will arrive to ensure the security of the transfer representation type type the argument specifies the representation type as described in the section on data representation and storage several types take a second parameter the first parameter is denoted by a single telnet character as is the second format parameter for ascii and ebcdic the second parameter for local byte is a decimal integer to indicate bytesize the parameters are separated by a space ascii code the following codes are assigned for type a ascii n non print t telnet format effectors e ebcdic c carriage control asa i image l local byte bytesize the default representation type is ascii non print if the format parameter is changed and later just the first argument is changed format then returns to the non print default file transfer protocol aug rfc nic file structure stru the argument is a single telnet character code specifying file structure described in the section on data representation and storage the following codes are assigned for structure f file no record structure r record structure the default structure is file i e no records transfer mode mode the argument is a single telnet character code specifying the data transfer modes described in the section on transmission modes the following codes are assigned for transfer modes s stream b block c compressed the default transfer mode is stream ftp service commands the ftp service commands define the file transfer or the file system function requested by the user the argument of an ftp service command will normally be a pathname the syntax of pathnames must conform to server site conventions with standard defaults applicable and the language conventions of the telnet connection the suggested default handling is to use the last specified device directory or file name or the standard default defined for local users the commands may be in any order except that a rename from command must be followed by a rename to command and the restart command must be followed by the interrupted service command the data when transferred in response to ftp service commands shall always be sent over the data connection except for certain informative replies the following commands specify ftp service requests retrieve retr this command causes the server dtp to transfer a copy of the file specified in the pathname to the server or user dtp at the other end of the data connection the status and contents of the file at the server site shall be unaffected file transfer protocol aug rfc nic store stor this command causes the server dtp to accept the data transferred via the data connection and to store the data as a file at the server site if the file specified in the pathname exists at the server site then its contents shall be replaced by the data being transferred a new file is created at the server site if the file specified in the pathname does not already exist append with create appe this command causes the server dtp to accept the data transferred via the data connection and to store the data in a file at the server site if the file specified in the pathname exists at the server site then the data shall be appended to that file otherwise the file specified in the pathname shall be created at the server site allocate allo this command may be required by some servers to reserve sufficient storage to accommodate the new file to be transferred the argument shall be a decimal integer representing the number of bytes using the logical byte size of storage to be reserved for the file for files sent with record structure a maximum record size in logical bytes might also be necessary this is indicated by a decimal integer in a second argument field of the command this second argument is optional but when present should be separated from the first by the three telnet characters r this command shall be followed by a store or append command the allo command should be treated as a noop no operation by those servers which do not require that the maximum size of the file be declared beforehand and those servers interested in only the maximum record size should accept a dummy value in the first argument and ignore it restart rest the argument field represents the server marker at which file transfer is to be restarted this command does not cause file transfer but spaces over the file to the specified data checkpoint this command shall be immediately followed by the appropriate ftp service command which shall cause file transfer to resume file transfer protocol aug rfc nic rename from rnfr this command specifies the file which is to be renamed this command must be immediately followed by a rename to command specifying the new file pathname rename to rnto this command specifies the new pathname of the file specified in the immediately preceding rename from command together the two commands cause a file to be renamed abort abor this command indicates to the server to abort the previous ftp service command and any associated transfer of data the abort command may require special action as discussed in the section on ftp commands to force recognition by the server no action is to be taken if the previous command has been completed including data transfer the telnet connections are not to be closed by the server but the data connection must be closed an appropriate reply should be sent by the server in all cases delete dele this command causes the file specified in the pathname to be deleted at the server site if an extra level of protection is desired such as the query do you really wish to delete it should be provided by the user ftp process list list this command causes a list to be sent from the server to the passive dtp if the pathname specifies a directory the server should transfer a list of files in the specified directory if the pathname specifies a file then the server should send current information on the file a null argument implies the user s current working or default directory the data transfer is over the data connection in type ascii or type ebcdic the user must ensure that the type is appropriately ascii or ebcdic name list nlst this command causes a directory listing to be sent from server to user site the pathname should specify a directory or other system specific file group descriptor a null argument implies the current directory the server will return a stream of file transfer protocol aug rfc nic names of files and no other information the data will be transferred in ascii or ebcdic type over the data connection as valid pathname strings separated by or again the user must ensure that the type is correct site parameters site this command is used by the server to provide services specific to his system that are essential to file transfer but not sufficiently universal to be included as commands in the protocol the nature of these services and the specification of their syntax can be stated in a reply to the help site command status stat this command shall cause a status response to be sent over the telnet connection in the form of a reply the command may be sent during a file transfer along with the telnet ip and synch signals see the section on ftp commands in which case the server will respond with the status of the operation in progress or it may be sent between file transfers in the latter case the command may have an argument field if the argument is a pathname the command is analogous to the list command except that data shall be trasferred over the telnet connection if a partial pathname is given the server may respond with a list of file names or attributes associated with that specification if no argument is given the server should return general status information about the server ftp process this should include current values of all transfer parameters and the status of connections help help this command shall cause the server to send helpful information regarding its implementation status over the telnet connection to the user the command may take an argument e g any command name and return more specific information as a response the reply is type oxx general system status it is suggested that help be allowed before entering a user command the server may use this reply to specify site dependent parameters e g in response to help site noop noop this command does not affect any parameters or previously entered commands it specifies no action other than that the server send a reply file transfer protocol aug rfc nic miscellaneous commands there are several functions that utilize the services of file transfer but go beyond it in scope these are the mail and remote job entry functions it is suggested that these become auxiliary protocols that can assume recognition of file transfer commands on the part of the server i e they may depend on the core of ftp commands the command sets specific to mail and rje will be given in separate documents commands that are closely related to file transfer but not proven essential to the protocol may be implemented by servers on an experimental basis the command name should begin with an x and may be listed in the help command the official command set is expandable from these experiments all experimental commands or proposals for expanding the official command set should be announced via rfc an example of a current experimental command is change working directory xcwd this command allows the user to work with a different directory or dataset for file storage or retrieval without altering his login or accounting information transfer parameters are similarly unchanged the argument is a pathname specifying a directory or other system dependent file group designator ftp replies the server sends ftp replies over the telnet connection in response to user ftp commands the ftp replies constitute the acknowledgment or completion code including errors the ftp server replies are formatted for human or program interpretation single line replies consist of a leading three digit numeric code followed by a space followed by a one line text explanation of the code for replies that contain several lines of text the first line will have a leading three digit numeric code followed immediately by the character hyphen ascii code and possibly some text all succeeding continuation lines except the last are constrained not to begin with three digits the last line must repeat the numeric code of the first line and be followed immediately by a space for example first line continuation line another line last line it is possible to nest but not overlap a reply withiin a multi line file transfer protocol aug rfc nic reply the same format for matched number coded first and last lines holds the numeric codes are assigned by groups and for ease of interpretation by programs in a manner consistent with other protocols such as the rje protocol the three digits of the code are to be interpreted as follows the first digit specifies type of response as indicated below xx these replies are purely informative and constitute neither a positive nor a negative acknowledgment xx informative replies to status inquiries these constitute a positive acknowledgment to the status command xx positive acknowledgment of previous command or other successful action xx incomplete information activity cannot proceed without further specification and input xx unsuccessful reply the request is correctly specified but the server is unsuccessful in correctly fulfilling it xx incorrect or illegal command the command or its parameters were invalid or incomplete from a syntactic viewpoint or the command is inconsistent with a previous command the command in question has been completely ignored xx xx reserved for future expansion the second digit specifies the general category to which the response refers x x general purpose replies not assignable to other categories x x primary access informative replies to the log on attempt x x secondary access the primary server is commenting on its ability to access a secondary service x x ftp results x x rje results file transfer protocol aug rfc nic x x mail portocol results x x x x reserved for future expansion the final digit specifies a particular message type since the code is designed for an automaton process to interpret it is not necessary for every variation of a reply to have a unique number only the basic meaning of replies need have unique numbers the text of a reply can explain the specific reason for that reply to a human user each telnet line delimited by a numeric code and the telnet eol or group of text lines bounded by coded lines that is sent by the server is intended to be a complete reply message it should be noted that the text of replies is intended for a human user only the reply codes and in some instances the first line of text are intended for programs the assigned reply codes relating to ftp are announcing ftp message from system operator exected delay server availability information ftp commentary or user information system status reply system busy doing file status reply directory listing reply last command received correctly an abort has terminated activity as requested abort request ignored no activity in progress user is logged in may proceed user is logged out service terminated logout command noted will complete when transfer done user is logged out parameters reinitialized ftp file transfer started correctly ftp restart marker reply text is mark yyyy mmmm where yyyy is user s data stream marker yours and mmmm is server s equivalent marker mine note the spaces between the markers and ftp transfer completed correctly rename completed delete completed closing the data connection transfer completed connection greeting message awaiting input current command incomplete no for long time enter password file transfer protocol aug rfc nic enter account if account required as part of login sequence login first please this service not implemented this service not accepting users now goodbye command not implemented for requested value or action log on time or tries exceeded goodbye log on unsuccessful user and or password invalid user not valid for this service cannot transfer files without valid account enter account and resend command log out forced by operator action phone site log out forced by system problem service shutting down goodbye ftp file not found ftp file access denied to you ftp file transfer incomplete data connection closed ftp file transfer incomplete insufficient storage space ftp cannot connect to your data socket ftp file system error not covered by other reply codes ftp name duplication rename failed ftp transfer parameters in error last command line completely unrecognized syntax of last command is incorrect last command incomplete parameters missing last command invalid ignored illegal parameter combination last command invalid action not possible at this time last command conflicts illegally with previous command s last command not implemented by the server catchall error reply bad pathname specification e g syntax error file transfer protocol aug rfc nic declarative specifications minimum implementation in order to make ftp workable without needless error messages the following minimum implementation is required for servers type ascii non print mode stream structure file record byte commands user bye sock type byte mode stru for the default values retr stor noop the initial default values for transfer parameters are type ascii non print byte mode stream stru file all hosts must accept the above as the standard defaults connections the server protocol interpreter shall listen on socket the user or user protocol interpreter shall initiate the full duplex telnet connections performing the arpanet standard initial connection protocol icp to server socket server and user processes should follow the conventions of the telnet protocol as specified in nic servers are under no obligation to provide for editing of command lines and may specify that it be done in the user host the telnet connections shall be closed by the server at the user s request after all transfers and replies are completed the user dtp must listen on the specified data sockets send and or receive these may be the default user sockets u and u or a socket specified in the sock command the server shall initiate the data connection from his own fixed sockets s and s using the specified user data socket and byte size default bits the file transfer protocol aug rfc nic direction of the transfer and the sockets used will be determined by the ftp service command when data is to be transferred between two servers a and b refer to figure the user pi c sets up telnet connections with both server pi s he then sends a s fixed sockets s a to b in a sock command and b s to a replies are returned one of the servers say a is then sent a pasv command telling him to listen on his data sockets rather than initiate an rfc when he receives a transfer service command when the user pi receives an acknowledgment to the pasv command he may send in either order the corresponding service commands to a and b server b initiates the rfc and the transfer proceeds the command reply sequence is listed below where the messages are vertically synchronous but horizontally asynchronous user pi server a user pi server b c a icp c b icp c a sock host b skt s b c b sock host a skt s a a c okay b c okay c a pasv a c okay c a stor c b retr the data connection shall be closed by the server under the conditions described in the section on establishing data connections if the server wishes to close the connection after a transfer where it is not required he should do so immediately after the file transfer is completed he should not wait until after a new transfer command is received because the user process will have already tested the data connection to see if it needs to do a listen recall that the user must listen on a closed data socket before sending the transfer request to prevent a race condition here the server sends a secondary reply after closing the data connection or if the connection is left open a file transfer completed reply and the user pi should wait for one of these replies before issuing a new transfer command commands the commands are telnet character string transmitted over the telnet connections as described in the section on ftp commands the command functions and semantics are described in the section on access control commands transfer parameter commands ftp service commands and miscellaneous commands the command syntax is specified here the commands begin with a command code followed by an argument field file transfer protocol aug rfc nic the command codes are four or fewer alphabetic characters upper and lower case alphabetic characters are to be treated identically thus any of the following may represent the retrieve command retr retr retr retr retr this also applies to any symbols representing parameter values such as a or a for ascii type the command codes and the argument fields are separated by one or more spaces the argument field consists of a variable length character string ending with the character sequence carriage return linefeed for nvt ascii representation for other negotiated languages a different end of line character might be used it should be noted that the server is to take no action until the end of line code is received the syntax is specified below in nvt ascii all characters in the argument field are ascii characters including any ascii represented decimal integers square brackets denote an optional argument field if the option is not taken the appropriate default is implied the following are all the currently defined ftp commmands user pass acct rein bye byte sock pasv type stru mode retr stor appe allo r rest rnfr rnto abor dele list nlst site stat help file transfer protocol aug rfc nic noop the syntax of the above argument fields using bnf notation where applicable is any of the ascii characters except and any ascii code through printable characters any decimal integer through a decimal integer specifying an arpanet host decimal integer between and n t c a e sp i l f r s b c sequencing of commands and replies the communication between the user and server is intended to be an alternating dialogue as such the user issues an ftp command and the server responds with a prompt primary reply the user should wait for this initial primary success or failure response before sending further commands certain commands require a second reply for which the user should also wait these replies may for example report on the progress or completion of file transfer or the closing of the data connection they are secondary replies to file transfer commands the third class of replies are informational and spontaneous replies which may arrive at any time the user pi should be prepared to receive them these replies are listed below as sponteneous one important group of spontaneous replies is the connection greetings under normal circumstances a server will send a reply awaiting input when the icp is completed the user should wait for this greeting message before sending any commands if the server is unable to accept input right away he should send a announcing ftp or a expected delay reply immediately and a file transfer protocol aug rfc nic reply when ready the user will then know not to hang up if there is a delay the table below lists alternative success and failure replies for each command these must be strictly adhered to a server may substitute text in the replies but the meaning and action implied by the code numbers and by the specific command reply sequence cannot be altered command reply correspondence table command success failure user pass acct rein secondary reply bye byte sock pasv type stru mode retr secondary reply stor secondary reply appe secondary reply allo rest rnfr rnto abor dele list secondary reply nlst secondary reply site file transfer protocol aug rfc nic stat help noop spontaneous replies typical ftp scenarios tip user wanting to transfer file from host x to local printer tip user opens telnet connections by icp to host x socket the following commands and replies are exchanged tip host x awaiting input user username enter password pass password user logged in sock commmand received ok retr this file host x initiates data connection to tip socket i e port receive file transfer started file transfer completed bye user logged out host x closes the telnet and data connections note the tip user should be in line mode user at host u wanting to transfer files to from host s in general the user will communicate to the server via a mediating user ftp process the following may be a typical scenario the user ftp prompts are shown in parentheses represents commands from host u to host s and represents replies from host s to host u file transfer protocol aug rfc nic local commands by user action involved ftp host multics icp to host s socket establishing telnet connections awaiting input username doe user doe password password mumble pass mumble doe logged in retrieve local type ascii local pathname test user ftp opens local file in ascii for pathname testp retr test p server makes data connection to u file transfer starts file transfer complete type image type i command ok byte byte lf command ok store local type image local pathname file dump user ftp opens local file in image for pathname udd cn fd stor udd cn fd access denied terminate bye server closes all connections 