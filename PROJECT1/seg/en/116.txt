 network working group r winter request for comments computer corporation of america nic june specifications for datalanguage version preface datalanguage is the language processed by the datacomputer a data utility system being developed for the arpanet the datacomputer performs data storage and data management functions for the benefit of computers on the network version is currently running at cca this version is extremely primitive however it does offer an opportunity for experience with the datacomputer and with fundamental datalanguage concepts subsequent versions will provide greater portions of the full datalanguage capability which has been described earlier datalanguage working paper no datacomputer project october nic for example one of the primary restrictions in elementary data items must be fixed length ascii strings will be eliminated in version which is currently being implemented based on the experience gained in the implementation of these early versions and based on the feedback from their use a revised specification of the full language will be issued introduction this document presents a precise and complete specification of datalanguage version it is organized into sections of which this introduction is the first section discusses the capabilities of version in general terms sections and are concerned with data description and the directory sections through cover the expression of data management operations section discusses the recognition of names section covers miscellaneous topics and section specifies the syntax in bnf this specification is to be followed with a user manual which will present the language in tutorial form and treat components of the datacomputer user interface other than the language winter page rfc specifications for datalanguage version june capabilities of version version of datalanguage has capabilities for the storage of files for addition of data to existing files and for the deletion of files retrievals can output whole files as well as subsets of files data can be selected from files by content using expressions formed from boolean and inequality operators at the option of the file creator an inversion is constructed and maintained by the datacomputer the inversion increases the efficiency of selective retrieval at the cost of storage space and file maintenance effort users other than the file creator need not be aware of the existence of the inversion or of which fields are inverted file keys the language is designed so that they state the desired result of a retrieval and the datacomputer uses the inversion as much as the request permits elementary data items are fixed length ascii strings files are a restricted class of hierarchical structures many of the restrictions mentioned in this memo will be short lived in particular those statements followed with asterisks refer to restrictions that will be considerably weakened or eliminated entirely in the next version of the software data description a container is a variable whose value is a data object of general character and arbitrary size in version size is restricted see section examples of containers which are implemented in other systems are files records fields groups and entries the container is distinct from the data in the container for example space allocation is an operation on a container while changing the unit price field from to is an operation on data in a container a container may enclose other containers when a container is not enclosed by another container it is said to be outermost if container a encloses container b and no other container in a also encloses b then a immediately encloses b a datalanguage description is a statement of the properties of a container all containers have the attributes ident and type ident is a character string by which users refer to the container type determines the form of the container s value the value can be winter page rfc specifications for datalanguage version june elementary or it can consist of other containers there are types list struct and string a list contains a group of containers having the same description a struct contains a group of containers each of which has its own description a string is a sequence of ascii characters while a string is not really an elementary item it is handled as one in version certain containers can have other attributes an outermost container has a function the function attribute specifies whether the container is to be used for storage or for transmission size is some meaningful dimension of the container which is type dependent it is used for space allocation and data stream parsing an aggregate container i e one that contains other containers has as an attribute the description or descriptions of its components thus if s is a struct containing a b and c then the descriptions of a b and c are attributes of s a string defined in certain contexts can have an inversion attribute this is an access property that is not really local to the string but is associated with it for convenience ident the ident of a container is composed of alphanumeric characters the first of which is alphabetic it may not consist of more than characters the elements of a struct must have idents unique in the struct function the function of a container is either file port or temporary port when the function is file then the container is used for storage of data at the datacomputer when the function is port then the container is used for transmission of data into or out of the datacomputer when the function is temporary port which may be abbreviated temp port the container behaves like a port however its description is not retained in the datacomputer beyond the session in which it is created winter page rfc specifications for datalanguage version june type type is one of list struct or string these are defined on the preceding page in an occurrence of a struct the elements appear in the order in which their descriptions appear in the struct description all elements are present in each occurrence of the struct an element of a struct or list can be a container of any datatype however the outermost container must be a list size the size of a string is the number of characters in it the size of a struct is not defined the meaning of the size of a list depends upon other properties of the list ordinarily the size of a list is the number of list members an exception is the case of the outermost list in an outermost list with a function of file the size is the number of list members for which space should be allocated when no size is present in this case the system computes a default in an outermost list with a function of port the size is ignored only outermost containers may be larger than a tenex page ascii characters inversion an inversion is an auxiliary data structure used to facilitate retrieval by content its basic application is the fast retrieval of sets of outermost list members this can be extended to other container sets and will be after release consider a list of weather observations stored as a file on the datacomputer if quick retrieval of observations by country is desired then this is indicated in the description of the country container according to common usage in information retrieval this makes country a key in the retrieval of observations note that the inversion option only affects the efficiency of retrieval by country not the ability to retrieve by country winter page rfc specifications for datalanguage version june there are restrictions on use of the inversion option first it can be applied only to strings second a string having the inversion option must occur only once in each outermost list member third it is ignored when applied to strings in port descriptions eventually there will be several types of inversion option in version there is only the d option for distinct syntax the description is simply an enumeration of properties these properties are specified in the order properties which do not apply are omitted an example f file list a str here f is the file is the list is the is the size and a str is the of one description of course a str is itself another description the description for members of the list named f an example of a complete description for a file of weather observations keyed on location weather file list observation struct location struct city str i d country str i d end time struct year str day str hour str end date struct temperature str rainfall str humidity str end end the ends are needed to delimit the list of elements of a struct i d indicates that the string is to be an inversion key for the retrieval of outermost list members winter page rfc specifications for datalanguage version june directory the directory is a system file in which the names and descriptions of all user defined containers are kept the directory is structured as a tree each node has an ident which need not be unique there is a single path from the root of the tree to any node the idents of the nodes along this path are concatenated separated by periods to form a pathname which unambiguously identifies the node e g a b c could be a pathname for node with an ident of c in a later version of the software the directory will be generalized to provide for links between nodes so that it will not properly be a tree for now however the tree model is convenient and adequate a node may represent a container or it may simply hold a place in the space of pathnames when it represents a container it cannot currently have subordinate nodes eventually it is planned to model the directory as a structure of containers with its description distributed throughout the structure most operations defined on the directory will be defined on user data and vice versa access privileges and privacy locks will be part of the data description and will likewise be applicable both to directory nodes and data structures below the node level create a create request either a adds a node to the directory optionally associating the description of either a port or a file with the node or b creates a temporary container which is not entered in the directory but has a description and can be referenced in requests if the description defines a file create causes space to be allocated for the file to create a node with a description create to create a node with no description create note that the description determines whether or not the container is temporary see section for details winter page rfc specifications for datalanguage version june a create request adds a single node to the directory thus to add cca raw f to an empty directory three requests are needed create cca create cca raw create cca raw f notice that the last ident of the pathname doubles as the first ident of the description create cca raw g file list a str that is g is both the ident of a node and the ident of an outermost container of type list delete a delete request deletes a tree of nodes and any associated descriptions or data the syntax is delete the named node and any subordinates are deleted note that to delete data while retaining the directory entry and description delete should not be used see section for the proper method list the list request is used to display system data of interest to a user it causes the data specified to be transmitted through the datalanguage output port several arguments of list apply to the directory list all transmits all pathnames in the directory list all source transmits all descriptions in the directory instead of all a pathname can be used list all lists pathnames subordinate to list source lists descriptions subordinate to the node represented by for details about the list request see section opening and closing containers containers must be open before they can be operated on a container is open when it is first created it remains open until closed explicitly by a close request or implicitly by a delete request or by session end winter page rfc specifications for datalanguage version june a closed container is opened by an open request a temporary container is always open a close request deletes it modes an open container has a mode which is one of read write or append the mode determines the meaning and or legitimacy of certain operations on the container the mode is established by the operation which opens the container it can be changed at any time by a mode request a create leaves the container in write mode an open either specifies the mode explicitly or implicitly sets the mode to read syntax to open a container open or open where is defaulted to read to close a container close where is the name of an outermost container two containers with the same outermost can not be opened at the same time to change the mode of an open container mode list list open transmits name mode and connection status of each open outermost container through the datalanguage output port the datalanguage output port is the destination to which all datacomputer diagnostics and replies are sent it is established when the user initially connects to the datacomputer for details of the list request see section assignment assignment transfers data from one container to another the equal sign is the symbol for assignment the value of the operand on the right of the equal sign is transferred to the operand on the left eventually both operands will be weakly restricted winter page rfc specifications for datalanguage version june datalanguage expressions which may evaluate to sets as well as to single containers now the left must be a container name the right may be a container name or a constant assignment is defined for all types of containers when the containers are aggregates their elements are paired and data is transferred between paired elements elements of the target container that do not pair with some source element are handled with a default operation currently they are filled with blanks the operands of an assignment must have descriptions that match the idea of matching is that the descriptions must be similar enough so that it is obvious how to map one into the other conditions for legitimate assignment assignment must reference objects not sets an object is a an outermost container or b a constant or c in the body of a for loop either c a member of a set defined by a for operand or c a container which occurs once in such a member in the case of a reference of type c the object referenced is taken to be the current member in the case of c the object referenced is that which occurs in the current member this is explained further in section the left operand of an assignment is subject to further restriction if it is an outermost container it must be open in either write or append mode if it is not an outermost container then the reference is of type c which means that some for operand has established a context in which the assign operand is an object the for operand which establishes this context must be the output operand of the for when the assign operand is an outermost container it must be open such an operand must be referenced by its simple container ident not its directory pathname in the body of a loop nested in one or more other loops assignments are further restricted due to a implementation problem see section for details winter page rfc specifications for datalanguage version june finally the descriptions of the operands must match if one is a constant then the other must be a string if both are containers then in the expression a b the descriptions of containers a and b match if a and b have the same type if a and b are lists then they have equal numbers of list members or else a is an outermost list if a and b are aggregates then at least one container immediately enclosed in a matches and has the same ident as one container immediately enclosed in b result of assignment if the operands are strings then the value of b left justified replaces the value of a if b is longer than a the value is truncated if b is shorter than a then a is filled on the right with blanks as necessary if the operands are structs then assignment is defined in terms of the struct members if a member of a ma matches and has the same name as a member of b mb then mb is assigned to ma if no such mb exists then ma is filled with blanks if the operands are lists the result depends on several factors first notice that the descriptions of the list members must match otherwise the assignment would not be legitimate by the matching rules of if a is an outermost list then it can be in either of two modes write or append if a is in write mode its previous contents are first discarded it is then handled as though it were in append mode if a is not an outermost list then it is always effectively in write mode after taking the mode of a into account as described above the procedure is for each member of list b a add a new member to the end of a b assign the current number of b to the new member of a winter page rfc specifications for datalanguage version june deletion of data through assignment if a is an outermost container in write mode and b is a container with description that matches a and if b contains no data then a b has the effect of deleting all data from a note that if a is in append mode in these circumstances then a b is a no operation i e has no effect for for end the output set is optional that is for need not produce output when the output set is omitted the syntax is for end the operations specified in the body are performed once for each member of the input set references in the body to the input set member are treated as references to the current input set member when an output set is present a new member is created and added to the output set for each iteration i e for each input set member references to the output set member similarly are treated as references to the current output set member the output set spec must be the name of a list member each iteration of the for will create one such member and add it to its list hereafter called the output list the body terminates the value that the new member receives any string in the new member which is not given a value by the body receives he default value of all blanks the input set spec must be an expression evaluating to a set of list members see section for details of input set specification each iteration for the for will input one such member the for will terminate when each member of the set has been processed the list from which the input set members are drawn is called the input list for is effectively a means of accomplishing variants of assignment between a pair of lists for is less concise than assignment but offers more flexibility its advantages are a not all the input list members need be transferred to the output list a subset can be selected by content b the user has explicit control over the assignment of values to output list members winter page rfc specifications for datalanguage version june this is most easily understood by an example p port list f file list r struct r struct b str a struct c str a str end a str b str c str end p f for p r f r p r f r end for p r f r with a eq xy or a ge ab b c c a end here and are entirely equivalent requests however is quite different and is not expressible as assignment it selects a subset of f rs the values it gives to the p rs could not result from application of the matching rules to f and p because for is effectively assignment between a pair of lists the lists referenced by a legitimate for operation are largely subject to the same restrictions as lists referenced in an assignment one exception is that the descriptions of the list members need not match these restrictions are a both lists must be objects in the context in which the for appears b both lists must be open or contained in open outermost containers c if the output list is an outermost container it must be in write or append mode d if the output list is not outermost the list which most immediately encloses it must be the output list of an enclosing for the mode of the output list of the for affects the result much as it would in an assignment that is a for outputting to a list in write mode overwrites previous contents while a for outputting to a list in append mode adds to previous contents winter page rfc specifications for datalanguage version june caution to the reader for convenience these specifications use phrases such as lists referenced by a for recall that such a phrase is not literally correct in the sense that the operands of a for are always list members not lists details of input set specification the input set is specified by a datalanguage expression that evaluates to a set of list members such an expression can be simply the set of all members of a list or it can be a subset of the members of a list specified by content for example with the description f file list r struct a str b str end the expression f r references all r s on the list f however f r with a eq references only those r s containing an a having the value the expressions permitted as input set specifications are of the form with the is constructed of comparison expressions joined by the boolean operators and and or any expression can be negated with not comparison operators have the highest precedence next highest is and then or then not the comparison expressions are restricted to the form where a is a string constant enclosed in single quotes see section for a discussion of constants b is one of six operators eq equal ne not equal lt less than gt greater than le less than or equal to ge greater than or equal to c is the name of a string that appears once in each list member winter page rfc specifications for datalanguage version june the constant is truncated or padded with blanks on the right to make it equal in size to the container to which it is being compared notice that padding on the right is not always desirable users will have control over the padding in a future release in particular care must be exercised when using numbers in version a number represented as a string should actually be described as a number eventually it will be possible to do this for body two operations are legitimate in a for body for and assignment these are subject to the restrictions discussed in section and in the introduction to section the restrictions are related to three requirements that the names be recognizable see section for details that a request be consistent regarding direction of data transfer between containers both within itself and with the mode of outermost containers and that transfers occur between objects not sets of objects the first two requirements are permanent but will become weaker in later versions of the language the last requirement is temporary and will be present only in early versions due to an implementation problem associated with version there is a somewhat bizarre restriction applied to references made in the body of a loop nested in another loop this restriction is not expected to pose any practical problems for users and is not part of the language design but is discussed here for completeness the restriction is most easily understood by example given the description f list r struct a str bl list b str c str end and the request fragment for r for b a c end end winter page rfc specifications for datalanguage version june observe a the outer loop processes the set of r s in f b for each r in f the inner loop processes the set of b s in the bl contained in that r c in the body of the inner loop there are references to a and c which do not occur in b but do occur in r that is the objects referenced in the inner loop body are defined by the outer loop not the inner loop in general this is fine in the case of c however we have a problem d c occurs beyond the end of bl the compiler is capable of neither looking ahead enough to locate c before it compiles code for the loop nor while generating code to loop on the b s in bl generating a separate body of code that skips to the end of bl to locate c thus it can handle a which has been located before it begins loop generation but it cannot handle c which requires a little foresight the request fragment shown would not cause problems if the description were changed to f list r struct a str c str bl list b str end then both a and c would have been found before code for the inner loop was generated data transmission data is transferred from container to container by execution of assignment and for operations the outermost containers involved in transfers can be files or ports if both are files then the transfer is internal to the datacomputer if either is a port then an address in the external world is needed to accomplish the data transmission winter page rfc specifications for datalanguage version june such an address is supplied through a connect request which associates a container having a function of port with an external address connect to here is either a specifications of host and socket number or a tenex file designator for cca s tenex enclosed in single quotes the host and socket form is at where is a decimal number and is either a decimal number or a standard host name since standard host names don t exist right now it has to be the tenex standard name for the host contact the author for the latest list if is omitted it is taken to be the host from which the datalanguage is being transmitted the address associated with a port can be changed by issuing another connect request a disconnect request simply breaks an existing port address association without establishing a new one a close request that references an open port executes a disconnect the syntax of disconnect is disconnect a port is disconnected when a no successful connect request has ever been issued for it or b a disconnect for the port has been executed since the last successful connect when a disconnected port is referenced in an assignment it is connected by default either to a the connection used for the transmission of datalanguage to the datacomputer or b the connection used for the transmission of datacomputer diagnostics to the user the choice between a and b of course depends on whether the reference is for input or output these connections are established by the network user s icp to the datacomputer at the beginning of the session note that connect and disconnect do not open files or network connections they simply make address associations within the datacomputer the files and connections are opened before each request and closed after each request winter page rfc specifications for datalanguage version june names in datalanguage a name is recognized when it has been associated with a particular data container or set of containers datalanguage has mechanisms for the recognition of names in contexts that is the meaning of the name is related to where it appears this makes it possible to attach natural meanings to partially qualified names for example weather file list station struct city str state str data list observation struct hour str temperature str humidity str pressure str end end results port list result struct city str hour str temperature str end for station with state eq california for result observation with hour gt and humidity lt city city hour hour temperature temperature end end in the assignment city city the first city is understood to be result city and the second is understood to be station city winter page rfc specifications for datalanguage version june informal presentation of recognition rules ident is used in the sense of section for example in the description f file list r struct a str b str end f r a and b are idents a context is a tree whose nodes are idents in such a tree the terminal nodes are idents of strings the ident of a list is superior to the ident of the list member the ident of a struct is superior to the idents of the struct elements the context whose top node is f is said to be the context of f f r a b figure the context of f a pathname is a sequence of idents naming nodes along a path from one node to another a full pathname in the context starts at the topmost node thus f r b is a full pathname in the context of f a partial pathname starts at a node other than the topmost node e g r b b in datalanguage pathnames omitting intermediate nodes such as f b which omits r are not permitted thus partial pathnames are partial only in that additional names are implied on the left winter page rfc specifications for datalanguage version june three attempts at recognition of a pathname pn in a context cx are made a recognition of pn as a full pathname in cx b recognition of pn as a partial pathname in which only the topmost node of cx is omitted c recognition of pn as an arbitrary partial pathname occurring only once in cx the attempts are made in the above order and the recognition process halts with the first successful attempt as an example consider the description f file list r struct a str b str s struct r str which defines the context in figure f r a b s r figure example context winter page rfc specifications for datalanguage version june in this context f r a is a full pathname thus f r a is recognized in attempt a r is a partial pathname in which only the topmost node is omitted thus r is recognized in attempt b note carefully that r is recognized as a reference to f r not to f r s r finally b is an arbitrary partial pathname occurring only once in the context thus b is recognized in attempt c two stacks of contexts are maintained one for names used in an input sense and one for names used in an output sense when a name is to be recognized it is first decided whether the reference is an input reference or an output reference an input reference is a the right hand operand of an assign or b a name in the input set spec of a for an output reference is a the left operand of an assign or b the output operand of a for the first context on the appropriate context stack is then searched according to the procedure outlined on the previous page if the name is neither recognized nor ambiguous in that context search continues in the next context on the stack if the name can be recognized in none of the contexts on the appropriate stack it is unrecognizable when a stack is empty the recognition procedure is different the search is carried on in a special context the context of open its top node open is a built in system ident subordinate to open is a context for each open directory node each such context represents all the idents defined in the directory nodes having data descriptions f file list r struct a str b str and p port list r struct a str b str then the context of open would be as in figure winter page rfc specifications for datalanguage version june open a s r r a b a b figure the context of open when a directory node is closed the corresponding context is removed from the context of open when a node is opened the associated context is added as the rightmost context subordinate to open context stack maintenance the context stacks are always empty between requests the for operator adds entries to the stacks for a adds the context of a to the input context stack for a b adds the context of a to the output stack and the context of b to the input stack when adding to an empty stack for adds two contexts instead of one the second addition to the stack is the context of the looparg the first addition is the context of the outermost container which encloses the looparg winter page rfc specifications for datalanguage version june for example given a context of open as in figure and empty context stacks the fragment for f r adds two contexts the context of f and the context of f r contexts are removed from the stacks by the end matching the for which added them miscellaneous topics the list request the list request provides a means for the user to inspect system data of interest to him the user can determine the contents of the directory the source or parsed form of any data description in the system and the mode and connection status of any open file or port the list operator has a single operand which can have any of several forms the action of the operator is to output a list of values on the datalanguage output port to output a list of pathnames the operand used is all when all appears alone all pathnames in the directory are listed when all appears after the last ident in a directory pathname the full pathnames of all nodes subordinate to the named node are listed to output one or more source descriptions the operand source is used source is preceded with one of a all b open or c the ident of an open outermost container the output is either a all descriptions b all open descriptions or c a particular open description to output a parsed description the operand desc is used description is also accepted this operand is preceded either with a open or b the ident of an open outermost container winter page rfc specifications for datalanguage version june examples let p be the ident of an open port let a b c be a directory pathname list all list a b c all list open list all source list open source list p source list open desc list p desc note that list a b c source is not legal source must be preceded with the ident of an open container not a pathname a similar restriction applies to desc constants in datalanguage a constant of type string can be included in a datalanguage request by enclosing it in single quotes abc a single quote is included in a constant by preceding it with a double quote father s likewise a double quote is included by preceding it with a double quote john said hello such constants can be used on the right of comparison operators and of assignment operators which reference strings eventually datalanguage will contain facilities for the inclusion of constants of all datatypes such constants are simply a special case of the datalanguage expression and will be permitted wherever such expressions are permitted character set internally version of the datacomputer software operates in bit ascii characters its output to the arpanet is converted to bit ascii on input from the arpanet it expects bit characters which it converts to bit characters winter page rfc specifications for datalanguage version june to convert from to bit characters a bit is prefixed to convert from to bit characters the high order bit is checked if the high order bit is a the bit is discarded and the character is accepted as a bit character if the high order bit is a then the character is discarded in the following discussion as elsewhere in this memo all references to numerical character codes are in decimal the remainder of this section discusses treatment of codes through when they appear in datalanguage requests in general printing characters are acceptable in requests while control characters are not there are some exceptions which are detailed below the printing characters are codes the control characters are codes and certain control characters are accepted tab is accepted freely in requests it functions as a separator explained below eol meaning end of line is accepted in requests functioning both as a separator and an activator a eol has a special meaning in data and should not be introduced into string constants control l is an activator and a high level request delimiter it terminates the test of any request being processed when it is encounter in the input stream it is useful in datacomputer user program synchronization control z means end of session when encountered in datalanguage it has the properties of control l and in addition causes the datacomputer to execute an end of session procedure which results in closing the datalanguage connections closing any open files or ports etc the effect is equivalent to a logout which does not exist yet the two character sequence is equivalent to eol and is translated to eol on input from the network the reverse sequence as well as either character alone is treated simply as other control characters ignored all other control characters are ignored winter page rfc specifications for datalanguage version june the printing characters are further divided into four groups special characters uppercase letters lower case letters and digits the membership of these groups is defined in section corresponding upper and lower case letters are equivalent in requests except with quoted strings certain special characters have a lexical function which is either break or separator a break character terminates the current lexical item and returned itself as the next item a separator character terminates the current item but does not begin a new item i e its only function is to separate items multiple separators are equivalent to a single separator a separator can always be inserted before or after a break character without altering the meaning of the request the separators are tab space and end of line the break characters are left parenthesis right parenthesis equals semicolon period comma quote and slash a an activator character causes the datacomputer to process whatever has been received since the previous activator or the beginning of the request the meaning of a request is independent of the presence absence of activators however a request will not be executed until an activator beyond the end of the request is received while version defines carriage return linefeed in terms of eol network users should not think in terms of sending eol s to the datacomputer over the network eol is not part of the network ascii character set and has no definite permanent place in datacomputer implementation plans comments comments can be included in datalanguage requests a comment is begun with the two character sequence and ended with the two character sequence since slash is a break character a comment does cause a lexical break its overall effect is that of a separator winter page rfc specifications for datalanguage version june reserved identifiers certain identifiers are reserved in datalanguage and should not be used to name containers or directory nodes these are and append at close connect create delete disconnect end eq file for ge gt le list lt node ne not open or port read str struct to with write more reserved identifiers will be added in version winter page rfc specifications for datalanguage version june datalanguage syntax expressed in bnf requests open open close connect to disconnect mode delete list data description and creation create create list create list list struct end str str i d port file temp port temporary port winter page rfc specifications for datalanguage version june data storage and retrieval for end expressions with not and or eq ne gt lt ge le winter page rfc specifications for datalanguage version june miscellaneous at interpreted as decimal interpreted as decimal tenex host names read append write all all open all source source open source open desc desc winter page rfc specifications for datalanguage version june character set space tab a b z a b z eol carriage return line feed single quote double quote exclamation point number sign dollar sign percent sign ampersand left parenthesis winter page rfc specifications for datalanguage version june right parenthesis asterisk plus sign comma minus sign period slash colon semicolon left angle bracket equal sign right angle bracket question mark at sign left square bracket back slash right square bracket circumflex underbar accent grave left brace vertical bar right brace tilde this rfc was put into machine readable form for entry into the online rfc archives by walter benton winter page 