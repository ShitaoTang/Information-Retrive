 network working group e meyer request for comments mit multics nic april response to rfc jerry burchfiel and ray tomlinson of bolt beranek and newman inc have issued a network request for comments which proposes a solution to two problems which have been annoying to network users this document will briefly describe the problems and proposed solutions and offer comments and alternative suggestions background to establish a data connection between two hosts through the network the host host protocol requires that one host send a request for connection and that the second host reply affirmatively if the desired socket port at the target host is already in use the target host replies negatively once a connection is established data transmission may proceed controlled by data allocation messages dispatched by the host at the read end of the connection the host on the write side is constrained by protocol to send only as much data as has been permitted by the read side if it exhausts the allocation it must wait until a new data allocation control message is received then it can send more one of the problems arises from the fact that messages apparently are lost somewhere in the transmission path with a low but regular frequency if an allocate control message concerning an open connection is lost a situation can occur in which data transmission over the connection ceases permanently this can happen because the host at the send side believes it has exhausted its allocation and sits holding back data to end because it is waiting for a new data allocation message to come from the read side however the read side has actually sent out the allocation but it was lost it thinks that the send side may proceed and sits waiting for data to come in over the connection this is known as the lost allocate phenomenon however similar symptoms can occur if a data message is lost and the send side exhausts its allocation before a new allocation is given by the read side the send side waits for a new allocation but the read side has not received one of the data messages and believes there is still some allocation left in either case the result is a permanently blocked connection this appears to happen with enough regularity to be annoying to users who connect typewriters to foreign hosts through the network when it happens the only current solution is to disconnect and to establish a new connection meyer page rfc response to rfc april the solution to this problem which rfc proposes is to establish a pair of allocation resetting control messages one for use by the send side rcs and the other for the read side rcr whenever it wishes either side may initiate the allocation resetting sequence by setting its own allocation counter to zero and dispatching an rcs or rcr control message to the other side the host receiving it will set its own allocation counter for that connection to zero and send an rcr or rcs in reply now the allocations for both sides are in synchronization they are zero and data transmission can begin again when a new allocation is sent by the receive side this procedure is intended to be initiated whenever either side thinks the connection has been quiescent for a suspiciously long time the actual specification of this control message pair in rfc is more complex in that the pipeline between the two sides must be empty of data messages before the send side may dispatch an rcs control message the second problem arises when the host at one side of an open connection crashes and purges its tables when it comes back up while the host at the other end of the connection does not notice that anything has happened a similar situation occurs when the network path temporarily fails between the two hosts but only one host notices the failure and closes the connection if the host which crashed attempts to re establish the connection the host at the other end refuses to do so because the socket to which the connection request is targeted is seemingly already involved in an open connection given the idiosyncrasies of the terminal support software of some systems users at some consoles may be unable to reconnect to the distant system they were connected with when the local system supporting his terminal crashed this can continue indefinitely until the system which believes the original connections to be still open resets its internal state this is call the half closed phenomenon and a solution is proposed in rfc the basic principle of the rfc proposal is that the side which has the open connection is able to detect an inconsistency whenever either side performs communication regarding this connection when it does it is supposed to silently without regard to normal protocol close the connection and be ready to handle connection requests to the previously connected port there are two types of interactions in which half closed inconsistency is uncovered the first case occurs when the connected side sends a message over a write connection the side which has lost the connection receives this as a data message which does not correspond to an open connection and replies with an error report control message when the connected side receives it it realizes that the connection actually no longer exists and deletes it from its own tables the second case occurs when the host which has lost the meyer page rfc response to rfc april connection sends a connection request to the other host specifying the same sockets as were involved in the previous connection the host receiving this request recognizes the inconsistency because not only is the local socket already connected it is connected to the same foreign socket as specified in the connection request it internally deletes its record of the connection making the local socket free and responds to the connection request normally comments and alternative proposals the project mac computer systems research division opposes both protocol change proposals in this rfc we have moderate opposition to the proposal to handle half closed connections because it fails to consider all aspects of the problem and it further complicates the protocol but very strong opposition to the proposal for allocation resynchronization because it attacks a symptom not the disease and furthermore tends to mask diagnosis of a potentially very serious network problem rfc proposes the addition of two control messages reset connection by sender rcs and reset connection by receiver rcr whose sole purpose is to resynchronize the allocation counters at both ends of a connection in this way the lost allocate phenomenon in which allocate all control messages somehow are lost in transmission so that the sending side is unable to continue transmitting data is solved if it were truly a lost allocate problem this would be viable solution however i feel that this is really a lost message problem in which messages of all kinds are being lost in transmission which is much more serious all messages may be very frequent in communications with some hosts and these may be the ones most often lost but if messages are actually lost in the network it may also be data messages that are being lost which would provide similar symptoms a lost message in a telnet connection can be detected and overcome by the human user but an undetected lost message from the middle of a transmitted file can have disastrous consequences especially because the invalid file if ever detected can perhaps not be corrected because this solution tends to paper over the immediate problem and to propagate it to a point far removed in both space and time at which it appears as an incomprehensible disaster it should be strongly opposed the real problem appears to be the random undetected loss of messages somewhere in the transmission path a true solution to this problem is either a to eliminate the cause of undetected loss of messages or b to move to a new protocol which is designed to cope with an unreliable physical transmission path either of these solutions is meyer page rfc response to rfc april some distance away a proposed interim solution which modifies the existing gvb and ret commands and which has the additional feature of simplifying them somewhat is outlined below a receiving host may at an arbitrary time issue a give back allocation gvb control message for a connection gvb link f f m b the format of this gvb message is the same as that currently defined except that the fraction fields f m and f b are required to all s this is designed to provide a measure of upward compatibility a host operating under the modified protocol will ignore the fraction fields but under the current protocol this message means return everything a sending host which receives a gvb control message immediately ceases transmission on the specified link when the rfnm from the last message transmitted is received indicating an empty pipeline the sending host issues a return allocation ret control message returning the remaining allocation ret link msg space bit space the modified ret command has the same format as that currently defined the two differences are that it can not be sent until data transmission ceases and the last rfnm is received and that it must return all remaining allocation for the send link i e the allocation counters are set to zero when the host on the read side of the connection receives the ret message the allocation counters at the send side are zero and the pipeline is empty therefore if no error has occurred during the connection the allocation returned in the ret message should be the same as the allocation in the counters of the read side of the connection if so the read side can proceed to send a new allocation secure in the knowledge that no message has been lost if the two sets of values do not agree some error in the transmitted data may have occurred what to do in that case is a local host option some hosts may choose to close the connection while others may choose to resume transmission by sending a new allocation to the meyer page rfc response to rfc april sending side i feel that as a minimum a host should send a message indicating the error both to the user and to some human being at the host responsible for monitoring network performance this modified control message pair is capable of both its originally intended function and of detecting errors and resynchronizing allocations if desired when initiated by the receiving side i feel that the inability of this scheme to initiate allocation checking from either side is only a minor disadvantage which is more than compensated for by its positive features this scheme gives positive indication that an error has occurred the proposed rcs rcr method conceals errors and this minor change to the protocol may mean a correspondingly minor change to ncp s i have negative feelings regarding the solution to the half closed problem proposed in rfc to put additional burden on the rts and str commands not only unduly complicates the protocol but in some sense can make operation less fail safe and problems more obscure my main objection concerns the action to be taken when control messages are received which conflict with the current state of the receiving ncp this proposal suggests that an ncp receiving an str or rts for a socket it believes to be connected assume something about the state of the foreign ncp that the foreign ncp has closed the connection and automatically change its own state to agree with the assumed state at the other end close the connection at its end this may work fine if the assumption is correct and the implementations are free from bugs however the following situations could cause problems that are perhaps hard to diagnose the foreign ncp has a bug which causes it to send an rts or str for a connected socket the foreign ncp chooses to interpret the queuing option of the current protocol as permitting rfc s to be sent for already connected sockets or the local ncp has a bug which erroneously causes it to regard rfc s coming from a different host or from the particular foreign host but concerning a different foreign socket as pertaining to the open connection attached to the target socket a second objection is that this proposal does not cover all possibilities two likely possibilities are another socket from any host attempts to connect to the socket involved in the dead connection second the host that lost a connection attached to one of its read sockets makes another connection with different sockets but uses the same link number that implemented the previous connection the second case can be handled by additional complications to the protocol however the first case is symptomatically identical to the situation in which an rfc is issued for a genuinely already connected socket it can not be handled using this approach meyer page rfc response to rfc april i believe that a more rigorous use of the existing reset host rst control message would eliminate most of the causes of the half closed phenomenon viz one of the hosts involved in a connection goes down without sending an rst when it comes back up or the network between the two hosts partitions and only one host notes it if it were deemed necessary a pair of reset link control commands to reset an individual link could be added to the protocol to cope with instance of the half closed phenomenon due to other causes i d like to set down here a number of principles which i think are at least peripherally concerned with alleviating the half closed phenomenon none of these is explicitly stated in the current host host protocol document but i believe that their enunciation would tend to alleviate confusion caused by network and host failures a ncp which receives an imp to host message type host dead concerning a host should consider all connections or connection attempts with that host as dead and should purge them from its tables when after noting a foreign host as dead by receiving a host dead imp to host message an ncp receives any message from that host other than a reset host rst control message it should delete the message and respond with an rst it should respond normally to a received rst two hosts must exchange the rst rrp reset control message pair prior to any other form of communications an rst must first be sent by an ncp wishing to start communications with a foreign host if that host pair has not been previously reset since the local ncp came up or it noted the foreign ncp as down note that this does not require an ncp to send resets to all other hosts each time it comes up an ncp which receives an imp to host message type incomplete transmission concerning a write link implementing an open connection may at its option make several tries to retransmit the last message until a rfnm is received or the ncp gives up however unless the message is eventually successfully transmitted to the foreign host the ncp must abort the connection sending out a cls control message the successful implementation of retransmission depends on the retransmitting host to wait for a rfnm on a data link before sending a subsequent message and on all hosts to be able to discard messages which are not completely received meyer page rfc response to rfc april an ncp which receives a message from a foreign host that seems inconsistent with its current state should take no action to modify that state rather it should send an err error control message specifying the type of inconsistency and discard the inconsistent message an ncp receiving an err message should log it for human inspection and is then allowed to silently modify its internal state or send out control messages in order to remove the inconsistency this is an extension of the proposal in rfc that an ncp should delete a connection when it receives an err message specifying that the link involved is unknown this rfc was put into machine readable form for entry into the online rfc archives by helene morin via genie meyer page 