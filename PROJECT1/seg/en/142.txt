 network working group a bhushan request for comments mit mac nic april another look at data and file transfer protocols our experience with ad hoc techniques of data and file transfer over the arpanet together with a better knowledge of terminal imp tip capabilities and datacomputer requirements has indicated to us that the data transfer protocol dtp see ref and the file transfer protocol ftp see ref could undergo revision our effort in implementing dtp and ftp has revealed areas in which the protocols could be simplified without degrading their usefulness this paper suggests some specific changes in dtp and ftp that should make them more useful and or simplify implementation the attempt here is to stimulate thinking so that we may come up with a better protocol at the forthcoming data and file transfer workshop see ref experience to date a number of ad hoc techniques of transmitting data and files across the arpanet already exist perhaps the most versatile of these existing methods is the tenex cpynet system the cpynet system uses an ad hoc or interim file transfer protocol developed by ray tomlinson and others at bbn to transmit files among the tenex systems on the arpanet private communication with bill crowther bbn in cpynet the using process goes through the initial connection protocol icp to server socket establishing a full duplex connection with an bit byte size control information including user name password command read write or append file name and byte size for the data connection is transmitted from the using process to the serving process the original full duplex connection is then closed and a new full duplex connection is established using the original socket numbers but with possibly a different byte size the file is now transmitted on this newly established connection the end of file is indicated by closing the connection the mode of transfer is thus similar to dtp indefinite bit stream cpynet has been used quite extensively for transfer of tenex system files because data is not reformatted and because the optimum connection byte size may be used for data transfer cpynet is quite efficient the pdp and there are quite a lot in the arpanet works more efficiently with a bit byte size which minimizes packing and unpacking of data and increases effective i o speed bhushan page rfc another look at data and ftp april bit rate is times the i o word transfer rate instead of times the closing and reopening of connections does increase overhead but this is small in tenex when compared with inefficiency introduced in data transfer using an inappropriate byte size data and file transfer has been achieved at other sites by a simple modification of the user telnet to enable the transfer of ascii files as terminal i o data streams within the constraints of the telnet protocol an example of this approach is the use of the send file and script features within the mit dmcg user telnet send file enables the pdp dmcg user to transmit his local ascii files to a receiving process such as an editor at the remote host via a telnet connection the program allows for a variable buffer size for transmission and measures the transfer rate of information bits script enables a user to receive an ascii file from a remote host by essentially printing it out the terminal output stream is directed to a local file our initial experience with the use of send file program has affirmed the almost linear relationship between buffer size and transmission rate inverse relationship to processing cost until the limits imposed by allocates ncp sending buffers the imp message size or the receiving process speed are reached our experiments have indicated that telnet processes in which the receiving process looks at each character are slow and expensive the transfer rate to most telnet receiving processes ranges between and bits per second the ncp to ncp transmission rate however is an order of magnitude higher to bits per second a variation of the above method which avoids the character by character processing of telnet is transmitting files via auxiliary connections other than the telnet connections with or without the use of dtp we are collecting data on response times connect times and transfer speeds employing different transfer and buffering strategies tip capabilities and tip users it appears now that tips will not support dtp in its present form the more elaborate tips with magnetic tape units will however support the dtp block mode descriptor and counts private communication with bill crowther bbn it is inconvenient at the very least for a tip user to use services based on dtp such as remote job service file transfer mail and datacomputer the tip philosophy is that the computational load and storage should be in the hosts or in the terminals and not in the terminal processor see ref to be consistent with this philosophy the protocols should be simple and convenient to use from the user viewpoint bhushan page rfc another look at data and ftp april ideally tip users would like to connect using the initial connection protocol to the advertised service socket including logger socket in the remote host and type their commands in a uniform easy to use format allowing the use of ascii within dtp would facilitate this an alternate approach is extending telnet to include dtp modes particularly the indefinite bit stream mode another step would be to use printable ascii strings instead of numeric codes for commands and arguments in user level protocols use of standard file system commands with uniform interpretation and format will lead towards the existence of a network virtual file system much in the same line as network virtual terminal defined in telnet protocol the transparent mode in dtp was specifically included to allow convenient use by tips since the tips will not support transparent mode it makes sense to do away with it this change would lead to a simplier dtp which allows transfer in block mode and the indefinite bit stream mode the suggested default which would be acceptable to all including the tips as it involves no overhead we can then make optional or do away with the now mandatory modes available handshake the using process can indicate if it also accepts the block mode for transfer either by modes available transaction or by an argument in the command string the server should accept input in dtp mode as well as ascii these fundamental changes in dtp will make communication with tips a lot easier tip users who do not have a mediating user ftp process and a file system in their tip would probably want to transfer files from input devices or to output devices such as line printer card reader or punch or magnetic tape these devices listen on specific ports or sockets on a tip it would be desirable to modify ftp to allow sending data to a specified socket in a specified mode and type tip users would then find it convenient to obtain listing of their files on a high speed line printer input their files from a card reader and keep back up on cards or magnetic tapes datacomputer requirements we have been having a continuing dialogue with cca personnel dick winter in particular regarding cca s plans for data and file transfer on the datacomputer and their specific requirements dick bhushan page rfc another look at data and ftp april winter will be speaking on this subject at the data and file transfer workshop this is an attempt to summarize the main points of our discussion and their implication for data and file transfer first cca appears quite flexible at this stage regarding the manner in which datacomputer is to be used even the datalanguage see ref is flexible and can undergo change however cca would like some changes in the current file transfer protocol and its envisioned use ideally cca would like to see a single full duplex connection for transfer of all control information which is in datalanguage this information is generated by a process which may be a user at a console or a user program ability to inter mix data and control information would be definite advantage the datacomputer would probably support dtp and allow use of telnet ascii data may alternatively be sent to or received from a separate user defined port which may be a socket it would be advantageous if a user could instruct the datacomputer to transfer data to or from a file in remote system via ftp assuming a server ftp in remote system cca is currently not committed to this idea but is considering it in the cca view the datacomputer represents a data management facility with datalanguage as its command language from the viewpoint of datacomputer as an ftp server ftp commands be a subset of the datalanguage it is therefore desirable that ftp commands be printable ascii strings instead of numeric codes remote job service requirements initially two separate protocols were proposed for remote job service rjs one was the netrjs protocol see ref for remote job service from large hosts and the other was the netrjt protocol see ref for remote job service from tips and other mini hosts the current thinking however is to move towards a single rjs with as much overlap as possible between the methods of dealing with these two user populations see ref perhaps inclusion of ascii within dtp would make this feasible the existing proposals for dtp and ftp have been considered somewhat less than optimal for rjs needs specific drawbacks of dtp and ftp have been pointed out in the handling of data structures and data types most of these problems seem relatively easy to resolve it would involve making network ascii the default data type acceptable to all hosts and providing a way in ftp for proposing and rejecting alternative data types and data structures bhushan page rfc another look at data and ftp april another inadequacy of ftp which pertains to other applications as well is in the area of error recovery currently there is no way to restart transmission if an element in the transmission path fails one solution suggested has involved the use of sequence number see ref a number of other solutions exist to the problem these are discussed later in the section ftp reconsidered dtp reconsidered the aspiration for dtp was that it would provide a uniform mechanism for separating information into its logical structure records files and control and rudimentary error control the evaluation of dtp and its modes should be on the basis of speed real time efficiency processing cost reliability error control and recovery and the ease of its use it is now clear that unless dtp was significantly revised the tip and other mini host user would find it difficult to use services based on use of dtp allowing the use of ascii within dtp and using defaults instead of the modes available handshake would alleviate this problem but compromise the dtp error control function whether error control belongs at the dtp level or at a higher level needs further discussion dtp in its present form does not provide sufficient error control and recovery procedures to make dtp more useful either it should be simplified at least from a user viewpoint or it should be extended to include better error control with built in error recovery and possible handling of data types and data structures in the simplified version dtp would only be a format procedure in which data could be transmitted as ascii no format with escape to an bit transparent indefinite bit stream mode or in data blocks descriptor and count mode the choice of which mode to use and all error control error recovery and aborts would be handled by the higher level protocol the utility of the block mode in data transfer has been questioned by many who suggest that it puts a large overhead for providing the simple function of indicating end of file and separating data and control information the alternative data transfer strategy is to use separate connections for control and data information and or close and reopen connections this causes an overhead of a different sort but has the advantage that the byte size for connection may be chosen to optimize data transfer bhushan page rfc another look at data and ftp april a drawback of present dtp is that it is geared to transfer of bit bytes perhaps a good strategy for data transfer would be to allow sending data in an agreed upon transfer mode the transfer mode chosen should determine the byte size for connection the data type chosen and any data structure information this mode may be chosen at the dtp level or at the using protocol level ftp reconsidered the aspiration for ftp was that it would facilitate file management and file transfer in the arpanet virtual file system ftp success should be evaluated by the extent of its use convenience and efficiency in its use and its suitability for other applications such as datacomputer rjs and mail wide use of ftp would be possible if a user could use an ftp server directly without the help of a mediating dtp ftp user process this would require that commands be ascii strings instead of numeric codes and that ascii characters be an acceptable input such a change in ftp would greatly increase its acceptance at the cost of making the server implementation more complex combined implementation however would be simplified as the mediating ftp user process if used at all would be simplified efficiency of transfer is an important factor affecting the usefulness of ftp file transfer may be very expensive in terms of cpu time and slow in real time if an inappropriate transfer strategy is used e g inappropriate byte size every attempt should be made to optimize transfer of data a good strategy may be to allow transfer of files over a separate connection or close and reopen connections using perhaps a different byte size a problem with indicating end of file by closing connection is that is uncertain if the connection was closed because end of file was reached or because of a failure or error condition perhaps ncp interrupts could be used in addition to a close to indicate definite end of file condition a drawback in the present ftp strategy is that it has no restart procedure one proposal for restart has involved the use of the sequence numbers used in dtp block mode our feeling is that perhaps restart may best be accomplished by incorporating a command in ftp that allows a user to specify the place in file where to begin retransmission a possible solution is to use the spf command implemented in the ucsb simple minded file system see ref another solution may be to have optional arguments for retrieve and store commands that allow selective retrieval and replacement specified by bits character words lines pages or segments bhushan page rfc another look at data and ftp april another useful addition to ftp would be a protocol procedure between user and server to agree to data type data structure and mode for file transfer this would enable the user and server to reach the optimum file transfer strategy acceptable to both concluding remarks we have discussed in this paper what we see as the major problem areas in the present dtp and ftp specifications we hope this discussion will stimulate thinking so that we can arrive at revised specifications for dtp and ftp that satisfy all the diverse needs in an elegant manner references the data transfer protocol bhushan et al nwg rfc nic the file transfer protocol bhushan et al nwg rfc nic data and file transfer workshop announcement a bhushan nwg rfc nic the terminal imp for the arpa compuer network ornstein et al sjcc nic datalanguage computer operation of america datacomputer project working paper no october nic interim netrjs specifications r t braden nwg rfc nic netrjt remote job service protocol for tips r t braden nwg rfc nic rjs protocol meeting notes february a mckenzie limited distribution a suggested addition to file transfer protocol a mckenzie nwg rfc nic network specifications for ucsb s simple minded files system james e white nwg rfc nic this rfc was put into machine readable form for entry into the online rfc archives by h l ne morin viag nie bhushan page 