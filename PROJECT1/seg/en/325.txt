 network working group j burchfiel request for comments r tomlinson nic bolt beranek and newman february proposed change to host host protocol resynchronization of connection status i introduction the current host host protocol nic contains no provisions for resynchronizing the status information kept at the two ends of each connection in particular if either host suffers a service interruption or if a control message is lost or corrupted in an interface or in the subnet the status information at the two ends of the connection will be inconsistent since the current protocol provides no way to correct this condition the ncp s at the two ends stay confused forever a frequent and frustrating symptom of this effect is the lost allocate phenomenon where the receiving ncp believes that it has bit and message allocations outstanding while the sending ncp believes that it does not have any allocation as a result information flow over that connection can never be restarted use of the host host rst reset command is inappropriate here as it destroys all connections between the two hosts what is needed is a way to reset only the affected connection without disturbing any others a second troublesome symptom of inconsistency in status information is the half closed connection after a service interruption or network partitioning one ncp may believe that a connection is still open while the other believes that the connection is closed does not exist when such an inconsistency is discovered the open end of the connection should be closed burchfiel page rfc february ii the rcr and rcs commands to achieve resynchronization of allocation we propose the addition of the following two commands to the host host protocol rcs link reset connection by sender rcr link reset connection by receiver the rcs command is sent from the host sending on link to the host receiving on link this command may be sent whenever the sending host desires to re synch the status information associated with the connection some circumstances in which the sending host may choose to do this are after a timeout when there is traffic to move but no allocation assumes that an allocation has been lost when an inconsistent event occurs associated with that connection e g an outstanding allocation in excess of bits or messages the mechanics of re synchronizing the allocations is simply empty all messages and allocates from the pipeline zero the variables at both ends indicating bit and message allocation restart allocate message exchanges in the normal way this resynchronization scheme is race free because the rcs and rcr commands are used as a positive acknowledgement pair iii resynchronization by sender to initiate resynchronization the sending ncp should put the connection in a waiting for rcr reply state no more regular messages may be transmitted over this connection until the rcr reply is received burchfiel page rfc february wait until the message pipeline is empty i e until a rfnm has been received for each regular message sent over this connection this synchronizes the control and data activity and also assures that the data stream will not be corrupted during the control re synchronization exchange send the rcs command continue to process allocates normally updating the variables which indicate outstanding bit and message allocation when the receiving ncp receives the rcs it should zero the variables indicating outstanding bit and message allocation reset the connection to the state which indicates readiness to accept a message confirm the re synchronization by sending the rcr reply reconsider bit and message allocation and send an all command for any allocation it cares to do when the sending host receives the rcr reply it should zero the variables indicating outstanding bit and message allocate put the connection into the ready to send message state in preparation for any forthcoming all commands at this point the pipeline contains no messages and no allocates and the outstanding allocation variables at both ends are in agreement with value zero iv resynchronization by receiver the re synchronization sequence may be triggered by the receiving ncp such resynchronization could be initiated manually by tip and telnet users who are expecting output but receiving none again assuming that allocation has been lost the appropriate action is to reset the connection by sending an rcr command this action is also appropriate if an inconsistent event occurs with respect to the connection e g arrival of a message which exceeds allocation burchfiel page rfc february to initiate re synchronization the receiving ncp should put the connection into a waiting for rcs reply state no more allocates may be transmitted for this connection until the rcs reply is received send the rcr command continue to process regular messages normally updating the variables which indicate outstanding bit and message allocation when the sending ncp receives the rcr command it should wait until the message pipeline is empty i e until the rfnm has been received for each regular message sent over the connection this synchronizes the control and data activity and also assures that the data stream will not be corrupted during the control re synchronization exchange zero the variables indicating outstanding bit and message allocation put the connection into the ready to send message state in preparation for any forthcoming all commands confirm the re synchronization by sending the rcs reply when the receiving host receives the rcs reply it should zero the variables indicating outstanding bit and message allocation reset the connection to the state which indicates readiness to accept a message reconsider bit and message allocation and send an all command for any allocation it cares to do v simultaneous resynchronization this specification for a re synchronization exchange is guaranteed to restore the allocation information at the two ends to a consistent state this happens correctly whether the re synchronization is triggered by the sender the receiver or both at the same time when both ends initiate a command at the same time the rcs and rcr commands cross in the pipeline each interprets the other s command as a confirmation reply thus the resynchronization happens correctly independent of the relative timing burchfiel page rfc february the essential factor here is that when either end receives the reset request it is sure that the other end will take no further actions which could affect the allocation variables the activity which occurs during simultaneous resynchronization by both ends is as follows the sending ncp puts the connection into a waiting for rcr reply state no more regular messages may be transmitted over this connection until the rcr reply is received waits until the message pipeline is empty i e until a rfnm has been received for each regular message sent over this connection this synchronizes the control and data activity and also assures that the data stream will not be corrupted during the control re synchronization exchange sends the rcs command continues to process allocates normally updating the variables which indicate outstanding bit and message allocation concurrently with and above the receiving ncp puts the connection into a waiting for rcs reply state no more allocates may be transmitted for this connection until the rcs reply is received sends the rcr command continues to process regular messages normally the rcs and rcr commands cross somewhere in the pipeline when the sender receives the rcr command it interprets it as a reply to its own rcs command it then zeroes the variables indicating outstanding bit and message allocation puts the connection into the ready to send message state in preparation for any forthcoming all commands concurrently with and above the receiving ncp will receive the rcs command it will interpret it as a reply to its own rcr command it then burchfiel page rfc february zeroes the variables indicating outstanding bit and message allocation resets the connection to the state which indicates readiness to accept a message reconsiders bit and message allocation and sends an all command for any allocation it cares to do vi the problem of half closed connections the above procedures provide a way to resynchronize a connection after a brief lapse by a communications component which results in lost messages or allocates for an open connection a longer and more severe interruption of communication may result from a partitioning of the subnet or from a service interruption on one of the communicating hosts it is undesirable to tie up resources indefinitely under such circumstances so the user is provided with the option of freeing up these resources including himself by unilaterally dissolving the connection here unilaterally means sending the cls command and closing the connection without receiving the cls acknowledgement note that this is legal only if the subnet indicates that the destination is dead when service is restored after such an interruption the status information at the two ends of the connection is out of synchronization one end believes that the connection is open and may proceed to use the connection the disconnecting end believes that the connection is closed does not exist and may proceed to re initialize communication by opening a new connection rts or str command using the same local socket the re synchronization needed here is to properly close the open end of the connection when the inconsistency is detected we propose to accomplish this by changing the semantics of three existing host host protocol commands vii redefinition of rts str err link to handle half closed connections the missing cls situation described above can manifest itself in two ways the first way involves action taken by the ncp at the open end of the connection it may continue to send regular messages on the link of the half closed connection or control messages referencing its link the ncp at the closed end should respond with the err message specifying that the link is unknown error code does not correspond to an open connection on burchfiel page rfc february receipt of such an err message the ncp at the open end should close the connection by modifying its tables without sending any cls command thereby bringing both ends into agreement the second way this inconsistency can show up involves actions initiated by the ncp at the closed end it may thinking the connection is closed send an str or rts to reopen the connection the ncp at the open end will detect an inconsistency when it receives such an rts or str command because it specifies the same foreign socket as an existing open connection in this case the ncp at the open end should close the connection without sending any cls command to bring the two ends into agreement before responding to the rts str viii conclusions the scheme presented in section ii to resynchronize allocation has one very important property the data stream is preserved through the exchange since no data is lost it is safe to initiate re synchronization from either end at any time when in doubt re synchronize the changes in the semantics of rts str and err code commands provide the synchronization needed to complete the closing of half closed connections the protocol changes above will make the host host protocol far more robust in that useful work can continue in spite of lapses by the communications components this rfc was put into machine readable form for entry into the online rfc archives by via genie burchfiel page 