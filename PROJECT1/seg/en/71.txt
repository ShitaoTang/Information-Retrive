 network working group r kalin request for comments mit lincoln lab nic august achieving reliable communication this material has not been reviewed for public release and is intended only for use with the arpa network it should not be quoted or cited in any publication not related to the arpa network abstract a non standard protocol suitable for either second or third level use is proposed with the intent of providing error resistant and highly reliable communication channels errors introduced by message garbling message loss and message pickup are considered measures for increasing throughput are also discussed aims and limitations it is not our intent to propose the design of a perfect communication channel rather it is our contention that in the real world there can be no perfect channels and that no amount of protocol can insure the error free transfer of information our goal is to explicate the various types of errors that are possible and to provide for each techniques of detection and recovery that at a cost can be made arbitrarily good in this way the mean time between undetected errors can be made as large as necessary error types and detection over a message switching facility such as the arpa network all transmission errors can be divided into two classes those that result in the loss of an expected message and those that result in the picking up of an unexpected message a single bit inversion can cause errors of both types error detection can therefore be divided into two components one which attempts to determine if the message just received is appropriate at that time and another which attempts to determine if a message has been lost the detection of garbled input messages has been adequately covered by classical coding elsewhere mistakenly termed communication theory internal message consistency can be determined through the use parity bits checksum fields or any of the various coding techniques available for adding some measure of redundancy with relative simplicity the likelyhood of an undetected error of this type can be made small enough so as to become inconsequential kalin page rfc achieving reliable communication august because it is adequately covered elsewhere no further discussion shall be given here the detection of a message s external consistency whether or not it can possibly follow the message that arrived just before it can also be straight forward sequence numbers if used can be easily checked a modulo n sequence field will allow detection of up to n successive message losses if several concurrent links are in use then sequencing can be maintained for each link multi link single sequence schemes are more complicated and although used between imps for transmission of message packets they shall be ignored here the detection by a receiving host of a lost message can not be determined directly but rather must be inferred from other observations any automatic correction scheme must be prepared to handle the possibility of faulty inference message loss would normally be inferred upon the arrival of a message that should follow the one expected it might also be inferred by the fact that the message expected is long overdue error correction if a bch or other error correcting code is used for transmission errors detected in a message s internal consistency can sometimes be corrected by the receiving host in the event that this is not possible the content of the message is of little use because it can not be relied upon the only reasonable solution is that of discarding the message and relying upon the recovery procedures implemented for lost messages errors of external consistency can also be treated in the same way the message can be thrown away and the techniques for recovering lost messages relied upon over a critical channel a slightly fancier technique can at times save some retransmissions if message n is expected but message n arrives there is no need to throw away message n and then recover two messages it could be saved and only message n retransmitted on noisy channels the technique of saving out of sequence messages can be used to some advantage especially if recovering from a lost message requires several messages of overhead on the arpa network the measured error rate is so low that its advantages are outweighed by the increase in resident coding recovering lost messages the simplest technique i know of for recovering lost can be defined by the following rules kalin page rfc achieving reliable communication august all undiscarded messages have reply messages messages with coding errors that can not be corrected are discarded the receiver can determine if a message is in sequence messages received that are out of sequence are discarded if no reply message is received in n time units since the last transmission the last message sent is retransmitted space need not be isochronic a new message is not sent until the reply for the last one has been received the above protocol if run is highly effective for continuous communication since by rule only one message can be in transit at a time the necessary sequencing information can be contained in a single bit unmodified it is not suitable for finite communication since rules and guarantee that there will be no last message the protocol also does not make very effective use of a pipelined channel since there is only one message being sent at a time channel throughput can be increased by several techniques the first of which would be to disassemble the data stream into several eg four or eight streams transmit each using the above protocol and then reassemble the streams at the far end another technique is to modify rules and a if no reply has been received to message m in n time units since the last transmission then messages m m are retransmitted a there must be no more than l outstanding unreplied messages with l equal to one this protocol degenerates into the first protocol increasing l increases throughput until the gain is outweighed by the time spent in error recovery the larger l the costlier error recovery the value of n should be adjusted so that the reply time for a message is usually less than n plus the time to send l messages increasing n too much will have the effect of lowering the response time to errors decreasing n increases the probability initiating unnecessary retransmissions a critical race the above protocols leave unresolved the the particulars of starting and stopping a finite transmission in opening a communication channel what is the sequence number of the first message sent what will be the first sequence number of the first message sent what kalin page rfc achieving reliable communication august will be the first sequence number of the first reply received at the end of transmission how does one signal the last message the following two rules are introduced if the same message has been received k times eg then it should be accepted as being in sequence the expected sequencing should be adjusted accordingly k identical reply messages are then sent if no reply has been received in j seconds then the retransmission of the last unreplied message should cease with these additional rules a finite transmission is started by repeatedly transmitting the first message until k identical reply messages are received sequencing is adjusted accordingly and then subsequent messages can be sent a conversation is broken by quitting transmission after the reply to the last message you care about has been received eventually the other end will stop resending the reply to avoid ambiguity the variable j should be less than n times k problems will arise if the network crashes for j seconds for there is a race condition over whether or not the lack of a reply is the result of a channel failure or the end of a conversation this rfc was put into machine readable form for entry into the online rfc archives by ryan kato kalin page 