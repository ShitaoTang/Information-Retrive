 network working group g hicks request for comments utah n i c april network remote job entry program netrjs since october we at the university of utah have had very large compute bound jobs running continuously these jobs did reduce response time on our pdp for the other tenex users since february we have been submitting jobs to the ucla our normal mode of operation is diagrammed below utah network ucla netrjs rjs file system user to use netrjs the user creates a job file under the tenex system he then requests netrjs to send that file to the ucla rjs remote job service system using netrjs the user is able to monitor the progress of his job when rjs notifies the user that his job output is ready to be picked up the user can request netrjs to retrieve his output printed or punched to a local file where to get the source program a copy of the source program is available by contacting gregory p hicks computer science department merrill engineering building university of utah salt lake city utah hicks page rfc network remote job entry program april ucla remote job service to use the ucla via rjs it is necessary to have a valid account at ucla have an assigned rjs terminal id these can both be obtained from bob braden ucla math sciences building boelter hall los angeles calif the remainder of this paper describes the program in greater detail and the steps necessary to run a users program at ucla description of the problem there are some jobs that are compute bound for such a long time that they seriously affect response time for interactive users these are jobs that run from ten hours upward another computer was needed to handle these jobs the ucla ccn was suggested the is primarily a batch processing type of system where as a matter of course it is tuned to jobs that typically run for hours ucla does have software to allow jobs to be submitted via remote terminals either through direct communication lines or through the arpanet how and why the program was written ucla s software allowed the remote terminals to have unlimited connect time i e the time the terminal was actually connected to the at no charge to the user the software at ucla required that each terminal be allotted k s bytes core for each connection that is open at any one time now since each terminal could have a virtual card reader virtual line printer and a virtual card punch this means that one terminal could occupy k of core at ucla this according to the ucla systems people would put a heavy load on the system if all the ports were occupied at once so to alleviate this situation as a matter of design decision it was decided to have the operator request to have the various connections opened the operator could not have more than three connections at any one time he could have the two operator connections and one of the following open at once hicks page rfc network remote job entry program april a virtual line printer b virtual card reader c virtual card punch this would cause the operator to be more active than an operator that had a program that waited for his output to be sent to him automatically however because of the reduced load on the remote ucla system the turn around time was probably faster than if all remote rjs users had all the connections open data tables needed by netrjs the netrjs has no information built into it about who has a valid terminal id at ucla this information is contained on the disk in a file called pwd sav there is a program that creates and updates this information for netrjs netrjs is therefore site independent it will work from any tenex system that is able to use the arpanet the command interpreter netrjs borrowed r s tomlinson s telnet command interpreter and replaced his commands with those needed to run a program at ucla as in telnet the command interpreter does recognize commands partially typed in if it does not have enough of the command to recognize it will let the operator know about it operation commands to netrjs the commands available are send file named retrieve output from options available here are a printer b punch under punch the options are i retrieving an object deck or ii retrieving an ascii file time now is logout restart disconnect quit systat jobstat q hicks page rfc network remote job entry program april now to explain what the various commands do send file named asks the operator for the name of his program on the disk converts it to card images and sends the file to the remote job service at ucla when the file has been accepted by ucla the operator will get a confirming message telling him how many cards were read and the name of his job at this point the operator may signoff from rjs and return at a later time to get his output retrieve output from asks the operator for the name of the virtual device the output is available on the operator may specify either the printer or the punch time now is outputs the time for the users information restart will produce a very virgin netrjs this should be used only as a last resort since it does reset the world logout will do just that it will log the user out from his local and his remote job it does require a confirming carriage return or it will do nothing disconnect will log the user out from the remote job and will disconnect break all connections between him and the remote computer quit this is the only recommended way that the netrjs program be terminated the program may be continued with no harm done jobstat will cause rjs to show the status of any jobs that are still active and that have been submitted by the remote terminal systat will cause rjs to tell the operator what remote terminals are using the rjs system at the present time will do several things when in the command level it caused netrjs to tell the operator what it expects next when nothing has been typed it will respond with all the top level commands when something is entered it will respond with all the commands that begin with those particular letters as in telnet it will see nothing that is illegal when sending or receiving a file the will tell netrjs to type out it s progress so far this message is typed at the end of the transaction that it is currently processing for that reason it may be a few minutes before the message is typed out hicks page rfc network remote job entry program april q this command is a very useful abort facility when used in the following fashion q c will terminate netrjs this command is not interpreted by the command interpreter it is looked for by the sending console portion of the program in any case the program may not be continued how it works this command simply re enables the c in the exec and stops the console from doing anything eg sending messages to ucla finding out the system status at ucla etc the recommended sequence for this command if it must be used is q c for this reason the program is still processing but the operator cannot communicate with it handy commands to the rjs at ucla some of the more useful commands available to the rjs user are signoff this will inform rjs that the user wants to terminate the session if there are no output streams active the signoff will be accepted if there are output streams active the rjs will wait until such time as they have completed restart may be abbreviated rst will restart the specified device job devices available are at this time printer and punch the user may specify his jobname this will restart his job for output from the beginning the format of the restart command is restart device or jobname job there will be a confirming message that specifies the action taken status system this will tell the operator what remote terminals are using the rjs system now in addition status system includes the status of all jobs currently in the system that have been submitted from the user s terminal the only abbreviation allowed is for system sys status job will tell the operator what output if any is waiting to be returned to his terminal it will also tell him if there are any jobs being executed this command should be done each time the user signs onto rjs abbreviation allowed j for job the netrjs control characters the escape character for netrjs is the control character s this was specified so that remote sites and users could use the program and still retain their sanity and that of telnet this will always hicks page rfc network remote job entry program april return you to the command level of netrjs this is good if you think that you ve made a mistake eg when writing the program etc and you want to abort a send in other words do not do s and think that you can continue where you left off in a send or retrieval it won t work at this time in a later implementation it may with the provision of stopping and then continuing if you wish the printer punch or reader everything underlined should be typed in by user sample session using netrjs utah tenex january expc user hicks password account job on tty apr run netrjs nrj network remote job service ready rjs terminal netutah has signed onto rjs rjs no alerts outstanding s rjs i job netutah accepted by rjs cards read rjs i terminal netutah has spl job s rjs i terminal gsm active an line rjs i punch reroute engr rjs i terminal netill active on line rjs i terminal netutah active on line status job rjs i terminal netutah has the following jobs on rjs rjs i netutah spl a rjs i print output for job netutah now available prty immed rjs i punch output for job netutah now available prty immed signoff rjs i terminal netutah has requested signoff from rjs nrj i signoff accepted when the operator s console is active the netrjs prompt character is the this indicates that the program is ready to accept commands when the is printed the console is in the remote mode anything that is typed at this point goes directly to rjs when sending or retrieving files the operator may communicate with rjs if he wishes even though the has not yet been output the operator s console is in the remote mode at all times except when netrjs is at the command level editing on the network there are two control characters that allow you to make mistakes and then to correct them one is control x this has the action of notifying rjs to ignore your last line this is echoed by the other is control h this will cause ucla to ignore the character immediately preceding it this is echoed by and there will be no echo of the deleted character tabs and other neat goodies most people writing programs under tenex like to use the tab stops provided on the teletype so we needed a nice number to set them to when running netrjs the user should be aware that the tab stops are set every columns in other words a line that starts with a tab will find the first character in card column the program accepts almost any type of indicator eg tenex eol and cr lf hicks page rfc network remote job entry program april this last in any order by the way it also deletes blank lines and since the user may wish to use a program written in a language such as fortran to generate data the program also ignores null characters when retrieving a file of data for an the program uses and this is to keep the output compatible with text editors such as qed ded sos and etc file format when sending a file to ucla there is a line limit of characters this is a design restriction in that jobs going to the os be no longer than characters line remember ibm is still card oriented the operator will get a nasty well semi nasty anyway message if netrjs finds a line that is longer than that for an output file there is no limit to the length of a line other than that imposed by the programming language used up to characters when the user retrieves a punch file he may find that there are a few extra lines thrown in this is done by ucla to allow the user to identify his deck when it is punched on the card punch this rfc was put into machine readable form for entry into the online rfc archives by elias lofgren hicks page 