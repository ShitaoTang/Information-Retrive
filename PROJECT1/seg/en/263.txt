 network working group m a padlipsky request for comments mit multics nic june two solutions to a file transfer access problem in rfc bob bressler raises the issue of how one can use the file transfer protocol to send a file to a user on another system without knowing that user s password in rfc kan pogran points out certain objections to bressler s solution of having a daemon process do the job in particular the fact that it would require an interpretive access control mechanism in the daemon different from most system s normal access control mechanisms because ken felt that it would be too much of a digression in rfc for him to cover the following points fully i decided it might be of interest to deal with them separately there are at least two solutions to the problem bob raised in rfc in regard to my sending him a file without knowing his password which don t give rise to the problems noted in rfc one hinges on adding a convention to the ftp the other on adding a command the first solution is very straightforward instead of having me push the file he could pull it that is he uses his own principal identifies thus solving access permission problems at his end and his own user ftp to extract the file with the aid of my server ftp all this requires is that i give appropriate access permission on my end and he have the ability to use my server ftp the second condition is met by either a his having an account on my system or b my system s having a known account for free server ftp use so standing the model on its head solves the functional problem although he has to pay for the user ftp but then it s he who wants the file so why shouldn t he on the other hand he might not be logged in right now and i might be and by the time he can get logged in my system might be scheduled to be down fortunately there s also a moderately straightforward solution to the problem as originally posed this goes back to the mechanism used to prevent capricious and or malicious card input on multics instead of placing input card deck or transferred file directly into the alleged recipient s directory place it in a pool directory and merely inform the recipient of its arrival if he really wanted it he then copies it into his own directory that way unauthorized people can t freeload on somebody else s directory and the pool is of course periodically purged nor can they clobber others already existing files padlipsky page rfc two solutions to a file transfer june this second solution has the virtue of requiring fewer steps than the first and would work even when the first wouldn t so even though it would require another ftp command i propose the addition of a new ftp pool command which does what the last paragraph described depending on the various servers protection mechanisms the pooled files could be made readable only by the declared recipients this would for example offer an easy way to get some privacy for mail which otherwise is likely to be readable by anybody who can write it although other solutions to that particular problem of course exist at any rate the pool command s syntax would be pool id name where id is a valid user identifier on the server and name is the desired name to be placed on the about to be transferred file in the server s pool directory servers must of course do whatever pre or post fixing to name is necessary to make it unique within the pool the transfer then takes place in the same manner as with stor and on successful completion the server sends a message to id that he should pick up name suitably modified to look like a local pathname if he wants it the message should also identify the putative sender even though it might have come in from a free account the id should naturally be validated before starting the transfer the question has been raised locally as to why we don t simply take a pooled view of stor on multics and forget about pushing for a new command to do so would have two drawbacks i feel first i think we d be remiss in our duty as nwg participants if we failed to attempt to offer solutions to protocol problems to the network community as a whole second on a less pious but more practical note if we don t know the id we have to infer it from the pathname which rules out abbreviations and forces senders to have to know too much about our internal structure the alternative of requiring an additional argument to the stor is subject to the same objection it is also subject to the objection that protocols really shouldn t be unilaterally extended of course we could go to site specific parameters but that s complicating life so much that the alternative of no unsolicited files seems preferable therefore i think that pool would be worthwhile unless no other servers have enough access control for it to be necessary anywhere but on multics at the very least having the protocol specify an access id optional argument to stor seems desirable input as to whether any of the other servers has file access control abilities similar to those of multics would be useful in clarifying whether this whole area is one which needs specific treatment at the padlipsky page rfc two solutions to a file transfer june protocol level or merely needs internally acceptable handling at our end in the meantime if you re trying to send an unsolicited file to us for free you can use the netml mechanism with no directory qualification on the target pathname in the stor then mail the file name to the intended recipient who will copy the file into his own directory from in our syntax udd cnet anonymous that s all pretty complicated but it sure does go to show that higher level protocols need to know an awful lot about the various operating systems at any rate comment on either bressler s problem pool stor or other people s access control mechanisms would all be appreciated endnotes for b i suggest that the user netml pass netml discipline of rfc be extended that is hosts which allow free use of their ftp servers should accept that pair of ftp commands as an indication to commence free service whether this leads to a login of a dummy user or a passoff to a daemon process is a matter of local implementation preference of course note that this definition relieves the user of having to know the server s pathname for the pool directory this rfc was put into machine readable form for entry into the online rfc archives by thomas farmer padlipsky page 