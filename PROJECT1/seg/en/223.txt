 network working group b thomas request for comments bbn tenex nic july categories protocols ftp references rfc comments on file access protocol a file access protocol fap of the sort proposed by john day in rfc is a good idea the following comments suggest improvements mostly additions to the protocol described in rfc philosophical comment the intent of both ftp and fap is to make it possible for a user to remotely access files in effect ftp provides means for a user to have parts of file activity of the sort typically initiated at the command language level slaved across the network to the site where the file resides in a similar way the intent of fap is to provide a mechanism which allows activity of the sort typically initiated by programs at the operating system or monitor level to be slaved across the network to the site where the file resides the open clos setp etc commands of fap can be viewed as attempts to define generic file system monitor calls the suggestions made below are further attempts to make features typically available to local users also available to remote users via fap the open command should allow for a third open mode called a for append in terms of its action with respect to a file and file pointer the command open a foo would be equivalent to the sequence open w foo setp e the difference would be with respect to access control many systems allow a user to control separately write and append access to a file e g on tenex a user usually sets the protection on his message txt file such that anyone can append to it but only he can write it for such systems the append open would succeed in many cases in which the write open would fail the principle here is that fap to as large as degree as is practical should allow remote users to access files in the same way as local users may thomas page rfc comments on file access protocol july the protocol as proposed allows for the creation of non sequential files but provides no convenient way for remotely accessing them after they are created for example if sent to a tenex server the sequence open w foo byte size assumed setp b write setp write clos would create a file foo with two pages on tenex a page bit words the two pages would be page and page because page does not exist the file is said to have a hole in it access to foo via fap would be difficult unless the remote user knew its page structure prior to access to support remote access to files such as foo fap should have means for a user to determine a file s structure consider a value returning command that returns the value the file pointer should be set to in order to point to the first byte of the next used page block or record beyond the current position of the file pointer with such a command call it fnub find next used block the following sequence could be used to retrieve a holey file such as foo open r file setp b a fnub let x the value returned if x null then clos else setp x read page size goto a this presumes that the remote user knows the block page size so that he can properly access the file one can imagine files having blocks of variable size perhaps fnub should return two values the file pointer position of the next block and the size of that block in bytes fap should provide means for a remote user to acquire certain status and descriptor information about a given file the following is a non exhaustive list of information which would be useful to a user remotely accessing tenex files user s access to file can he read write execute or append the file thomas page rfc comments on file access protocol july size information byte size used in last write access open w of the file file size in bytes of that size file access dates date of create last read last write on tenex a user can specify different access control for different pages within the same file a remote user should be able to acquire such access control information about files and be able to specify such access control when he creates them there are many applications in which a remote user would like to access several files simultaneously in much the same way as a local user can fap as proposed can not support such multiple file access of course the user always has the option of going through an icp to establish another connection with the server fap can be extended in a simple way to support multiple file access by including the notion of a file handle which is used to specify which file a given fap command refers to when the user does open r foo the server s response would include a handle for foo which the user would use in subsequent references to foo the handle returned would be a string of the server s choice it might be the file s name foo a small integer etc use of a server chosen file handle rather than the complete file name enables the server to respond to fap commands without incurring the overhead of re parsing the file name for each command to illustrate consider the following sequence which opens a file for reading and one for writing reads bytes from the first file as data computes using the data and writes a byte result to the second file open r foo server returns fh as handle open w moo server returns mh as handle read fh user reads data user does some computation on the bytes writ mh user writes the result clos mh clos fh reasonable defaults could be provided with handles e g a fap command without a handle refers to the same file as the previous command etc the association of a handle with a file is probably better achieved via a separate fap command rather than as a side effect of the open command e g thomas page rfc comments on file access protocol july hndl foo it is important to take local transformations into account page of rfc however it is equally important to allow a remote user to suppress local transformations if he wishes so that he can access the file as it is stored this would enable a program that manipulates a file to work equally well whether the file is local and accessed directly via system calls or remote and accessed indirectly via system calls that are trapped and transformed into fap commands which are sent to the remote site this rfc was put into machine readable form for entry into the online rfc archives by alex mckenzie with support from gte formerly bbn corp thomas page 