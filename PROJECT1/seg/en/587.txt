 network working group a bhushan request for comments mit nic b braden ucla w crowther bbn e harslem j heafner rand a mckenzie bbn j melvin sri b sundberg harvard d watson sri j white ucsb november the data transfer protocol this paper is a revision of rfc nic the changes to rfc are given below the protocol is then restated for your convenience changes to rfc the sequence number field is changed to bits in the error type b transactions thus resolving the ambiguity in the previous specification in addition the information separators type b transactions shall also contain a bit sequence number field the modes available type b transactions shall define only the modes available for receive instead of both receive and send in simplex connections modes available transactions should not be sent as they are meaningless in full duplex connections the modes available transactions are still required the code assignments for end code in information separators and for function in abort transactions have been changed to reflect a numerical order rather than bit coding minor editorial changes bhushan et al page rfc the data transfer protocol november i introduction a common protocol is desirable for data transfer in such diverse applications as remote job entry file transfer network mail system graphics remote program execution and communication with block data terminals such as printers card paper tape and magnetic tape equipment especially in context of terminal imps although it would be possible to include some or even all of the above applications in an all inclusive file transfer protocol a separation between data transfer and application functions may provide flexibility in implementation and reduce complexity separating the data transfer function from the specific applications functions may also reduce proliferation of programs and protocols we have therefore defined a data transfer protocol dtp which should be used for transfer of data in file transfer remote job entry and other applications protocols this paper concerns itself only with the data transfer protocol a companion paper rfc describes the file transfer protocol ii discussion the data transfer protocol dtp serves three basic functions it provides for convenient separation of ncp messages into logical blocks transactions units records groups and files it allows for the separation of data and control information and it includes some error control mechanisms transfer modes three modes of separating messages into transactions are allowed by dtp the first is an indefinite bit stream which terminates only when the connection is closed i e the bit stream represents a single transaction for duration of connection this mode would be useful in data transfer between hosts and terminal imps tips the second mode utilizes a transparent block convention similar to the ascii dle data link escape convention in transparent mode transactions which may be arbitrarily long end whenever the character sequence dle etx is encountered dle and etx are bit character codes to prevent the possibility of a dle etx sequence occurring within data stream any occurrence of dle is replaced by dle dle on transmission the extra dle is stripped on reception a departure from the ascii convention is that bhushan et al page rfc the data transfer protocol november transparent block does not begin with dle stx but with a transaction type byte this mode would be useful in data transfer between terminal imps the third mode utilizes a count mechanism each transaction begins with a fixed length descriptor field containing separate binary counts of information bits and filler i e not information bits if a transaction has no filler bits its filler count is zero this mode would be useful in most host to host data transfer applications dtp allows for transfer modes to be intermixed over the same connection i e the transfer mode is not associated with connection but only with transaction the transfer modes can represent transfer of either data or control information the protocol allows for separating data and control information at a lower level by providing different type codes see specifications for data and control transactions this provision may simplify some implementations the implementation of a subset of transfer modes is specifically permitted by dtp to provide compatibility between hosts using different subsets of transfer modes an initial handshake procedure may be used the handshake involves exchanging information on modes available for receive this will enable host programs to agree on transfer modes acceptable for a connection using dtp the manner in which dtp is used would depend largely on the applications protocol it is the applications protocol which defines the use of transfer modes and the use of information separator and abort functions provided in dtp see specifications for example in a remote job entry protocol aborts may be used to stop the execution of a job while they may not cause any action in another applications protocol it should also be noted that dtp does not define a data transfer service there is no standard server socket or initial connection protocol defined for dtp what dtp defines is a mechanism for data transfer which can be used to provide services for block data transfers file transfers remote job entry network mail and other applications there are to be no restrictions on the manner in which dtp is implemented at various sites for example dtp may be imbedded in an applications program such as for file transfer or it may be a separate service program or subroutine used by several bhushan et al page rfc the data transfer protocol november applications programs another implementation may employ macros or uuo s unimplemented user operations on pdp s to achieve the functions specified in dtp it is also possible that in implementation the separation between the dtp and applications protocols be only at a conceptual level iii specifications byte size for network connection the standard byte size for network connections using dtp is bits however other byte sizes specified by applications protocols are also allowed by dtp for the purpose of this document bytes are assumed to be bits unless otherwise stated transactions at dtp level all information transmitted over a connection is a sequence of transactions dtp defines the rules for delimiting transactions a types the first bit byte of each transaction shall define a transaction type as shown below note that code assignments do not conflict with assignments in telnet protocol the transaction types will be referred to by the hexadecimal code assigned to them the transaction types are discussed in more detail in section b code transaction type hex octal b indefinite bit stream data b transparent dle block data b descriptor and counts data b modes available handshake b information separators b error codes b abort b no operation noop b indefinite bit stream control b transparent dle block control ba descriptor and counts control bb through through unassigned but reserved for dtp bf bhushan et al page rfc the data transfer protocol november b syntax and semantics b type b and b indefinite bitstream modes transactions terminate only when the ncp connection is closed there is no other escape convention defined in dtp at this level it should be noted that the closing of a connection in bitstream mode is an implicit file separator see section b b type b and b transparent block modes transactions terminate when the byte sequence dle etx is encountered the sender shall replace any occurrence of dle in data stream by the sequence dle dle the receiver shall strip the extra dle the transaction is assumed to be byte oriented the code for dle is hex or octal this is different from the ascii dle which is hex or octal etx is hex or octal the same as ascii etx b type b and ba descriptor and counts modes transactions have three fields a byte bit descriptor field as shown below and variable length including zero info and filler fields the total length of a transaction is info filler bits bit bit bit bit bit bit bit descriptor field info count is a binary count of the number of bits in the info field not including descriptor or filler bits the number of info bits is limited to as there are bits in info count field sequence is a sequential count in round robin manner of b ba and b type transactions the inclusion of sequence numbers will help in debugging and error control as sequence numbers may be used to check for missing transactions and aid in locating errors hosts not wishing to implement this mechanism should have all s in the field the count shall start from zero and continue sequentially to all s after which it is reset to all zeros the permitted sequence numbers are one greater than the previous all s and zero for the first transaction only filler count is a binary count of bits used as fillers i e not information after the end of meaningful data number of filler bits is limited to as there are bits in filler count field bhushan et al page rfc the data transfer protocol november the nul bytes must contain all s b type b modes available transactions have a fixed length of two bytes as shown below first byte defines the transaction type b and second byte defines the transfer modes available for receive type i receive b ba b b b b b the modes are indicated by bit coding as shown above the particular bits if set to logical indicate that the corresponding modes are handled by the sender s receive side the two most significant bits should be set to logical mode available transactions have no significance in a simplex connection the use of type b transactions is discussed in section b b type b information separator transactions have a fixed length of four bytes as shown below first byte defines the transaction type b second byte defines the separator and third and fourth bytes contain a bit sequence number type end code sequence number b the following separator codes are assigned code meaning hex octal unit separator record separator group separator file separator files groups records and units may be data blocks that a user defines to be so the only restriction is that of the hierarchical relationship file groups records units where means contains thus a file separator marks not only the end of file but also the end of group record and unit bhushan et al page rfc the data transfer protocol november these separators may provide a convenient logical separation of data at the data transfer level their use is governed by the applications protocol b type b error codes transactions have a fixed length of four bytes as shown below first byte defines the transaction type b second byte indicates an error code and third and fourth bytes may indicate the sequence number of a transaction in which an error occurred type end code sequence number b the following error codes are assigned error code meaning hex octal undefined error out of sync type code other than b through bf broken sequence the sequence field contains the first expected but not received sequence number illegal dlf sequence other than dle dle or dle ftx b through through the transaction type indicated by bf by error code is not implemented the error code transaction is defined only for the purpose of error control dtp does not require the receiver of an error code to take any recovery action the receiver may discard the error code transaction in addition dtp does not require that sequence numbers be remembered or transmitted b type b abort transactions have a fixed length of two bytes as shown below first byte defines the transaction type b and second byte defines the abort function type function b bhushan et al page rfc the data transfer protocol november the following abort codes are assigned abort code meaning hex octal abort preceding transaction abort preceding unit abort preceding record abort preceding group abort preceding file dtp does not require the receiver of an abort to take specific action therefore a sender should not make any assumptions thereof the manner in which abort is handled is to be specified by higher level applications protocols b type b noop transactions are one byte bit long and indicate no operation these may be useful as fillers when the byte size used for network connections is other than bits initial connection handshake and error recovery a dtp does not specify the mechanism used in establishing connections it is up to the applications protocol e g file transfer protocol to choose the mechanism which suits its requirements b the first transaction after a full duplex connection is made will be type b modes available indicating the transfer modes available for receive the modes available type b transaction is not applicable in simplex connections it is the sender s responsibility to choose a mode acceptable to the receiver if an acceptable mode is not available or if mode chosen is not acceptable the connection may be closed c no error recovery mechanisms are specified by dtp the applications protocol may implement error recovery and further error control mechanisms bhushan et al page rfc the data transfer protocol november endnotes the term transaction is used here to mean a block of data defined by the transfer mode this assignment was made to be consistent with the telnet philosophy of maintaining the integrity of the network ascii characters it is however recommended that the standard initial connection protocol as specified in rfc or any subsequent standard document be adopted where feasible it is suggested that when available the sender should choose descriptor and count mode type b or ba the indefinite bitstream mode type b or b should be chosen only when the other two modes are not available this rfc was put into machine readable form for entry into the online rfc archives by ryan kato bhushan et al page 