 network working group abhay k bushan request for comments mit project mac nic august comments on the new telnet protocol and its implementation we at mit dn have implemented the new telnet protocol both server and user this rfc describes our experience with the implementation particularly the use of go ahead and in bringing the new user and server telnet s in operation the new telnet is not compatible with the old we have a few suggestions here which should help other implementors and lead to a smoother transition to the new protocol i our telnet server implementation our new server telnet accepts both the old and the new telnet control sequences currently we have the echo and the suppress go ahead options implemented and do the right thing to varying degrees with the interrupt process ip erase character ec abort output ao are you there ayt break and synch character sequences a the echo option the telnet server comes up in the default local echo mode and accepts both the old and the new telnet control sequences the server starts the negotiation for remote echo server echoing by sending the sequence iac will echo but changes the echo mode only when an affirmative iac do echo is received after the cutoff date for old protocol we will stop honoring the old telnet control sequences b the go ahead and suppress ga option the server comes up in the send ga mode and transmits the required iac ga sequence whenever the server detects that it needs to send a ga it should be noted that our scheme for sending ga s works most but not all of the time there is really no reliable way for our server telnet to find out when a process is actually waiting for network input on our system the server telnet does not control user s process it only acts as a terminal handler at the tty level bushan page rfc comments on telnet august a quick investigation revealed that the above problem of sending ga s reliably is not confined to the its operating system alone in fact tenex ref conversation with ray tomlinson and dec ref conversation with ed taft at harvard systems will encounter similar problems our solution to the ga sending problem was to have the server wait seconds after sending output to see if there is more output to be sent if the server has been idle for more than seconds in the output sent state it sends a ga and goes in an i o wait state looking for input or output this scheme works most but not guaranteed all of the time and doesn t cause any noticeable delay it is possible for the server to send an extra ga our experimentation revealed that seconds was a good range for this idling time constant we do implement the suppress ga option and will not send ga to hosts who agree to negotiate out of it our server tries to negotiate these suppress ga option c other options and telnet control sequences our server will refuse all other options by sending the appropriate donts and wonts in addition to the echo and suppress ga options we recognize the following telnet control sequences interrupt process ip the server substitutes the system wide interrupt character acii sub which immediately interrupts the process moving control to the immediately superior process if the user is several levels down his process tree he may have to send several ip s to reach top level it should be noted that the ip does not interrupt the running process in the sense a interrupts muddle but only passes control to the superior erase character ec the server substitutes the system wide standard erase character acii del the deletion however is done not by the server but by the receiving process it is conceivable that some process such as a user telnet take no action on receiving ec most processes will echo the deleted character s several ec s will delete the several previous characters if the console is declared to be an imlac the deleted character is removed from the screen abort output ao the server substitutes the character acii dc the control s convention is followed by many but not all of our programs the action taken on receiving ao varies with the program bushan page rfc comments on telnet august a normal occurrence is that output and the current command are aborted without necessarily going to completion in many programs there is no way to stop output except by sending an ip and killing the inferior process are you there ayt the server will print the message connections still open preceded and followed by crlf s upon receiving an ayt at some later time we may report on the state of the user s job as well erase line el since we are a character at a time system the el has little meaning on our system and we throw it and the preceding iac away break brk we substitute three nul s upon receiving brk this convention is consistent with what happens when the break key is hit on local teletypes the programs generally do nothing useful when break is received except echo but sending brk may cause strange program reactions so beware synch whenever the server receives the synch ins it flushes all except the interesting control sequences characters till the receipt of a dm we also cause an implicit ip on receipt of synch we follow the crlf and crnul convention for transmitting eol and cr respectively ii our user telnet implementation the new user telnet implemented in calico network by using a new telcom subroutine accepts negotiation for the echo and suppress ga options the program tries to negotiate out of receiving ga s and tries the echo negotiation if the settings file for the host indicate remote echo special characters and symbols are defined for ec el ao ayt brk synch ip and the escape character to command level these symbols have a default character value which the user can change by typing the symbol followed by the new character value at netwrk command level to send ec el etc the user only has to type the special character for the function in addition the user can send these characters by using the send special command at netwrk command level in line mode ec and el do a local character and line erase rather than send the ec and el to the remote host the following are the default values for the special characters in telnet escape backslash ec el or x ao s bushan page rfc comments on telnet august ip r ayt t synch y break no preassigned value the user can change his echo mode by escaping to netwrk command level and using the commands echo local or echo remote note that the modes are changed only when the negotiation for mode change is successful in either event the user is notified of the results of the negotiation iii installing the new telnets on monday july we brought up the user and server telnets briefly to find that most of the hosts did not recognize iac s and did not honor the new protocol much to our dismay usage of both our server and user telnet s was chaotic consequently we did not install the new user and server telnets and the old telnets remain operational the new and the old telnets are definitely not compatible the server tries to and should try to negotiate out of sending ga s and also to send echo this negotiation causes problems with the old style user telnets also if the negotiation for suppress ga is unsuccessfully which is the case with old user telnets the server will keep sending iac ga s when appropriate one solution we found to making our new server compatible with old user telnets was to come up in a mode that does not start any option negotiation and does not send ga s unless requested to do so ie default is to suppress ga s as mentioned earlier the server also accepts the old telnet control sequences this solution makes the server compatible with both the old and the new user telnets except it violates protocol by not sending ga s we propose to install this server on our socket to promote experimentation with the new telnet protocol we have installed the new server telnet on socket octal this new server follows the new protocol ie it sends ga s and starts spontaneous negotiation for remote echo and suppress ga the implementors on other hosts are encouraged to use this service to debug their user telnets and our server we feel that transition to the new protocol will be smoother if new telnet servers are brought up on experimental sockets we are also willing to help debug other servers from our user telnet finally we would like to lobby for making suppress ga the default as our present server on socket it appears that only a few hosts require the ga s ames and ucla con it seems to me that the reason why sending ga is default in the current specification of protocol is that representatives from the concerned hosts wanted the ga to be bushan page rfc comments on telnet august implemented it doesn t matter to them if sending ga or suppress ga is default as long as they can get a remote server to send a ga the protocol can be so specified as to require every one to implement a send ga option making suppress ga the default will have the advantage that it will obviate unnecessary negotiation in a great majority of cases another advantage is that not sending ga s makes the new server compatible with both old and new user telnets this rfc was put into machine readable form for entry into the online rfc archives by serge hallyn bushan page 