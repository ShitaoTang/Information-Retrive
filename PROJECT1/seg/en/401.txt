 network working group nic request for comments john t melvin richard w watson sri arc february a first cut at a proposed telnet protocol introduction this paper describes a first cut at a proposed telnet protocol telnet is a process which runs at a user s site and allows him to utilize a typewriter like terminal to gain interactive service from a remote server site over the arpa network this paper was motivated by our need to set specifications for a protocol which would allow online access to the network information center nic the online system running at the network information center we will refer to as nls nic on thinking about the problem of setting specifications for access to the nic we have tried to generalize our ideas so that they would apply to other systems with characteristics similar to ours we realize that there are other terminal hardware software disciplines which might find it difficult to conform to all the requirements stated here and therefore the final telnet protocol will differ from the one stated in this nwg rfc one conclusion that we may all have to come to is that connection with the network may force us toward a more standard way of handling terminals and their character streams in our monitors and terminal control hardware in the meantime we hope that this paper and others on the same subject that may be in process coupled with a survey of hardware software requirements at each site by a nwg subgroup can result in an initial standard network telnet protocol being agreed upon quickly as it is important to get users onto the network as soon as possible so that interactive network usage can indicate further directions for network protocol evolution next we outline some design problems then propose some conventions to solve these problems for access to systems such as the nls nic and indicate some problems needing further study the proposed conventions for access to the nls nic are summarized in appendix a some design problems a basic assumption the function of the telnet process is to make a terminal at a user site appear over the network as logically equivalent to a terminal directly connected to the server site there are a number of implications of this basic function melvin watson page rfc proposed telnet protocol february i the user should be able to cause generation of all codes which a server system terminal can generate with respect to the network information center and some other sites it would seem a reasonable requirement to have keying conventions so that the user can generate all ascii character codes as input to the network other sites with different character codes may require a telnet process to provide those codes to the network ii the user should be able to escape back to his local system or escape from the server process to the server system iii the telnets of line at a time systems should be able to work with character at a time systems and line at a time systems and telnets of character at a time systems should be able to work with line at a time and character at a time systems b echo control we use the term echo control rather than the terms half duplex or full duplex because the telnet connection is in reality full duplex with respect to network transmissions three terminal cases need to be considered case character at a time serving site echoed case character at a time user site echoed case line at a time user site echoed some serving sites may be able to operate with all three cases and some convention is required to set the mode strictly speaking what characters are echoed for what keys struck is of no concern to the serving site although one would like to try to minimize differences in typescript as it appears to the user c format control characters the format control characters of horizontal tab ht vertical tab vt form feed ff line feed lf and carriage return cr need to be handled in a consistent way for cases and above with case above the situation is simplified d network message boundaries the ncp to ncp protocol was specified with the goal of having the network message boundaries being invisible to the user processes it would be good if this goal could be maintained but it may be difficult with some line at a time systems melvin watson page rfc proposed telnet protocol february e an implementation convention conventions to solve the above problems are most simply established if we assume that the character stream received from a telnet process by the server site is entered into that point in the server monitor where character input from direct y connected terminals is entered and output from the server process is entered into the monitor point where normal character output is entered the server ncp receives its input at the point where normal monitor character output is obtained in other words the server process would obtain its input from the server monitor character buffers and send its output to these buffers rather than obtaining input directly from ncp buffers or outputting to ncp buffers the telnet process on the other hand would obtain and send character streams directly from or to its local ncp other situations exist where the user processes at both ends communicate directly with the ncp therefore we would recommend that both modes of connection user process monitor ncp or user process ncp be available for communication between the ncp and a user process these modes would be set under program control by the user process the initial network convention during the login procedure and until changed by the server process would be to obtain characters from and send characters to the monitor the server ncp communicates with the monitor also the scheme is illustrated in figure the motivation for such flexibility may be clearer from the discussion below proposed telnet conventions a the server site is to assume initially that echoing is performed by a user site process until explict y commanded otherwise if the user site can send character at a time then after connection and login have been established tne user could switch lo server site echo by command to the server site and then command invisible to the server site his local telnet to change its echo mode also b the server process is to assume it will receive the same character set which terminals directly connected to it can generate we recommend at least character ascii the user s telnet may have to recognize two character sequences to enable generation of both upper and lower case codes and the control codes we recommend that the user be able to set either upper or lower case as the default case for single case terminals and be able to specify a case shift character the user should also be able to specify a melvin watson page rfc proposed telnet protocol february character to indicate that the next character struck is to be converted to the appropriate control character code this latter convention enables control codes directly generated at the terminal to be recognized by the user s system thus enabling escape to the user system creating a convention allowing all control codes to enter the network and allowing output of the network to feed into the server monitor before entering the server process gives a simple mechanism for generating an escape to many existing systems the problem is more complicated than this for some systems and we discuss it further below c we recommend that network standards be established for the meaning of local echoes of ht vt and ff or a convention to be established for sending the meaning of these characters to the server process the nls nic for example needs to keep track of the position of the print head and in the absence of such conventions will convert these character codes to spaces and line feeds this means that the appearance of the page on output may differ from the appearance on input it would be helpful to the user if his page on output could be formatted as it appeared on input d lf characters would be handled as if they were generated by hitting the line feed key on a terminal directly connected to the server system e the carriage return cr character can be the source of considerable difficulty for example on input different systems and the same system at different times can echo and transmit different codes to the terminal and the user process some monitor systems echo nothing just a cr or a crlf some systems transmit a cr crlf or end of line code eol to the user process the user process may control the echo or add to it given the combinations which can exist at each end of the network connection and with respect to each other confusion can exist unless we assume the definition of a and the implementation convention of e these assumptions imply that when a cr is struck a cr gets sent over the network if the user monitor system or terminal control hardware converts a cr to a crlf or eol then the telnet program must convert it back to a cr when the cr reaches the server monitor it will handle it properly for the server process when echoing is handled by the server system the proper code or codes will be echoed the user telnet on receiving a crlf can pad it with the proper nulls to handle carriage movement timing for a particular terminal when echoing is handled by the user system it would be ideal if the user s telnet or system used the same echo convention as the melvin watson page rfc proposed telnet protocol february server system would this means that either the telnet must have a table of echo conventions for the various systems to which it can connect or that it can obtain this information from the server system or process or vice versa for an initial telnet protocol this is probably not necessary the user system can default and echo a crlf on each cr received this default should be satisfactory for all the situations we are familiar with and for the nic f for communication from character and line at a time systems the telnet process may need to recognize a character user assignable which we call end of stream eos this character is to have the function defined in the following discussion the important point is to distinguish end of stream as a network function and end of line as a user or server system function consider line at a time systems first we have not had much experience with line at a time systems so what follows will need further study and clarification as we understand it line at a time systems recognize a character such as cr or a break signal as the code to wake up the user process and cause transmission to it of the line of text from the point of view of nls nic it is important that the user be able to enter lines of text each terminated by a cr where appropriate and at other times to be able to enter text not terminated with a cr a statement for nls nic is a string of text of arbitrary length and need not have crs in it on output the line is folded for the user at his user definable page boundary as an example of what is required consider the case where the user s system recognizes cr as end of line in this case the telnet would be awakened when a cr is received we would recommend that in this case the cr code be literally entered into the telnet output buffer if a cr is preceded by an eos character then the cr should not be placed in the telnet output buffer transmission through the network can take place either when an eos is received or automatically when the telnet output buffer fills transmission to character at a time systems from line at a time systems could require the awkward striking of three keys to get one character through the network now consider transmission for a character at a time system to a server line at a time system a similar problem to the one to be described also exists between line at a time systems given the definition of an eos character different from cr a line can be buffered up until the eos is received and then sent without the eos how is the serving system to know that a line has been sent one way would be for the serving ncp to recognize message boundaries this convention would violate a design goal another way would be for the melvin watson page rfc proposed telnet protocol february user telnet to request its nci to send an ins command the sending of ins type of control commands might introduce race conditions in the network and should be investigated before their use with a telnet process is established since some of the line at a time systems we know have special hardware that recognizes the end of line signal we need some way to be compatible with this hardware using software control signals we leave this problem for further nwg subgroup study g we now come back to the problem of interrupting or escaping in the remote server system in systems which do not lock out the input keyboard when output is going on the mechanisms and conventions outlined above would seem adequate unless a special break signal is the escape signal this latter case requires more study in systems which allow no input while output is occurring one may have to live with the consequences of such a terminal discipline and be prepared to wait until output stops before an escape code can be sent if the keyboard is locked and an escape break signal can be sent to the user s system it can prevent output from going to the terminal but must be prepared to continue receiving it from the server site until the user can inform his telnet process to send an interrupt or escape signal to the server site again this is a problem for further study the online system of the network information center operates on a character at a time monitor system and the conventions established in this paper are adequate for access to it these conventions are summarized in appendix a melvin watson page rfc proposed telnet protocol february appendix a network connection protocol to sri network information center initial connection protocol connection establishment to nic is identical to that presented in section ii of nwg rfc nic it is reproduced here telnet contacts nic nic user site rts nic logger is socket user site nic str cls if accepted cls if rejected assuming nic accepts user site nic str rts nic receives text thru local socket ss from remote socket us l via link q assuming user site accepts nic user site str rts nic sends text to remote socket us thru local socket ss l via link r melvin watson page rfc proposed telnet protocol february user site nic all nic user site all connection breaking protocol a cls trade is made between the ncps for each of the two connections as per document nic we may decide to put a time out into the nic connections such that no interaction for some as yet unspecified reasonable length of time will result in a cls out of the connections being initiated by nic third level protocol the first bits received by nic thru socket ss should be the message data type designating that an bit ascii stream follows as per nwg rfc nic i e the first bits are the first bits received by telnet thru socket us will also indicate a message data type of l each network message should have an integral multiple of bits if a network standard is established different from the suggestion of nwg rfc nic then we would change this protocol to conform nic will have ncp generated interrupts disabled i e inr will be ignored ins will not be sent to the remote host melvin watson page rfc proposed telnet protocol february nls nic character conventions of interest to telnet echoing can either be under control of nis nic or under control of the user site when we refer to echoing below we mean under control of nls nic when echoing is handled by the user site we would expect the user to set the nls nic output conventions to conform to the echoing conventions at his site nls nic assumes echoing is handled by the user site unless explicitly commanded otherwise format affecting control characters horizontal tab spaces to next user definable stop on both echoing and output if during literal input enters file as ascii form feed carriage return and user definable appropriate number of line feeds on echo and output if during literal input enters file as ascii vertical tab carriage return and user definable appropriate number of line feeds on echo and output if during literal input enters file as ascii carriage return carriage return followed by line feed on echo and output if during literal input enters file as eol see below line feed line feed on echo and output enters file as ascii on literal input eol end of line melvin watson page rfc proposed telnet protocol february presently ascii code carriage return followed by line feed on echo and output if during literal input enters file as ascii if the user s system automatically appends a lf to a cr before sending it to telnet or converts cr to some eol code not ascii we would expect telnet to send nls nic just a cr or ascii if we receive crlf then on output we will send crlflf nls nic interrupt attention convention a user definable ascii code in the text input stream is used to abort the executing process and return control to the main nls nic command processor this code is presently del ascii escape to the nic monitor no escape is required as all operations needed for use of the nic can be performed within nls nic character set we strongly recommend that the telnet process be able to generate by some set of keying conventions all ascii codes use of nls nic will probably feel most comfortable from a device with upper and lower case graphics although we can provide service to single case devices we can provide a useful service if the full ascii set cannot be sent but would like to minimize the special cases we have to handle sites which cannot provide the full ascii set should contact us server program v terminal control software server and site possibly hardware v melvin watson page rfc proposed telnet protocol february ncp v figure telnet connection v ncp v telnet user v site terminal control hardware software v user terminal this rfc was put into machine readable form for entry into the online rfc archives by tony hansen melvin watson page 