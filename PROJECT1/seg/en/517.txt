 network working group s crocker request for comments ucla s carr university of utah v cerf ucla february new host host protocol attached is a copy of the paper to be presented at the sjcc on the host host protocol it indicates many changes from the old protocol in nwg rfc these changes resulted from the network meeting on december the attached document does not contain enough information to write a ncp and i will send out another memo or so shortly responses to this memo are solicited either as nwg rfc s or personal notes to me host host communication protocol in the arpa network by c stephen carr university of utah salt lake city utah and by stephen d crocker university of california los angeles california and by vinton g cerf university of california los angeles california this research was sponsored by the advanced research projects agency department of defense under contracts af and dahc c introduction the advanced research projects agency arpa computer network hereafter referred to as the arpa network is one of the most ambitious computer networks attempted to date the types of crocker et al page rfc new host host protocol february machines and operating systems involved in the network vary widely for example the computers at the first four sites are an xds stanford research institute an ibm university of california santa barbara an xds sigma university of california los angeles and a dec pdp university of utah the only commonality among the network membership is the use of highly interactive time sharing systems but of course these are all different in external appearance and implementation furthermore no one node is in control of the network this has insured reliability but complicates the software of the networks which have reached the operational phase and been reported in the literature none have involved the variety of computers and operating systems found in the arpa network for example the carnegie mellon princeton ibm network consists of s with identical software load sharing among identical batch machines was commonplace at north american rockwell corporation in the early s therefore the implementers of the present network have been only slightly influenced by earlier network attempts however early time sharing studies at the university of california at berkeley mit lincoln laboratory and system development corporation all arpaa sponsored have had considerable influence on the design of the network in some sense the arpa network of time shared computers is a natural extension of earlier time sharing concepts the network is seen as a set of data entry and exit points into which individual computers insert messages destined for another or the same computer and from which such messages emerge the format of such messages and the operation of the network was specified by the network contractor bb n and it became the responsibility of representatives of the various computer sites to impose such additional constraints and provide such protocol as necessary for users at one site to use resources at foreign sites this paper details the decisions that have been made and the considerations behind these decisions several people deserve acknowledgement in this effort j rulifson and w duvall of sri participated in the early design effort of the protocol and in the discussions of nil g deloche of thompson csf participated in the design effort while he was at ucla and provided considerable documentation j curry of utah and p rovner of lincoln laboratory reviewed the early design and nil w crowther of bolt beranek and newman contributed the idea of a virtual net the bb n staff provided substantial assistance and guidance while delivering the network crocker et al page rfc new host host protocol february we have found that in the process of connecting machines and operating systems together a great deal of rapport has been established between personnel at the various network node sites the resulting mixture of ideas discussions disagreements and resolutions has been highly refreshing and beneficial to all involved and we regard the human interaction as a valuable by product of the main effect the network as seen by the hosts before going on to discuss operating system communication protocol some definitions are needed a host is a computer system which is a part of the network an imp interface message processor is a honeywell ddp computer which interfaces with up to four hosts at a particular site and allows hosts access into the network the configuration of the initial four host network is given in figure the imps from a store and forward communications network a companion paper in these proceedings covers the imps in some detail a message is a bit stream less than bits long which is given to an imp by a host for transmission to another host the first bits of the message are the leader the leader contains the following information a host b message type c flags d link number when a message is transmitted from a host to its imp the host field of the leader names the receiving host when the message arrives at the receiving host the host field names the sending host only two message types are of concern in this paper regular messages are generated by a host and sent to its imp for transmission to a foreign host the other message type of interest is a rfnm request for next message rfnm s are explained in conjunction with links the flag field of the leader controls special cases not of concern here crocker et al page rfc new host host protocol february the link number identifies over which of logical paths links between the sending host and the receiving host the message will be sent each link is unidirectional and is controlled by the network so that no more than one message at a time may be sent over it this control is implemented using rfnm messages after a sending host has sent a message to a receiving host over a particular link the sending host is prohibited from sending another message over that same link until the sending host receives a rfmn the rfnm is generated by the imp connected to the receiving host and the rfnm is sent back to the sending host after the message has entered the receiving host it is important to remember that there are links in each direction and that no relationship among these is imposed by the network the purpose of the link and rfmn mechanism is to prohibit individual users from overloading an imp or a host implicit in this purpose is the assumption that a user does not use multiple links to achieve a wide band and to a large extent the host host protocol cooperates with this assumption an even more basic assumption of course is that the network s load comes from some users transmitting sequences of messages rather than many users transmitting single messages coincidently in order to delimit the length of the message and to make it easier for hosts of differing word lengths to communicate the following formatting procedure is used when a host prepares a message for output it creates a bit leader following the leader is a binary string called marking consisting of an arbitrary number of zeros followed by one marking makes is possible for the sending host to synchronize the beginning of the text message with its word boundaries when the last bit of a message has entered an imp the hardware interface between the imp and host appends a one followed by enough zeros to make the message length a multiple of bits these appended bits are called padding except for the marking and padding no limitations are placed on the text of a message figure shows a typical message sent by a bit machine design concepts the computers participating in the network are alike in two important respects each supports research independent of the network and each is under the discipline of a time sharing system these facts contributed to the following design philosophy first because the computers in the network have independent purposes it is necessary to preserve decentralized administrative control of the various computers since all of the time sharing supervisors possess elaborate and definite accounting and resource allocation crocker et al page rfc new host host protocol february mechanisms we arranged matters so that these mechanisms would control the load due to the network in the same way that they control locally generated load second because the computers are all operated under time sharing disciplines it seemed desirable to facilitate basic interactive mechanisms third because this network is used by experienced programmers it was imperative to provide the widest latitude in using the network restrictions concerning character sets programming languages etc would not be tolerated and we avoided such restrictions fourth again because the network is used by experienced programmers it was felt necessary to leave the design open ended we expect that conventions will arise from time to time as experience is gained but we felt constrained not to impose them arbitrarily fifth in order to make network participation comfortable or in some cases feasible the software interface to the network should require minimal surgery on the host operating system finally we except the assumption stated above that network use consists of prolonged conversations instead of one shot requests these considerations led to the notions of connections a network control program a control link control commands sockets and virtual nets a connection is an extension of a link a connection connects two processes so that output from one process is input to the other connections are simplex so two connections are needed if two processes are to converse in both directions processes within a host communicate with the network through a network control program ncp in most hosts the ncp will be a part of the executive so that processes will use system calls to communicate with it the primary function of the ncp is to establish connections break connections switch connections and control flow in order to accomplish its tasks a ncp in one host must communicate with a ncp in another host to this end a particular link between each pair of hosts has been designated as the control link messages received over the control link are always interpreted by the ncp as a sequence of one or more control commands as an example one of the kinds of control commands is used to assign a link and initiate a crocker et al page rfc new host host protocol february connection while another kind carries notification that a connection has been terminated a partial sketch of the syntax and semantics of control commands is given in the next section a major issue is how to refer to processes in a foreign host each host has some internal naming scheme but these various schemes often are incompatible since it is not practical to impose a common internal process naming scheme an intermediate name space was created with a separate portion of the name space given to each host it is left to each host to map internal process identifiers into its name space the elements of the name space are called sockets a socket forms one end of a connection and a connection is fully specified by a pair of sockets a socket is specified by the concatenation of three numbers a a user number bits b a host number bits c aen bits a typical socket is illustrated in figure each host is assigned all sockets in the name space which have field b equal to the host s own identification a socket is either a receive socket or a send socket and is so marked by the lower order bit of the aen receive send the other seven bits of the aen simply provide a sizable population of sockets for each used number at each host aen stands for another eight bit number each user is assigned a bit user number which uniquely identifies him throughout the network generally this will be the bit host number of his home host followed by bits which uniquely identify him at that host provision can also be made for a user to have a user number not keyed to a particular host an arrangement desirable for mobile users who might have no home host or more than one home host this bit user number is then used in the following manner when a user signs onto a host his user number is looked up thereafter each process the user creates is tagged with his user number when the user signs onto a foreign host via the network his same user number is used to tag processes he creates in that host the foreign host obtains the user number either by consulting a table at login time as the home host does or by noticing the identification of the caller the effect of propagating the user s number is that each user creates his own virtual net consisting of processes he has created this virtual net may span an arbitrary crocker et al page rfc new host host protocol february number of hosts it will thus be easy for a user to connect his processes in arbitrary ways while still permitting him to connect his processes with those in other virtual nets the relationship between sockets and processes is now describable see figure for each user number at each host there are send sockets and receive sockets a process may request from the local ncp the use of any one of the sockets with the same user number the request is granted if the socket is not otherwise in use the key observation here is that a socket requested by a process cannot already be in use unless it is by some other process within the same virtual net and such a process is controlled by the same user an unusual aspect of the host host protocol is that a process may switch its end of a connection from one socket to another the new socket may be in any virtual net and at any host and the process may initiate a switch either at the time the connection is being established or later the most general forms of switching entail quite complex implementation and are not germane to the rest of this paper so only a limited form will be explained this limited form of switching provides only that a process may substitute one socket for another while establishing a connection the new socket must have the same user number and host number and the connection is still established to the same process this form of switching is thus only a way of relabelling a socket for no charge in the routing of messages takes place in the next section we document the system calls and control commands in the section after next we consider how login might be implemented system calls and control commands here we sketch the mechanisms of establishing switching and breaking a connection as noted above the ncp interacts with user processes via system calls and with other ncps via control commands we therefore begin with a partial description of system calls and control commands system calls will vary from one operating system to another so the following description is only suggestive we assume here that a process has several input output paths which we will call ports each port may be connected to a sequential i o device and while connected transmits information in only one direction we further assume that the process is blocked dismissed slept while transmission proceeds the following is the list of system calls crocker et al page rfc new host host protocol february init where is part of the process issuing the init and are bit aen s see figure the first aen is used to initiate the connection the second is used while the connection exists is the bit socket name of the distant end of the connection the lower order bits of and must agree and these must be the complement of the lower order bit of the ncp concatenates and each with the user number of the process and the host number to form bit sockets it then sends a request for connection rfc control command to the distant ncp when the distant ncp responds positively the connection is established and the process is unblocked if the distant ncp responds negatively the local ncp unblocks the requesting process but informs it that the system call has failed listen where and are as above the ncp retains the ports and and blocks the process when an rfc control command arrives naming the local socket the process is unblocked and notified that a foreign process is calling accept after a listen has been satisfied the process may either refuse the call or accept it and switch it to another socket to accept the call the process issues the accept system call the ncp then sends back an rfc control command close after establishing a connection a process issues a close to break the connection the close is also issued after a listen to refuse a call crocker et al page rfc new host host protocol february transmit if is attached to a send socket points to a message to be sent this message is preceded by its length in bits if is attached to a receive socket a message is stored at the length of the message is stored first control commands a vocabulary of control commands has been defined for communication between network control programs each control command consists of an bit operation code to indicate its function followed by some parameters the number and format of parameters is fixed for each operation code a sequence of control commands destined for a particular host can be packed into a single control message rfc this command is sent because a process has executed either an init system call or an accept system call a link is assigned by the prospective receiver so it is omitted if is a send socket there is distinct advantage in using the same commands both to initiate a connection init and to accept a call accept if the responding command were different from the initiating command then two processes could call each other and become blocked waiting for each other to respond with this scheme no deadlock occurs and it provides a more compact way to connect a set of processes cls the specified connection is terminated cease when the receiving process does not consume its input as fast as it arrives the buffer space in the receiving host is used to queue the waiting messages since only limited space is generally available the receiving host may need to inhibit the sending host from sending any more messages over the offending connection when the sending host receives this command it may block the process generating the messages crocker et al page rfc new host host protocol february resume this command is also sent from the receiving host to the sending host and negates a previous cease logging in we assume that within each host there is always a process in execution which listens to login requests we call this process the logger and it is part of a special virtual net whose user number is zero the logger is programmed to listen to calls on socket number upon receiving a call the logger switches it to a higher even numbered sockets and returns a call to the socket numbered one less than the send socket originally calling in this fashion the logger can initiate conversations to illustrate assume a user whose identification is x user number at ucla signs into ucla starts up one of his programs and this program wants to start a process at sri no process except the logger is currently willing to listen to our user so he executes init his process is blocked and the ncp at ucla sends rfc x x x the logger at sri is notified when this message is received because it has previously executed listen the logger then executes accept crocker et al page rfc new host host protocol february in response to the accept the sri ncp sends rfc x x x where the link has been chosen from the set of available links the sri logger than executes init x which causes the ncp to send rfc x x x the process at ucla is unblocked and notified of the successful init because sri logger always initiates a connection to the aen one less than it has just been connected to the ucla process then executes listen and when unblocked accept when these transactions are complete the ucla process is doubly connected to the logger at sri the logger will then interrogate the ucla process and if satisfied create a new process at sri this new process will be tagged with user number x and both connections wil be switched to the new process in this case switching the connections to the new process corresponds to passing the console down in many time sharing systems crocker et al page rfc new host host protocol february user level software at the user level subroutines which manage data buffer and format input designed for other hosts are provided it is not mandatory that the user use such subroutines since the user has access to the network system calls in his monitor in addition to user programming access it is desirable to have a subsystem program at each host which makes the network immediately accessible from a teletype like device without special programming subsystems are commonly used system components such as text editors compilers and interpreters an example of a network related subsystem is telnet which will allow users at the university of utah to connect to stanford research institute and appear as regular terminal users it is expected that more sophisticated subsystems will be developed in time but this basic one will render the early network immediately useful a user at the university of utah utah is sitting at a teletype dialed into the university s pdp time sharing system he wishes to operate the conversational algebraic language cal subsystem on the xds at stanford research institute sri in menlo park california a typical telnet dialog is illustrated in figure the meaning of each line of dialogue is discussed here i the user signs in at utah ii the pdp run command starts up the telnet subsystem at the user s host the user identifies a break character which causes any message following the break to be interpreted locally rather than being sent on the foreign host iv the telnet subsystem will make the appropriate system calls to establish a pair of connections to the sri logger the connections will be established only if sri accepts another foreign user the utah user is now in the pre logged in state at sri this is analogous to the standard teletype user s state after dialing into a computer and making a connection but before typing anything v the user signs in to sri with a standard login command characters typed on the user s teletype are transmitted unaltered through the pdp user host and on to the serving host the pdp telnet will have automatically switched to full duplex character by crocker et al page rfc new host host protocol february character transmission since this is required by sri s full duplex operation is allowed for by the pdp though not used by most digital equipment corporations subsystems vi and vii the subsystem cal is started at this point the user wishes to load a local cal file into the cal subsystem from the file system on his local pdp viii cal is instructed to establish a connection to utah in order to receive this file netwrk is a predefined name similar in nature to paper type or teletype ix finally the user types the break character followed by a command to his pdp telnet program which sends the desired file to sri from utah on the connection just established for this purpose the user s next statement is in cal again the telnet subsystem coding should be minimal for it is essentially a shell program built over the network system calls it effectively established a shunt in the user host between the remote user and a distant serving host given the basic system primitives the telnet subsystem at the user host and a manual for the serving host the network can be profitably employed by remote users today higher level protocol the network poses special problems where a high degree of interaction is required between the user and a particular subsystem in a foreign host these problems arise due to heterogeneous consoles local operating systems overhead and network transmission delays unless we use special strategies it may be difficult or even impossible for a distant user to make use of the more sophisticated subsystems offered while these difficulties are especially severe in the area of graphics problems may arise even for teletype interaction for example suppose that a foreign subsystem is designed for teletype consoles connected by telephone and then this subsystem becomes available to network users this subsystem might have the following characteristics except for echoing and correction of mistyping no action is taken until a carriage return is typed crocker et al page rfc new host host protocol february all characters except and and carriage returns are echoed as the character is typed causes deletion of the immediately preceding character and is echoed as that character causes all previously typed characters to be ignored a carriage return and line feed are echoed a carriage return is echoed as a carriage return followed by a line feed if each character typed is sent in its own message then the characters h e l l o p c r cause nine messages in each direction furthermore each character is handled by a user level program in the local host before being sent to the foreign host now it is clear that if this particular example were important we would quickly implement rules to in a local host program and send only complete lines to the foreign host if the foreign host program could not be modified so as to not generate echoes then the local program could not only echo properly it could also throw away the later echoes from the foreign host however the problem is not any particular interaction scheme the problem is that we expect many of these kinds of schemes to occur we have not found any general solutions to these problems but some observations and conjectures may lead the way with respect to heterogeneous consoles we note that although consoles are rarely compatible many are equivalent it is probably reasonable to treat a model teletype as the equivalent of an ibm similarly most storage scopes will form an equivalence class and most refresh display scopes will form another furthermore a hierarchy might emerge with members of one class usable in place of those in another but not vice versa we can imagine that any scope might be an adequate substitute for a teletype but hardly the reverse this observation leads us to wonder if a network wide language for consoles might be possible such a language would provide for distinct treatment of different classes of consoles with semantics appropriate to each class each site could then write interface programs for its consoles to make them look like network standard devices crocker et al page rfc new host host protocol february another observation is that a user evaluates an interactive system by comparing the speed of the system s responses with his own expectations sometimes a user feels that he has made only a minor request so the response should be immediate at other times he feels he has made a substantial request and is therefore willing to wait for the response some interactive subsystems are especially pleasant to use because a great deal of work has gone into tailoring the responses to the user s expectations in the network however a local user level process intervenes between a local console and a foreign subsystem and we may expect the response time for minor requests to degrade now it may happen that all of this tailoring of the interaction is fairly independent of the portion of the subsystem which does the heavy computing or i o in such a case it may be possible to separate a subsystem into two sections one section would be a front end which formats output to the user accepts his input and controls computationally simple responses such as echoes in the example above the program to accumulate a line and generate echoes would be the front end of some subsystem we now take notice of the fact that the local hosts have substantial computational power but our current designs make use of the local host only as a data concentrator this is somewhat ironic for the local host is not only poorly utilized as a data concentrator it also degrades performance because of the delays it introduces these arguments have led us to consider the possibility of a network interface language nil which would be a network wide language for writing the front end of interactive subsystems this language would have the feature that subprograms communicate through network like connections the strategy is then to transport the source code for the front end of a subsystem to the local host where it would be compiled and executed during preliminary discussions we have agreed that nil should have at least the following semantic properties not generally found in other languages concurrency because messages arrive asynchronously on different connections and because user input is not synchronized with subsystem output nil must include semantics to accurately model the possible concurrencies program concatenation it is very useful to be able to insert a program in between two other programs to achieve this the interconnection of programs would be specified at run time and would not be implicit in the source code crocker et al page rfc new host host protocol february device substitutability it is usual to define languages so that one device may be substituted for another the requirement here is that any device can be modeled by a nil program for example if a network standard display controller manipulates tree structures according to messages sent to it then these structures must be easily implementable in nil nil has not been fully specified and reservations have been expressed about its usefulness these reservations hinge upon our conjecture that it is possible to divide an interactive system into a transportable front end which satisfies a user s expectations at low cost and a more substantial stay at home section if our conjecture is false then nil will not be useful otherwise it seems worth pursuing testing of this conjecture and further development of nil will take priority after low level host host protocol has stabilized host imp interfacing the hardware and software interfaces between host and imp is an area of particular concern for the host organizations considering the diversity of host computers to which a standard imp must connect the hardware interface was made bit serial and full duplex each host organization implements its half of this very simple interface the software interface is equally simple and consists of messages passed back and forth between the imp and host programs special error and signal messages are defined as well as messages containing normal data messages waiting in queues in either machine are sent at the pleasure of the machine in which they reside with no concern for the needs of the other computer the effect of the present software interface is the needless rebuffering of all messages in the host in addition to the buffering in the imp the messages have no particular order other than arrival times at the imp the network control program at one host e g utah needs waiting rfnm s before all other messages at another site e g sri the ncp could benefit by receiving messages for the user who is next to be run what is needed is coding representing the specific needs of the host on both sides of the interface to make intelligent decisions about what to transmit next over the channel with the present software interface the channel in one direction once committed to a particular message is then locked up for up to milliseconds this approaches one teletype character time and needlessly limits full duplex character by character interactions over the net at the very least the imp host protocol should be expended to permit each side to assist the other in scheduling messages over the channels crocker et al page rfc new host host protocol february conclusions at this time february the initial network of four sites is just beginning to be utilized the communications system of four imps and wide band telephone lines have been operational for two months programmers at ucla have signed in as users of the sri more significantly one of the authors s carr living in palo alto uses the salt lake pdp on a daily basis by first connecting to sri we thus have first hand experience that remote interaction is possible and is highly effective work on the arpa network has generated new areas of interest nil is one example and interprocess communication is another interprocess communication over the network is a subcase of general interprocess communication in a multiprogrammed environment the mechanism of connections seems to be new and we wonder whether this mechanism is useful even when the processes are within the same computer references l roberts the arpa network invitational workshop on networks of computers proceedings national security agency p ff r m rutledge et al an interactive network of time sharing computers proceedings of the th national conference association for computing machinery p ff f e heart r e kahn s m ornstein w r crowther d c walden the interface message processors for the arpa network these proceedings list of figures figure initial network configuration figure a typical message from a bit machine figure a typical socket figure the relationship between sockets and processes figure a typical telnet dialog underlined characters are those types by the user crocker et al page rfc new host host protocol february sri xds imp i m dec i p pdp ibm m p utah ucsb imp xds sigma ucla figure initial network configuration crocker et al page rfc new host host protocol february bits leader bits bits of marking text of messages bits bits of padding added by the interface figure a typical message from a bit machine user number aen host number figure a typical socket connection link process process send socket receive socket figure the relationship between sockets and processes this rfc was put into machine readable form for entry into the online rfc archives by lorrie shiota crocker et al page 