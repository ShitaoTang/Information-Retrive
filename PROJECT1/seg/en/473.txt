 network working group a mckenzie request for comments bbn nic february file transfer protocol meeting announcement and a new proposed document attached is a new proposal for a file transfer protocol the document is an extensive update to rfc and i believe incorporates solutions to most of the objections to rfc it now seems appropriate to make another attempt to reach final agreement on ftp accordingly i am calling a meeting of interested parties to be held at bbn on march for discussion of this and other proposals this note is directed to the network community at large rather than specifically to the old ftp committee because i don t believe that the ftp committee membership includes all the individuals who have contributed to the current state of ftp design nevertheless it is intended that the meeting proceed from the current state rather than bringing new members up to speed prospective attendees should therefore be familiar with at least the following documents rfc rfc rfc rfc rfc anyone wishing to attend this meeting should contact alex mckenzie nic ident aam at bbn moulton street cambridge mass my telephone number is ext when there is some indication of the number of individuals planning to attend a meeting room will be reserved and more specific information will be directed to attendees mckenzie page rfc file transfer protocol july proposed file transfer protocol this document is the outcome of a meeting held january in cambridge massachusetts by the following people abhay bhushan mit dmcg bob bressler bbn net bob clements bbn tenex alex mckenzie bbn net nancy neigus bbn net ken pogran mit multics marc seriff mit dmcg the basis of the document is rfc with considerations drawn from rfc s and and personal communication with network participants mckenzie page rfc file transfer protocol july proposed file transfer protocol introduction the file transfer protocol ftp is a protocol for file transfer between hosts including terminal imps on the arpa computer network arpanet the primary function of ftp is to transfer files efficiently and reliably among hosts and to allow the convenient use of remote file storage capabilities the objectives of ftp are to promote sharing of files computer programs and or data to encourage indirect or implicit via programs use of remote computers to shield a user from variations in file storage systems among hosts and to transfer data reliably and efficiently ftp though usable directly by a user at a terminal is designed mainly for use by programs the attempt in this specification is to satisfy the diverse needs of users of maxi hosts mini hosts tips and the datacomputer with a simple elegant and easily implemented protocol design this paper assumes knowledge of the following protocols the host host protocol nic the initial connection protocol nic the telnet protocol nwg rfc nic ii discussion in this section the terminology and the ftp model are discussed the terms defined in this section are only those that have special significance in ftp ii a terminology ascii the usascii character set as defined in nic in ftp ascii characters are defined to be the lower half of an eight bit code set i e the most significant bit is zero access controls access controls define users access privileges to the use of a system and to the files in that system access controls are necessary to prevent unauthorized or accidental use of files it is the prerogative of a server ftp process to provide access controls mckenzie page rfc file transfer protocol july byte size the byte size specified for the transfer od data the data connection is opened with this byte size data connection byte size is not necessarily the byte size in which data is to be stored in a system and may not be related to the structure of data data connection a simplex connection over which data is transferred in a specified byte size mode and type the data transferred may be a part of a file an entire file or a number of files the data connection may be in either direction server to user or user to server data socket the socket on which a user ftp process listens for a data connection eof the end of file condition that defines the end of a file being transferred eor the end of record condition that defines the end of a record being transferred error recovery a procedure that allows a user to recover from certain errors such as failure of either host system or transfer process in ftp error recovery may involve restarting a file transfer at a given checkpoint ftp commands a set of commands that comprise the control information flowing from the user ftp to the server ftp process file an ordered set of computer data including programs of arbitrary length uniquely identified by a pathname mode the mode in which data is to be transferred via the data connection the mode defines the data format including eor and eof the transfer modes defined in ftp are described in section iii c nvt the network virtual terminal as defined in the arpanet telnet protocol mckenzie page rfc file transfer protocol july nvfs the network virtual file system a concept which defines a standard network file system with standard commands and pathname conventions ftp only partially embraces the nvfs concept at this time pathname pathname is defined to be the character string which must be input to a file system by a user in order to identify a file pathname normally contains device and or directory names and file name specification ftp does not yet specify a standard pathname convention each user must follow the file naming conventions of the file systems he wishes to use record a sequential file may be structured as a number of contiguous parts called records record structures are supported by ftp but are not mandatory reply a reply is an acknowledgement positive or negative sent from server to user via the telnet connections in response to ftp commands the general form of a reply is a completion code including error codes followed by an ascii text string the codes are for use by programs and the text is for human users server ftp process a process or set of processes which perform the function of file transfer in cooperation with a user ftp process the server ftp process must interpret and respond to user commands and initiate the data connection server site a host site which has a server ftp process server telnet a telnet process which listens on a specified socket for an icp initiated by a user telnet and performs in accordance with the arpanet telnet protocol telnet connections the full duplex communication path between a user telnet and a server telnet the telnet connections are established via the standard arpanet initial connection protocol icp mckenzie page rfc file transfer protocol july type the data representation type used for data transfer and storage type implies certain transformations between the time of data storage and data transfer the representation types defined in ftp are described in section iii b user a process on behalf of a human being or a human being wishing to obtain file transfer service user site a host site satisfying any of the following conditions the site where a user is located a site where a user ftp process is located a site to which a data connection is made by a server in the normal case the sites defined by and are the same site but nothing in ftp requires that this be so user ftp process a process or set of processes which perform the function of file transfer in cooperation with a server ftp process the user ftp process initiates the icp via a user telnet initiates ftp commands and listens on the data socket for the data connection in some obvious cases use from tips and other mini hosts a user ftp process will be subsumed under the term user user telnet a telnet process which initiates an icp to a specified server telnet socket and performs in accordance with the arpanet telnet protocol ii b the ftp model with the above definitions in mind the following model shown in figure may be diagramed for an ftp service in the model described in figure the user telnet initiates the telnet connections standard ftp commands are then generated by the user and transmitted to the server site via the telnet connections ftp commands are in ascii in accordance with nvt conventions and the telnet protocol note that commands may be initiated by the user directly through the user telnet or via a user ftp process standard replies are sent from the server to the user in response to the commands over the telnet connections mckenzie page rfc file transfer protocol july the ftp commands specify the parameters for the data connection data socket byte size transfer mode representation type and format and the nature of file system operation store retrieve append delete etc the user ftp process or its designate should listen on the specified data socket and it is the server s responsibility to initiate the data connection and data transfer in accordance with the specified data connection parameters it should be noted that the data socket need not be in the same host that initiates the ftp commands via the telnet connections but the user or his user ftp process must ensure a listen on the specified data socket a practical example of such file transfer to third hosts is a maxi host user who may actually be a tip user wishing to transmit a file to or from an i o device attached to a tip it should also be noted that two data connections one for send and the other for receive may exist simultaneously telnet connections file server server user user file sys ftp telnet ftp cmds telnet ftp sys tem process process tem ftp replies data data connection s socket user notes the data connection may be in either direction the data connection need not exist all of the time the distinctions between user ftp and user telnet and between server ftp and server telnet may not be as clear cut as shown above for example a user telnet may be directly driven by the user figure model for ftp use mckenzie page rfc file transfer protocol july the protocol requires that the telnet connections be open while data transfer is in progress it is the responsibility of the user to close the telnet connections when finished using the ftp service the server may abort data transfer if the telnet connections are closed iii data transfer functions data and files are transferred only via the data connection the transfer of data is governed by ftp data transfer commands received on the telnet connections the data transfer functions include establishing the data connection to the specified data socket in the specified host using the specified byte size transmitting and receiving data in the specified representation type and transfer mode handling eor and eof conditions and error recovery where applicable iii a establishing data connection the user site shall listen on the specified data socket prior to sending a transfer request command the ftp request command determines the direction of data transfer and the socket number odd or even which is to be used in establishing the data connection the server on receiving the appropriate store or retrieve request shall initiate the data connection to the specified user data socket in the specified byte size default byte size is bits and send a reply indicating that file transfer may proceed prior to this reply the server should send a reply indicating the server socket for the data connection the user may use this server socket information to ensure the security of his data transfer the server may send this reply either before or after initiating the data connection the byte size for the data connection is specified by the byte command it is not required by the protocol that servers accept all possible byte sizes the use of various byte sizes is for efficiency in data transfer and servers may implement only those byte sizes for which their data transfer is efficient it is however required that servers implement at least the byte size of bits after the data transfer is completed it is the server s responsibility to close the data connection except when the user is sending the data in stream mode the sender must close the data connection to indicate eof i e completion of the transfer closing the connection is a server option except under the following conditions mckenzie page rfc file transfer protocol july the server receives an abort command from the user the socket or the byte size specification is changed by the user the telnet connections are closed an irrecoverable error condition occurs it should be noted that if none of the above conditions occur it is possible to maintain two simultaneous data connections for send and receive iii b data representation and storage data is transferred from a storage device in sending host to a storage device in receiving host often it is necessary to perform certain transformations on the data because data storage representa tions in the two systems are different for example nvt ascii has different data storage representations in different systems pdp s generally store nvt ascii as five bit ascii characters left justified in a bit word s store nvt ascii as bit ebcdic codes multics stores nvt ascii as four bit characters in a bit word it may be desirable to convert characters into the standard nvt ascii representation when transmitting text between dissimilar systems the sending and receiving sites would have to perform the necessary transformations between the standard representation and their internal representations a different problem in representation arises when transmitting binary data not character codes between host systems with different word lengths it is not always clear how the sender should send data and the receiver store it for example when transmitting bit bytes from a bit word length system to a bit word length system it may be desirable for reasons of efficiency and usefulness to store the bit bytes right justified in a bit word in the latter sys tem in any case the user should have the option of specifying data representation and transformation functions it should be noted that ftp provides for very limited data type representations transforma tions desired beyond this limited capability should be performed by the user directly or via the use of the data reconfiguration drs rfc nic additional representation types may be defined later if there is a demonstrable need data representations are handled in ftp by a user specifying a representation type the type may also imply a transfer byte size for example in ascii representation the transfer byte size should be bits and any other byte size specification will result in mckenzie page rfc file transfer protocol july cancellation of the transfer request in image and local byte representations any byte size is possible the following data representation types are currently defined in ftp ascii the sender converts data from its internal character representation to the standard nvt ascii form the receiver converts the data from the standard form to its own internal form the data is transferred in the standard form the transfer byte size must be bits this type would be used for transfer of text files this is the default type and it is recom mended that this type be implemented by all ebcdic the sender transfers data using the ebcdic character code and bit transfer byte size this type may be used for efficient transfer of ebcdic files between systems which use ebcdic for their internal character representation image the sender transforms data from contiguous bits to bytes for transfer the receiver transforms the bytes into bits storing them contiguously indepen dent of the byte size chosen for data transfer with record structure and block mode the server might need to pad each record for convenient storage this padding is allowed at the end of a record and should be remembered by the server so it will be stripped off when the file is retrieved by the user the pad ding transformation should be well publicized by the server in case the user processes his file at the server site typical uses for the image type are transfer of executable programs between like machines and transfer of binary non text data it is recommended that this type be implemented by all for some byte size preferably including the bit byte size local byte this representation allows for efficient storage use and retrieval of data the manner in which data is to be transformed depends on the byte size for data transfer and the particular host being used the transformation scheme for different byte size is to be well publicized by all server sites this transformation shall be invertible i e if a file is stored using a certain transfer byte size an identical file must be retrievable using the same byte size and representation type it is the user s responsibility to keep track of the representation mckenzie page rfc file transfer protocol july type and byte size used for his transfer typical uses of the local byte type are in efficient storage and retrieval of files and transfer of structured binary data this type may be identical to the image type for byte size which are integral multiples of or factors of the computer word length representation type may also be affected by another attribute the format for example some printers can use asa fortran vertical format control procedures to transform printed data of type ascii or ebcdic currently format may take one of two values unformatted the representation type as specified is unaffected by any format transformations this is the default value printfile the server is to transform data of either ascii or ebcdic type in accordance with asa fortran vertical format control standards the data is to be transferred in bit bytes a discussion of the asa vertical format control appears in nwg rfc appendix c and in communications of the acm vol no p october according to the asa vertical format control standards the first character of a formatted record is not printed but determines vertical spacing as follow character vertical spacing before printing blank one line two lines to first line of the next page no advance in addition to the above four there are more characters defined in appendix c rfc which represent an ibm extension to the asa standard it should be noted that a serving host need not accept all represen tation types and or byte sizes but it must inform the user request ing an unacceptable type or size of this fact by sending an appropri ate reply iii c file structure and transfer modes the only file structures supported directly in ftp at the present time are record structures however the use of record structures is not mandatory a user with no record structure in his file should be mckenzie page rfc file transfer protocol july able to store and retrieve his file at any host a user wishing to transmit a record structured file must send the appropriate ftp stru command the default assumption is no record structure a serving host need not accept record structures but it must inform the user of this fact by sending an appropriate reply any record structure information in the data stream may subsequently be dis carded by the receiver all data transfers must end with an eof the eof is defined by the data transfer mode for files that have record structures an eor is also defined by the transfer mode only the transfer modes and representation type combinations that have eor defined may be used for transfer of files with record structures records may be of zero length but they must be contained in file boundaries the relation ship between files and records is hierarchical but an eof does not imply an eor the following data transfer modes are defined in ftp stream the file is transmitted as a stream of bytes of the specified byte size the eof is signaled by closing the data connection any representation type and byte size may be used in the stream mode with file structure but use of record structure limits the type to ascii or ebcdic with or without printfile format the convention is that the ascii character cr carriage return code octal followed by lf line feed code octal indicates an eor for ascii representation type and the ebcdic character nl new line code hex indicates an eor for ebcdic type this is the default mode and it is recommended that this mode be implemented by all text the file is ascii text transmitted as a sequence of bit bytes in the ascii representation type and optional printfile format record structures are allowed in this mode the eor and eof are defined by the presence of special telnet control codes ost significant bit set to one in the data stream the eor code is octal hex co the eof code is octal hex c the byte size for transfer is bits for ascii type text and stream modes are almost identical mckenzie page rfc file transfer protocol july comparing the two the advantages of stream mode are the receiver need not scan the incoming bytes it is usable with all data types and the disadvantages are closing the data connection under error conditions can be misconstrued as an eof in stream mode when in fact the data transfer was interrupted in text mode the eof is sent expli citly if record structure is specified in stream mode then crlf implies eor and in order for crlf to be sent as valid data it must be transformed e g into cr nul lf or lf cr block the file is transmitted as a series of data blocks preceded by one or more header bytes the header bytes contain a count field and descriptor code the count field indicates the total length of the data block in bytes thus marking the beginning of the next data block there are no filler bits the descriptor code defines last file block eof last record block eor restart marker see section iii d or suspect data i e the data being transferred is suspected of errors and is not reli able record structures are allowed in this mode and any representation type or byte size may be used the header consists of the smallest integral number of bytes whose length is greater than or equal to bits only the least significant bits right justified of header shall have information the remaining most significant bits are don t care bits of the bits of header information the low order bits shall represent byte count and the high order bits shall represent descriptor codes as shown below integral data bytes don t care descriptor byte count to bits bits bits mckenzie page rfc file transfer protocol july the following descriptor codes are assigned code meaning an ordinary block of data end of data block is eor end of data block is eof suspected errors in data block data block is a restart marker in the use of block mode it is possible for two or more conditions requiring different descriptor codes suspected errors and either end of record or end of file to exist simultaneously such a possibility may be handled by sending a separate eor or eof block with a zero byte count this is allowed by the pro tocol the restart marker is embedded in the data stream as an integral number of bit bytes representing printable ascii characters right justified in an integral number of data bytes greater than bits for example if the byte size is bits the restart marker byte would be one byte right justified per two bit bytes as shown below two bit bytes marker char bits for byte size of bits or more two or more marker bytes shall be packed right justified the end of the marker may be delimited by the character sp code if marker characters do not exactly fit an integral byte the unused character slots should con tain the ascii character sp code for example to transmit a six character marker in a bit byte size the following three bit bytes would be sent mckenzie page rfc file transfer protocol july don t care descriptor bits code byte count marker marker marker marker bits bits bits bits marker marker sp sp bits bits bits bits hasp the file is transmitted as a sequence of bit bytes in the standard hasp compressed data format document to be issued by bob braden ucla this mode achieves considerable compression of data for print files record structures are allowed in the hasp mode the following matrix summarizes the legal combinations of file transfer parameters the decimal integers represent legal byte sizes for each particular stru mode type form grouping absence of a number implies illegality note that hasp mode is not included since it has never been defined stru f r type mode s t b s t b form a u p e u p i u l u mckenzie page rfc file transfer protocol july iii d error recovery and restart there is no provision for detecting bits lost or scrambled in data transfer this issue is perhaps handled best at the ncp level where it benefits most users however a restart procedure is provided to protect user from system failures such as failure of either host ftp process or the imp subnet the restart procedure is defined only for the block mode of data transfer it requires the sender of data to insert a special marker code in the data stream with some marker information the marker information has meaning only to the sender but must consist of printable ascii characters the printable ascii characters are defined to be octal codes through i e not including codes through and the characters sp and del the marker could represent a bit count a record count or any other information by which a system may identify a data checkpoint the receiver of data if it implements the restart procedure would then mark the corresponding position of this marker in the receiving system and return this information to the user in the event of a system failure the user can restart the data transfer by identifying the marker point with the ftp restart pro cedure the following examples illustrate the use of the restart procedure when server is the sender of data the server ftp process inserts an appropriate marker block in the data stream at a convenient data point the user ftp process receiving the data marks the corresponding data point in its file system and conveys the last known sender and receiver marker information to the user in the event of system failure the user or user ftp process restarts the server at the last server marker by sending a restart command with the server s marker code as its argument the restart com mand is transmitted over the telnet connection and is immediately followed by the command such as store or retrieve which was being executed when the system failure occurred when user is the sender of data the user ftp process inserts the appropriate marker block in the data stream the server ftp pro cess receiving the data marks the corresponding data point in its file system the server does not store this marker but con veys the last known sender and receiver marker information to the user over the telnet connections by appropriate reply codes the user or the user ftp process then restarts transfer in a manner identical to that described in the first example mckenzie page rfc file transfer protocol july iv file transfer functions the telnet connections on which ftp commands and replies are transmitted are initiated by the user ftp process via an icp to a standard server socket ftp commands are then transmitted from user to server and replies are transmitted from server to user the user file transfer functions involve sending the ftp commands interpret ing the replies received and transferring data over the data connec tion in the specified manner the server file transfer functions involve accepting and interpreting ftp commands sending replies setting up the data connection and transferring data mckenzie page rfc file transfer protocol july iv a ftp commands ftp commands are ascii strings terminated by the ascii character sequence crlf carriage return followed by line feed the command codes themselves are ascii alphabetic characters terminated by the ascii character space octal code for convenience the com mand codes are defined to be four or less ascii alphanumeric char acters including both upper and lower case alphabetic characters the command codes and the semantics of commands are described in this section but the detailed syntax of commands is specified in section v b the reply sequences are discussed in section v c and scenarios illustrating the use of commands are provided in section v d ftp commands may be partitioned as those specifying access control identifiers data transfer parameters or ftp service requests cer tain commands such as abor stat bye may be sent over the telnet connections while a data transfer is in progress some servers may not be able to monitor the telnet and data connections simultane ously in which case these commands should be preceded by a telnet sync to awaken the server for other servers this may not be neces sary and the sync will be ignored iv a access control commands the following commands specify access control identifiers command codes are shown in parentheses user name user the argument field is an ascii string identify ing the user the user identification is that which is required by the server for access to its file system this command will normally be the first command transmitted by the user after the telnet connections are made some servers may require this additional identification information in the form of a password and or an account command may also be required by some servers servers may allow a new user command to be entered at any point in order to change the accounting information all parameters are unchanged and any file transfer in progress is completed under the old account password pass the argument field is an ascii string identify ing the user s password this command must be immediatly preceded by the user name command and for some sites completes the user s identification for access control since password information is quite sensitive it is desirable in general to mask it or suppress type out it appears that the server has no foolproof way to achieve this it is therefore the responsibility of the user ftp process to hide the sensitive password information mckenzie page rfc file transfer protocol july account acct the argument field is an ascii string identifying the user s account the command is not necessarily related to the user command as some sites may require an account for login and others only for specific access such as storing files in the latter case the command may arrive at any time there are two reply codes to differentiate these cases for the automaton when account information is required for login and the server receives another command which he buffers the legal response is reply code when an account is required for a specific transfer requested the reply code is returned and the request command is flushed reinitialize rein this command terminates a user flushing all i o and account information except to allow any transfer in pro gress to be completed all parameters are reset to the default setting and the telnet connection is left open a user command is expected to follow logout bye this command terminates a user and if file transfer is not in progress closes the telnet connection if file transfer is in progress the connection will remain open for result response and will then close for hot card reader mode the rein command should be used instead an unexpected close on the telnet connection will cause the server to take the effective action of an abort abor and a logout bye iv a transfer parameter commands all data transfer parameters have default values and the commands specifying data transfer parameters are required only if the default parameter values are to be changed the default value is the last specified value or if no value has been specified the standard default value as stated here this implies that the server must remember the applicable default values the commands may be in any order except that they must precede the ftp service request the following commands specify data transfer parameters byte size byte the argument is an ascii represented decimal integer through specifying the byte size for the data connection the default byte size is bits the byte size is always bits in the ascii and ebcdic representation types a server may reject specific byte size type combinations by sending an error reply code in response to a transfer request command data socket sock the argument is a host socket specification for the data socket to be used in data connection there may be two data sockets one from server to user and the other for user mckenzie page rfc file transfer protocol july to server data transfer an odd socket number defines a send socket and an even socket number defines a receive socket the default host is the user host to which telnet connections are made the default data sockets are u and u where u is the socket number used in the telnet icp and the telnet connections are on sockets u and u listen lstn the argument is a single ascii character code to specify the direction of the socket that the server must allocate for use as a data connection the server is to listen on the allocated socket when an appropriate transfer command is given the following codes are assigned s send r receive representation type type the argument is a single ascii char acter code specifying the representation types described in sec tion iii b the following codes are assigned for type a ascii i image l local byte e ebcdic the default representation type is ascii format form the argument is a single ascii character code specifying the formats described in section iii b the following codes are assigned for format u unformatted p printfile the default format is unformatted file structure stru the argument is a single ascii character code specifying file structure described in section iii c the following codes are assigned for structure f file no ecord structure r record structure the default structure is file ie no records transfer mode mode the argument is a single ascii character code specifying the data transfer modes described in section iii c the following codes are assigned for transfer modes mckenzie page rfc file transfer protocol july s stream bytes close is eof b block header with descriptor and count t text telnet control code for eor eof h hasp specially formatted compressed data the default transfer mode is stream iv a ftp service commands the ftp service commands define the file transfer or the file system function requested by the user the argument of an ftp service com mand will normally be a pathname the syntax of pathnames must con form to server site conventions with standard defaults applicable except that ascii characters must be used in conformance with the telnet protocol the suggested default handling is to use the last specified device directory or file name or the standard default defined for local users the command may be in any order except that a rename from command must be followed by a rename to command and some servers may require an allocate command before a store command the data when transferred in response to ftp service commands shall always be sent over the data connection the follow ing commands specify ftp service requests retrieve retr this command achieves the transfer of a copy of the file specified in the pathname from server to user site the status and contents of the file at the server site shall be unaf fected store stor this command achieves the transfer of a copy of a file from user to server site if the file specified in the path name exists at the server site then its contents shall be replaced by the contents of the file being transferred a new file is created at the server site if the file specified in the pathname does not already exist append with create appe this command achieves the transfer of data from using to serving site if the file specified in the pathname exists at the server site then the data transferred shall be appended to that file otherwise the file specified in the pathname shall be created at the server site allocate allo this command may required by some servers to reserve sufficient storage to accommodate the new file to be transferred the argument field shall be a decimal integer representing the number of bytes of size specified by the byte size command of storage to be reserved for the file this mckenzie page rfc file transfer protocol july command shall be followed by a store or append command the allo command should be treated as a no op no operation by those servers which do not require that the maximum size of the file be declared beforehand restart rest the argument field represents the server marker at which file transfer is to be restarted this command does not cause file transfer but spaces over the file to the specified data checkpoint this command shall be immediately followed by the appropriate ftp service command which shall cause file transfer to resume rename from rnfr this command specifies the file which is to be renamed this command must be immediately followed by a rename to command specifying the new file pathname rename to rnto this command specifies the new pathname of the file specified in the immediately preceding rename from command together the two commands cause a file to be renamed abort abor this command indicates to the server to abort the previous ftp service command and any associated transfer of data the abort command should be preceded by the telnet synch condition indicated by the combination of the data mark and the ins no action is to be taken if the previous command has been completed including data transfer the telnet connections are not to be closed by the server but the data connection may be closed an appropriate reply should be sent by the server delete dele this command causes the file specified in the pathname to be deleted at the server site if an extra level of protection is desired such as the query do you really wish to delete it should be provided by the user ftp process list list this command causes a list to be sent from server to user site if the pathname specifies a directory the server should transfer a list of files in the specified directory if the pathname specifies a file then server should send current information on the file a null argument implies the user s current working or default directory the data transfer is over the data connection in type ascii or type ebcdic it is the user s responsibility to ensure the correct parameters nlist nlst this command causes a directory listing to be sent from server to user site the pathname should specify a directory and the server will return a stream of names of files and no other information the data will be transferred in ascii or ebcdic type over the data connection as valid pathname strings separated by mckenzie page rfc file transfer protocol july crlf this command will allow automatic copying of an entire directory when used with the appropriate transfer commands status stat this command shall cause a status response to be sent over the telnet connection in form of a reply the command may be sent during a file transfer preceded by a telnet sync in which case the server will respond with the status of the opera tion in progress or it may be sent between file transfers in the latter case the command may have an argument field such as a pathname if the argument is a pathname the command is analogous to the list command except that data shall be transferred in ascii on the telnet connection if a partial pathname is given the server may respond with a list of file names or attributes associated with that specification if no argument is given the server should return general status information about the server ftp process this should include current values of all transfer parameters and the status of connections help help this command shall cause the server to send helpful information regarding its implementation status over the telnet connection to the user the command may take an argument e g any command name and return more specific information as a response the reply is type general system status it is suggested that help be allowed before entering a user command mail file mlfl the intent of this command is to enable a user site to mail data in form of a file to another user at the server site it should be noted that the files to be mailed are transmitted via the data connection in ascii or ebcdic type it is the user s responsibility to ensure that the type is correct these files should be appended to the destination user s mail by the server in accordance with serving host mail conventions the mail may be marked as sent from the particular using host and the user specified by the user command the argument field may con tain one or more system or nic idents it is recommended that mul tiple ident be allowed so the same mail can easily be sent to several users or it may be empty if the argument field is empty or blank one or more spaces then the mail is destined for a printer or other designated place for site mail a nic ident refers to the standard identification described in the nic direc tory of network participants a serving host may keep a table mapping nic indents into system idents although nic idents are not required in the implementation a system ident is the user s normal identification at the serving host the use of system idents would allow a network user to send mail to other users who do not have nic identification but whose system ident is known mckenzie page rfc file transfer protocol july mail mail this command allows a user to send mail that is not in a file over the telnet connection the argument field may con tain one or more system or nic idents or it may be empty the idents are defined as above for the mlfl command after the mail command is received the server is to treat the following lines as text of the mail sent by the user the mail text is to be terminated by a line containing only a single period that is the character sequence crlf in a new line it is suggested that a modest volume of mail service should be free i e it may be entered before a user command iv a miscellaneous commands noop noop this command does not affect any parameters or pre viously entered command the server simply sends a no op reply quote quot this command allows the user to talk directly to the ftp server after parsing this command the user ftp process will pass without examination all succeeding liners until the nquo command is received between these two commands the server will respond appropriately to his implementation and the user s requests noquote nquo this command returns the user and server processes to normal interactive mode both quot and nquo have reply codes to be sent by th server process to the user process to ensure agreement on the current mode the quote commands provide a convenient method of testing server implemented experimental commands the names of the latter should begin with an x and can be listed in the system help reply it should be noted that the official command set is expandable sugges tions should go first to alexander a mckenzie bbn iv b ftp replies the server sends ftp replies over the telnet connection in response to user ftp commands the ftp replies constitute the acknowledgment or completion code including errors the ftp server replies are formatted for human or program interpretation single line replies consist of a leading three digit numeric code followed by a space followed by a one line text explanation of the code for replies that contain several lines of text the first line will have a lead ing three digit numeric code followed immediately by the ascii char acter hyphen code octal and possibly some text all succeeding continuation lines except the last are constrained not to begin with three digits the last line must repeat the numeric code of the first line and be followed immediately by a space mckenzie page rfc file transfer protocol july for example first line continuation line another line last line the numeric codes are assigned by groups and for ease of interpreta tion by programs in a manner consistent with other protocols such as the rje protocol the three digits of the code are to be interpreted as follows a the first digit specifies type of response as indicated below these replies are purely informative and constitute neither a positive nor a negative acknowledgment xx informative replies to status inquiries these constitute a positive acknowledgment to the status command xx positive acknowledgment of previous command or other success ful action xx incomplete information activity cannot proceed without further specification and input xx unsuccessful reply the request is correctly specified but the server is unsuccessful in correctly fulfilling it xx incorrect or illegal command the command or its parameters were invalid or incomplete from a syntactic viewpoint or the command is inconsistent with a previous command the command in question has been completely ignored xx xx reserved for future expansion mckenzie page rfc file transfer protocol july b the second digit specifies the general category to which the response refers x x general purpose replies not assignable to other categories x primary access informative replies to the log on attempt x secondary access the primary server is commenting on its ability to access a secondary service x x ftp results x x rje results x x x x reserved for future expansion c the final digit specifies a particular message type since the code is designed for an automation process to interpret it is not necessary for every variation of a reply to have a unique number only the basic meaning of replies need have unique numbers the text of a reply can explain the specific reason for that reply to a human user each telnet line delimited by a numeric code and crlf or group of text lines bounded by coded lines that is sent by the server is intended to be a complete reply message it should be noted that the text of replies is intended for a human user only the reply codes and in some instances the first line of text are intended for programs the assigned reply codes relating to ftp are general information message site time of day etc message from system operator server availability information ftp commentary or user information system status reply system busy doing file status reply directory listing reply last command received correctly an abort has terminated activity as requested abort request ignored no activity in progress user is logged in may proceed user is logged out service terminated logout command noted will complete when transfer done user is logged out parameters reinitialized mckenzie page rfc file transfer protocol july ftp file transfer started correctly ftp restart marker reply text is mark yyyy mmmm where yyyy is user s data stream marker yours and mmmm is server s equivalent marker mine note the spaces between the markers and ftp transfer completed correctly rename completed delete completed ftp server data socket reply text is sock nnnn where nnnn is a decimal integer representing the server socket for data connection mail completed connection greeting message awaiting input current command incompleted no crlf for long time enter password enter account if account required as part of login sequence enter mail terminate by a line with only a this service not implemented this service not accepting user now goodbye log on time or tries exceeded goodbye log on unsuccessful usre and or password invalid user not valid for this service cannot transfer files without valid account enter account log out forced by operator action phone site log out forced by system problem service shutting down goodbye ftp file not found ftp file access denied to you ftp file transfer incomplete data connection closed ftp file transfer incomplete insufficient storage space ftp cannot connect to your data socket ftp file system error not covered by other reply codes ftp name duplication rename failed ftp transfer parameters in error last command line completely unrecognized syntax of last command is incorrect last command incomplete parameters missing last command invalid ignored illegal parameter combination last command invalid action not possible at this time last command conflicts illegally with previous command s mckenzie page rfc file transfer protocol july requested action not implemented by the server catchall error reply bad pathname specification e g syntax error v declarative specifications in order to make ftp workable without needless error messages the following minimum implementation is required for servers type ascii with bit bytes mode stream structure file record with ascii type and crlf for eor form unformatted commands user bye sock type byte mode stru form for the default values retr stor noop the initial default values for transfer parameters are type ascii byte mode stream stru file form unformatted v a connections the server ftp process at the server site shall listen on socket via its server telnet the user or user ftp process at the user site shall initiate the full duplex telnet connections via its user telnet performing the arpanet standard initial connection protocol icp to server socket servers may specify that interaction over the tel net connections be line at a time with local echo the server is not obliged to provide remote echo and may ignore telnet control charac ters he should not however return error response to the latter all editing of command lines similarly must be local the telnet connections shall be closed by the user site upon completion of use and receipt of the last server reply the user site must listen on the specified data socket or sockets a send and or a receive socket the server site shall initiate the data connection using the specified data socket and byte size the direction of data connection and the data socket used shall be mckenzie page rfc file transfer protocol july determined by the ftp service command the server shall send a reply to the user indicating the server data socket so that the user may ensue the security of data transfer this can be done at any time prior to the first transfer of data over a data connection it should be emphasized that the user ftp should not wait for a server data socket reply before doing the listen since there is no guarantee that the reply will arrive before the user site receives the initiating rfc the security check can be done when the reply arrives and the data connection closed if it was made to a socket other than the one specified the data connection shall be closed by the server site under the con ditions described in section iii a if the server wishes to close the connection in modes where that is not required it is recommended that the close be sent immediately after the file transfer is com pleted rather than after a new transfer command is received because the user or server may have to test the state of the socket before doing a listen or init the server should in general send a reply before closing the data connection to avoid problems at the user end though for reasons stated above the user ftp should not wait for the reply before doing his close v b commands the commands are ascii character strings transmitted over the telnet connections as described in section iv a the command functions and semantics are described in sections iv a iv a iv a and iv a the command syntax is specified here the commands begin with a command code followed by an argument field the command codes are four or less ascii alphabetic characters upper and lower case alphabetic characters are to be treated identi cally thus any of the following may represent the retrieve command retr retr retr retr retr this also applies to any symbols representing parameters values such as a or a for ascii type the command codes and the argument fields are separated by one or more spaces the argument field consists of a variable length ascii character string ending with the character sequence crlf carriage return immediately followed by line feed in the following section on syn tax it should be stressed that all characters in the argument field are ascii characters thus a decimal integer shall mean an ascii represented decimal integer mckenzie page rfc file transfer protocol july the following are all the currently defined ftp commands user crlf pass crlf acct crlf rein crlf bye crlf byte crlf sock crlf lstn crlf type crlf form crlf stru crlf mode crlf retr crlf stor crlf appe crlf allo crlf rest crlf rnfr crlf rnto crlf abor crlf dele crlf list crlf nlst crlf mckenzie page rfc file transfer protocol july stat crlf help crlf mlfl crlf mail crlf noop crlf quot crlf nquo crlf the syntax of the above argument fields using bnf notation where applicable is any of the ascii characters except cr and lf any ascii code through any decimal integer through host number a decimal integer specifying an arpanet host decimal integer between and s r u p a e i l f r mckenzie page rfc file transfer protocol july s b t h the null string specifies use the default v c sequencing of commands and replies the communication between the user and server is intended to be an alternating dialogue as such the user issues an ftp command and the server responds with a prompt primary reply the user should wait for this initial primary success or failure response before sending further commands a second type of reply is sent asynchronously with respect to user commands these replies may for example report on the progress or completion of file transfer and as such are secondary replies to file transfer commands the third class of replies are informational and spontaneous replies which may arrive at any time these replies are listed below as spontaneous mckenzie page rfc file transfer protocol july command reply correspondence table command success fail user pass acct rein secondary reply bye byte sock lstn type form stru mode retr secondary reply stor secondary reply appe secondary reply allo rest rnfr rnto abor dele list secondary reply nlst secondary reply stat help mlfl secondary reply mail secondary reply noop quot nquo spontaneous xx replies mckenzie page rfc file transfer protocol july v d typical ftp scenarios tip user wanting to transfer file from host x to local printer a tip user opens telnet connections by icp to host x socket b the following commands and replies are exchanged tip host x user username crlf enter password crlf pass password crlf user logged in crlf sock crlf command received ok crlf retr this file crlf sock crlf host x initiates data connection to tip socket i e port receive file transfer started bye crlf file transfer completed c host x closes the telnet and data connections note the tip user should be in line mode user at host u wanting to transfer files to from host s in general the user would communicate to the server via a mediat ing user ftp process the following may be a typical scenario the user ftp prompts are shown in parentheses represents commands from host u to host s and represents replies from host s to host u mckenzie page rfc file transfer protocol july local commands by user action involved ftp host multics cr icp to host s socket establishing telnet connections username doe cr user doe crlf password crlf password mumble cr pass mumble crlf doe logged in crlf retrieve local type ascii cr local pathname test cr user ftp opens local file in ascii for pathname test p cr retr test p crlf sock crlf server makes data connection to u file transfer starts crlf file transfer complete crlf type imagecr type i crlf command ok crlf byte cr byte crlf command ok crlf store local type image cr local pathname file dump cr user ftp opens local file in image for pathname udd cn fd cr stor udd cn fd crlf access denied crlf terminate doe logged out crlf server closes all connections this rfc was put into machine readable form for entry into the online rfc archives by via genie mckenzie page 