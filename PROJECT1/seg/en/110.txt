 network working group t p skinner request for comments mit project mac june logical message synchronization at the last network meeting the question of logical and physical message distinctions was raised an argument was made in favor of never running two logical messages together as one or more physical messages another method of stating this is that a logical message must begin on a physical message boundary this did not however solve the problem of locating the end of a logical message a rather poor technique was suggested by myself which consisted of using the first partial physical message as an indication of the last physical message of the logical message this technique was thrown out for a number of very valid reasons the solution that seemed most pleasing was the inclusion of some sort of a bit count or data type specification to precede the logical message most everyone seemed to like this even though it was stated in a very general way as of this writing it appears that it is desired to completely sever the relation between physical and logical messages this certainly is aesthetically pleasing however we are now forced to view the network as a virtually infinite bit stream with no physical delineations it may well do to transmit a logical header and bit count for each message as long as there are no errors along the line if however a bit is dropped the problem of synchronization is compounded by the fact that we have no ability to search for the beginning of a logical message other than brute force an error of this type could be introduced by faulty host or user software hardware as well as the imp itself this would involve the shifting of the message bit by bit and seeing if the data looked reasonable this could certainly be time consuming as well as introducing the possibility of false synchronism i can think of several solutions to the problem at the moment none of them seems to be very good upon losing synchronism a user could send some form of error message to the other host the other host could then in return cease sending and wait for a message to continue from the troubled user this would allow the troubled user to flush out all waiting input he would then be assured that the next bit started a logical message the problems here are in assuring synchrony due to input output buffering in the network and at both hosts how for example can the troubled host be assured he has all the pending data once he is sure he can then resume input assuming all is ok page another partial solution requires the original restriction that logical messages always start on physical boundaries a user then merely has to examine the beginning of each physical message to see if it fits the pattern of a logical message header this technique is a lot safer than examining the entire input stream as well as being quite a bit faster i have not intended to suggest a solution to the problem but merely bring it to light if we want to restrict logical messages to begin on physical boundaries we must plan this early in the game it probably works out that way in most cases anyway other schemes can be tried later we must however face up to this problem fairly soon this rfc was put into machine readable form for entry into the online rfc archives by carl alexander page 