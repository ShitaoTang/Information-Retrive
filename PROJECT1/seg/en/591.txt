 network working group r l sunberg request for comments harvard university nic april categories c c c d d d file transfer and error recovery file transfer protocol a handshaking i think that mr bhushan rfc nic is not strict enough in his concept of a transaction sequence every transaction should prompt a response from its recipient recall kalin s crates rfc nic control should pass back and forth until the server terminates the server always gets the last word more on error recovery later some sample interchanges are given user server comments establish a connection identify self ok ready retrieval request i ve got your file send it here s the first part got it all done store request ok go ahead here s some protection stuff ok here s the file got it all done see section b below for examples of error recovery sunberg page rfc file transfer and error recovery april b extensions to the file transfer protocol the file transfer protocol needs a mechanism for accessing individual records of a file this will be particularly useful when very large data bases appear on the network the following definitions should be added to the protocol the store s and retrieve r requests have the data field format where has the syntax rsus us the syntax is changed to rs if a retrieve r request is given with a data field with syntax rather than syntax then the returned data will consist of the record following the matching if a store s request is given with a data field of syntax then the supplied data will replace the record following the matching if the keyname does not exist the record will be appended to the named file the individual installation must provide the linkage between the and the record it references in addition the lookup l request will provide a list of keynames into a file or the name of a file which contains the keynames transaction code f request file directory requests a listing of available files the data field of the f transaction is of the form gsgs all files in the server system which match one or more of the given specifiers are listed in a return file the format of the data fields of this file is gsgs if a field in the request transaction does not include a field the default is all files on the given device some examples are given sunberg page rfc file transfer and error recovery april this example requests a list of all files on the disk specified by plus all files named joe the response could contain in the data field this message states that in the area of the disk there are files alpha beta and joe and that joe is also a file in the area of the disk error recovery a error recovery procedures have been noticeably lacking to date the usual approach has been to close the connection and start from scratch mr bhushan proposes a third level abort but doesn t really detail the implementation i propose a multilevel error recovery procedure as follows b if an error occurs which does not cause a loss of third level transaction boundaries and only affects one side of a duplex connection a third level recovery is possible via a transaction sequence abort an example is given user server comments send me this file ok i ve got it ready error here it is with an error no data error sorry forget it send the file again ready doesn t get there waiting error timeout sorry forget it send the file third time got it ready there it is got it done finally note that the server always gets the last word in error situations as well as normal transmission sunberg page rfc file transfer and error recovery april c although the above examples are given in terms of bhushan s transaction codes this form of error recovery is implementable in any protocol which uses flagged blocking and duplex connections d if errors cannot be recovered as above then some means must be available to clear the link completely and resynchronize i suggest that an bit argument be appended to the interrupt on link ncp message inr ins the receiver would send to indicate that the block boundaries were lost and all incoming data is being discarded the sender upon receiving the inr would flush all queued output and wait for the link to clear the ncp would then send a message and when it was received rfnm returned a negative termination would be sent on the link the receiver begins accepting data again when the ins is received this assumes that any process can flush untransmitted data and detect a clear link note that this method is useable on any simplex connection e if all else fails one can resort to closing the faulty socket ncp version numbers a i suggest that the ncp be given a version number and the next version include two new message types who are you requests a version number from the receiving host and i am supplies that number b the messages would probably be initially used in a can i talk to you sense or not at all eventually it would take on a what can you do meaning accordingly the field should be large bits for expansion this rfc was put into machine readable form for entry into the online rfc archives by jose tamayo sunberg page 