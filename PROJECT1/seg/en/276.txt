 network working group r braden request for comments ccn ucla nic february comments on file transfer protocol on january jon postel nmc eric harslem rand stephen wolfe ccn and robert braden ccn held and informal meeting at ucla on ftp this rfc generally reports the consensus of that meeting on the following issues server server transfers ref rfc by thomas and clements site dependent information and miscellaneous questions disagreements with rfc and there was also a discussion of the print file muddle but that subject is addressed in a separate rfc no miscellaneous comments on ftp rfc p the question of print files will be discussed at length in another rfc however we did feel that the word still on the second line from the bottom of page is gratuitous rfc p rfc p rfc p i to the extent that we understand these items they seem to be unnecessary and probably undesirable concessions to particular bad implementations hacks in reference to the second item no in rfc one should note that in an asynchronous multi process system like the arpa network the phrase immediately after has little meaning an implementation which depends upon immediately after is erroneous and should be fixed if the protocol as defined has an intrinsic race condition of course the protocol should be fixed but we don t believe such a problem exists it would help if definitions of command response sequences in the ftp document were tightened up considerably as for the last item we don t understand why wayne hathaway is so strongly opposed to implied eor rfc p format definitions for block mode a the definition of the header length presumably is meant to be the smallest integral number of bytes whose length is greater or equal to bits braden page rfc comments on file transfer protocol february b the same definitional problem occurs for restart markers c why does the restart marker have to be greater than bits d note that changing the descriptor coding to bit flags would abolish the implied eor as well as the problem of rfc p rfc p iii note that text mode is not possible for any ebcdic coded file since ebcdic is an bit code telnet control characters cannot be used to distinguish either eor or eof stream and block modes will work however we have found the diagram on the last page to be useful for keeping track of the three dimensional space of ftp parameters rfc p pass command there is no mechanism within ftp for changing a password a user shouldn t have to use a different protocol e g log into a time sharing system to merely change his password rfc p type before byte this admonition to send type before byte should be clearly labeled as a recommended procedure for user ftp not a restriction on a server ftp rfc p order of reply some of the participants felt strongly that the timing problem dealt with in this item is the result of bad ncp implementations and ought not be dignified in the protocol the issue here is the old familiar and touchy one of queueing rfc s or not my own view is that the protocol asymmetry forced by ncp s which can t queue rfc s is at least unaesthetic and makes some elegant solutions impossible for examples see rfc and the comments below on server server interaction and rfc on reconnection protocol rfc p restart following a restart command append and store presumably have identical meanings braden page rfc comments on file transfer protocol february b ftp parameter encoding rfc which discusses print files points out that the print file attribute is logically independent of the character code attribute ascii vs ebcdic in the type dimension the set of allowable types in ftp is the outer product of the individual attributes thus ftp has at least four character types summarized by the following two x two matrix ascii ebcdic not print file print file i propose that the encoding in the type command model this interdependence of the types instead of using a distinct single ascii character for each type we should use multiple ascii characters qualifiers if you wish for example a represents ascii code e represents ebcdic code p represents print file i represents image l represents local byte then the legal types according to rfc would be a ap e ep i l note that the attributes under consideration here are type like they are not logically concerned with the structure or the transmission mode only the internal encoding of the file at present this would be a trivial change however i foresee the file transfer protocol expanding significantly over the next several years as new types are added some servers will want to add server specific type variations and the nwg will want to add some how about an apl character set or the multiple overlay character ascii which has been proposed multiple qualifiers and later perhaps more structure in the type seems to be the cleanest escape mechanism for future growth braden page rfc comments on file transfer protocol february c server server interaction the ftp changes proposed by thomas and clements in rfc are a particular solution to a general problem inherent in the current host host protocol and higher level protocols like ftp there seems to be a need for a secure and simple way for two server processes in different hosts to exchange socket names i e bit numbers so they can subsequently exchange rfc s and establish a connection current second level host host protocol provides exactly one secure mechanism by which one host can learn a socket name of a process at another host in order to establish a connection icp the icp mechanism by itself is not adequate for server server connection in ftp therefore thomas and clements have proposed an extension to the ftp protocol roughly as follows a controller user process at host a uses icp to invoke and establish telnet control connections to two automata server processes at two other hosts an automaton process invoked in this manner then executes controller commands sent in a standard command language over the telnet control connection the controller process commands each automaton to reserve a suitable data transfer socket and to return the socket name to the controller over the control connection an automaton presumably negotiates with his own ncp in a host dependent manner to obtain the socket reservation the controller now knows both data transfer socket names he will send them in subsequent commands to the automata so each automaton will know the foreign socket name to which he is to connect later commands cause the automata to issue rfc s and open the data connection as needed this appears to be useful general model for process process interaction over the network personally i believe this symmetrical model should be the basis of all ftp the controller and one of the automata could be in the same host then the user server problem for any pair of hosts to transfer files one must have a server ftp and the other a user ftp would vanish at least one host somewhere in the network would need a controller process all other hosts would need only an automaton process perhaps at a future time the nwg should consider whether a socket reservation and passing mechanism ought to be incorporated into second level protocol rather than duplicated in a number of third level protocols we should note that this model provides secure braden page rfc comments on file transfer protocol february sockets only if both user and server processes release the socket reservations when the telnet control connection breaks the same problem seems to occur with thomas reconnection protocol in any case for the present we would endorse the general third level model of rfc however we would propose a slightly different and more symmetrical approach the requirement in ftp that the ftp user listen on the data socket before issuing a data transfer command should be removed the beauty of host host protocol is that it doesn t matter which host sends the first rfc as long as they both send matching rfc s eventually timeouts of course are annoying but i believe they are workable and ultimately unavoidable queueing rfc s is also necessary we propose instead of lstn a new command getsocket the controller i e user ftp process would send a getsocket to each automaton probably after a successful login upon receiving getsocket an automaton would assign a send receive pair of data transfer sockets and return the numbers over the telnet connection alternatively ftp could specify that a send receive pair of sockets always be assigned when the server is first entered and the numbers returned to the user process via unsolicited replies then the user process would send the socket numbers to the opposite hosts by sending sock commands to both when it receives a data transfer command the automaton server process would issue an rfc containing the two socket numbers when both servers are fired up rfc s are exchanged and data transfer starts d site dependent ftp parameters some hosts will have a problem with the current ftp because their file system needs additional host specific parameters in certain cases as an example the ibm operating systems tend to give the programmer a number of options on the logical and physical mapping of a file onto the disk this is true both of tss see wayne hathaway s discussion of his stor command implementation page of rfc and os the large set of options and parameters to the os file system is in fact the legitimate origin of most complaints about os job control language jcl braden page rfc comments on file transfer protocol february if the ftp user merely wants to store data without using it at one of these sites he has no problem defaults can be chosen to handle any reasonable ftp request however the ftp user who sends a file to an ibm for use there may need to specify local file system parameters which are not derivable from any of the existing ftp commands in designing an ftp server implementation for ccn for example we first tried to handle the mapping problem by choosing a possibly different default mapping for each combination of ftp parameters type mode and structure we hoped that if a user chose reasonable or suitable ftp parameters for a particular case e g ascii stream record for source programs and image block record for load modules then the right os file mapping would result we were forced to abandon this approach however because of the following arguments some user ftp s probably may not implement all ftp type mode structure combinations though they ought to some user ftp s may not give the user full or convenient control over his type mode structure indeed the mode should be chosen on grounds of efficiency not end use there weren t enough logically distinct combinations of ftp parameters the result would have been a set of hard to remember rules for sending files to ccn for use here some common cases require non invertible transformations on the data for example most ibm language processors i e compilers accept only fixed length records of surprise bytes each i e literal card images such ugly and logically unnecessary implementation stupidities in os are a fact of life now if a ftp user innocently sent a data file to ccn with the particular type mode combination which defaulted to card images he would find his records truncated to bytes that would be downright unfriendly thus the ccn server ftp would have to choose between being useful or being friendly we decided upon the following strategy the defaults will be friendly we will accept any ftp type mode structure and store it invertibly except print files however the user who uses only these defaults will probably find he has to later run a utility under tso to reformat the data braden page rfc comments on file transfer protocol february we will provide some mnmonic keywords associated with stor commands to choose the proper disk mapping for example if he wants to store a fortran source file for compilation at ccn the user will need only to specify source or fort to get reasonable and workable os file system parameters in addition we will provide fairly complete dd parameters for the sophisticated user the syntax and semantics of these keywords and parameters will be as close as possible to the corresponding tso commands full details will be published as soon as the implementation is working all of this discussion leads to a general protocol question how should such host dependent information appear within ftp hathaway used the allo command see rfc p ccn on the other hand feels that such information belongs in the only part of ftp syntax which is already host dependent the pathname so ccn plans to allow a generalized pathname in a stor command a full or partial file name optionally followed by one or keywords or keyword parameters separated by commas a third possible solution might be for the user to precede his store command by a server dependent data set creation command using hathaway s proposed srvr command the data set creation command could then have all the parameters necessary for the server file system ccn might change to this approach if srvr is adopted and if people find the generalized pathname objectionable or unworkable for another interesting example of host dependent problems see hathaway s discussion of his dele command in rfc pp braden page rfc comments on file transfer protocol february mode stream text block stream text block type ascii image local byte ebcdi ascii asa vrc ebcdic asa vrc key excluded case this rfc was put into machine readable form for entry into the online rfc archives by helene morin via genie braden page 