 network working group john davidson request for comments university of hawaii nic will crowther categories remote controlled echoing satellite telnet bbn references rfc s john mcconnell illiac jon postel ucla june an echoing strategy for satellite links i introduction as mentioned in rfc satellite considerations by jon postel those interactive systems which provide echoing for full duplex terminals over the arpanet become more awkward to use as transmission delays increase the reason of course is that a character s round trip time is added to the inherent echo delay of the server with the result that the terminal echoing appears extremely sluggish for a terminal separated from its server by a single satellite link the delay will be such that even if echoing at the server were instantaneous the latency between keying and printing of an input character will be nearly half a second if in addition the character is routed thru a portion of the surface net the delay will be of course increase it is estimated that echo delays of at least one second will not be uncommon this document describes a strategy which will eliminate the delay associated with simple echoing and allow the transmission delay to be hidden in the cost of computation only this scheme is proposed as an optional addition to existing user telnets its use requires the explicit support of a cooperating server process ii standard echo strategy echoing for locally connected full duplex terminals is normally provided at the server by a resident system task called the e g terminal handler the terminal handler echoes on a one for one or simple replacement basis and buffers all typed input on behalf of the user process to let the user process operate most efficiently the terminal handler should collect characters until a complete command or parameter or whatever has been typed then presumably the process can do some significant computing since the user process davidson page rfc an echoing strategy for satellite links june knows the syntax of the string it expects it can specify to the terminal handler those characters which delimit completed parameters such characters are called wakeup characters since the user process is awakened as they are echoed certain commands keyed by the user will require an output response from the process in order that the typed commands be followed by its response and be separated from succeeding commands the terminal handler must suspend echoing of user type ahead it can resume echoing starting for type ahead with the unechoed characters in the buffer as soon as the process has stated implicitly or explicitly that it has completed the output response characters which cause the terminal handler to suspend echoing are called break characters they are specified by the user process based upon the syntax of the expected input normally break characters are also wakeup characters as examples a text editor may gobble up typed english sentences every time a period or question mark is echoed the two characters are wakeup characters only there is no need to suspend echoing in some systems an esc character is used to invoke command recognition the user who types co esc abc esc xyz should see as output copy from file abc to file xyz the esc is both a break and a wakeup the printout should be the same no matter how fast the user types the server must provide a means for each user process to communicate the following to the terminal handler the set of wakeup characters the set of break characters which break characters should and which should not be echoed some break characters such as esc in example should not be echoed completion of an output response whether or not to echo characters not echoing is useful in hide your input applications davidson page rfc an echoing strategy for satellite links june as far as implementation and could be communicated by allowing the user process to specify a bit for an ascii device table with s set for each wakeup character and another table with s set for each break character this approach becomes fairly expensive in terms of core memory as the number of terminals becomes large the system must store these bit tables itself since in most cases the user process will not be in core while echoing is being done by the terminal handler to reduce the storage requirements the system can make known to all its programmers a limited number say of supported break characters for his process from for example a alphanumeric characters b punctuation characters c echoable control characters including the bell and cr etc or d non echoable control characters control c etc by specifying in a system call which break set s should be used this requires no more than bits of system storage per terminal and a single table to identify the set s to which each of the possible ascii characters belongs for the user process to communicate to the terminal handler which break characters should and which should not have echoed the process can specify another bit field with s set for those break classes whose members should be echoed for the classes above only bits would be required since members of class d are defined to be non echoable to communicate the completion of an output response the user process could issue an explicit system call or the terminal handler could assume completion when the user process requests input of the first character following the break hide your input would be communicated by a system call which specifies either a break on every character and don t echo any break characters or for example b don t echo anything and break on punctuation or any control character for an alphanumeric password depending on the syntax of the expression to be hidden davidson page rfc an echoing strategy for satellite links june iii definitions several new terms need to be defined some of which are direct extensions of the terms used in the standard echo strategy description there is no reason to insist that the four buffers presented all be implemented as individual constructs they are logically separated for clarity in the discussions which follow remote controlled echoing rce this is the name for the echo strategy described in this document echoing will be controlled by the remote server but performed by the user telnet input buffer this is a logical buffer used by a user telnet to hold characters in sequence as they are received from the terminal keyboard after they have been converted to nvt characters transmission buffer this is a logical buffer used by a user telnet to hold nvt characters which have been typed but have not yet been transmitted to the server output buffer this is a logical buffer used by a user telnet to hold the nvt characters received from the server print buffer this is a logical buffer residing in the user telnet from which characters will be sent in sequence to the terminal printer the output buffer contains nvt characters which may have to be converted to characters employed by the actual terminal break classes the possible bit ascii characters employed by the network virtual terminal can be partitioned into several quasi equivalence classes for example alphabetic numeric punctuation characters etc these classes can be defined so that each character is a member of at least one class although it may belong to more than one davidson page rfc an echoing strategy for satellite links june a server process may indicate to a user telnet that certain of these classes or all or none are to be considered break classes that is a break class is an equivalence class which is of special significance to the server process in terms of the discussion of section ii the server recognized equivalence classes any combination of which might be designated as break class by a particular process the rce implementation will have more than equivalence classes perhaps as many as to provide more flexibility in the choice of break character sets break action two break actions are possible a break character encountered in the input buffer is moved to the print buffer at the appropriate time or a break character encountered in the input buffer is not moved to the print buffer the server process will specify which break action should be followed the two actions correspond to echoing or not echoing the break character iv description this description is written in terms of the tip which of course embodies a user telnet remote controlled echoing is an attempt to remove the echo responsibility from the terminal handler and push it off into the tip wakeup processing is still handled at the server the process interface system calls etc to the server s terminal handler need not change but the abbreviated terminal handler actually a server telnet must find a way to relay the process echo requirements to the tip it does this with telnet commands and control information system calls and echo parameters break classes etc peculiar to a particular serving host must be interpreted by the server telnet commands character flow refer to figure a character received from a full duplex terminal will be converted to its nvt equivalent and placed in both the transmission and the input buffers the tip s transmission strategy determines when it will be removed from the transmission buffer the server s rce control commands dictate davidson page rfc an echoing strategy for satellite links june when it will be removed from the input buffer a character received from the server will be placed in the output buffer of the three labeled paths discard echo and output exactly one is enabled at all times rce commands dictate which one thus characters may discard be removed in sequence from the input buffer and discarded echo be removed in sequence from the input buffer and placed in the print buffer of output be removed in sequence from the output buffer and placed in the print buffer from the print buffer they will be converted from nvt characters and be immediately send to the terminal s printer terminal keyboard convert to nvt characters to server transmission buffer from server v v input buffer output buffer discard echo output v v v to oblivion print buffer convert from nvt characters v to terminal printer figure character flow within the tip davidson page rfc an echoing strategy for satellite links june commands server to host the following are the proposed telnet commands sent by the server process to the tip commands thru should not be sent if rce is not being used use remote controlled echoing the server asks the tip to employ the echo strategy described in this document the tip can respond either yes i will use it or no it is suggested that the response yes also be use rce to eliminate race conditions set break action this is actually commands the server can set the break action to echo or not echo a break character set break classes this command specifies those equivalence classes which are to be considered break classes it will be a two bit byte command note the envisioned implementation requires the tip to have a table with one entry per ascii character each entry is formatted with one bit position for each equivalence class and a bit is set or reset according as the given character is or is not a member of that class the server sends a set break classes command st byte followed by a formatted control word nd byte to the tip with bit positions set for those equivalence classes which represent break classes for the server process when a virtual character is taken from the input buffer the tip does a table look up indexed by the character if a simple anding of the table entry with the terminal s control word yields a non zero result a break was received receipt of a break character enables the output path move to break mtb this command directs the tip to move characters in sequence from the input buffer to the print buffer until a break character is encountered the break character will be moved or discarded depending on the previously specified break action essentially mtb enables the echo path delete to break dtb this command directs the tip to move characters in sequence from the input buffer and discard them until a break character is encountered the break character will also be discarded this provides a convenient mechanism for hiding a user s input dtb davidson page rfc an echoing strategy for satellite links june enables the discard path commands user to server the user may send via tip a request to the server process requesting that it use remote controlled echoing to which the server must respond yes or no general operation very simply the remote controlled echoing strategy works as follows the server telnet will tell the tip to essentially echo a message print the process response to that message echo the next message print the response to that message etc to effect an orderly listing of inputs and responses much as would be imposed when using a half duplex device the actual interaction depends on the control commands when a terminal serving process is invoked on behalf of a tip user the server telnet will send the use rce command the tip will respond yes then the server telnet will send the set break action and set break classes commands to properly reflect the break strategy requested by the terminal serving process lastly the server telnet will send an mtb command this enables the echo path the tip removes characters from the input buffer and places them in the print buffer when it encounters a break character it performs the break action specified and enables the output path characters are then moved in sequence from the output buffer to the print buffer when an mtb or dtb is encountered it is discarded and the echo discard path is enabled etcetera the server telnet may change the break action or break classes after an interaction but should normally do so prior to sending the mtb or dtb commands it should only send an mtb dtb after all process output from the previous message has been sent davidson page rfc an echoing strategy for satellite links june why does this work the rce strategy described above produces the correct result at the user s terminal because it is in essence the same scheme used by the terminal handler which normally provides the echoing at the serving site initially the characters are echoed as they are typed then a break character is keyed echoing is suspended if the process produces any output response it is printed before echoing of subsequent input echoing of the next command begins if there is type ahead with the characters in the input buffer and even if the input buffer is emptied immediate echoing of keyed input from the terminal is provided since the echo path remains enabled up to a break an example in the following we assume all break characters are also wakeup characters and carelessly treat the two interchangeably suppose a tip user attempts to login to a remote server with the properly formatted message log name password cr and that the server telnet has requested the use of rce presuming that the break and wakeup characters sets are appropriately defined to include space and cr and that the break action specifies they should be echoed the primary sequence of rce commands which will drive the tip to produce the correct printout at the user s terminal is mtb to print log and since the space is a break character mtb to print name dtb to delete password cr see section vi number and perhaps a message followed by mtb to reenable the echo path we investigate in some detail how interaction at the process server telnet interface causes these commands to be send to the tip when the exec is invoked it issues a system call to set its break classes the server telnet interprets the system call in terms of the classes supported by rce and sends the appropriate two byte set break classes sbc command to the tip a space is among the characters of the break set davidson page rfc an echoing strategy for satellite links june the exec asks for input so the server telnet send mtb above we presume the exec blocks until some input is available the exec is awakened when the first space arrives it recognizes the log command to be a call upon the login subsystem which it promptly invokes the login process issues a system call to set its break classes this time both space and cr are included and as before the server telnet forwards the command as an sbc then it asks for input so the server telnet sends mtb above and blocks until the second space arrives when the login process has verified the existence of a user with name name it issues a system call to suppress printing of the next parameter the password in compliance the server telnet sends dtb above once the password has been examined and verified a message like cr lf login completed cr lf can be sent followed by a request for input the server telnet thus forwards an mtb above and the sequence is completed another example suppose in the above example the user had typed log name cr when the login process regained control it would have noted that the break was a cr instead of a space it then could have issued lf password which the server telnet would follow when login requests print suppression with dtb when the tip had finished its output the discard path would be enabled and the user s terminal would have printed log name cr password with the cursor positioned just after the the tip will hide the characters of the password davidson page rfc an echoing strategy for satellite links june another example suppose a user were using a text editor text to create a source file of english sentences the text subprocess might allow only non formatting control characters e g control c as break characters the rce strategy would allow the user to receive immediate echoing for all his input until he typed such a control character v discussion the remote controlled echoing strategy is designed to provide echoing for a full duplex terminal as if it were locally connected to its server the effect of the long transmission delays will only be evident as an increase in the processing performed at a break only in the most interactive systems will such a delay be consistently noticeable for example if a user invokes a long fortran compilation the fact that its start is delayed for half a second will not normally be evident furthermore users who are able to type several messages ahead may only notice a processing delay as a result of the first break interaction both transmission and processing of successive messages may occur during the printing of echoes and responses to previous messages transmission considerations in the standard echoing scheme characters are buffered at the same server as they are keyed but the user process does not see them until a wakeup character has been typed this means a tip using rce could buffer characters in the transmission buffer until a wakeup occurs and then send off the whole bunch unfortunately we have chosen for simplicity to keep all knowledge of wakeup characters at the serving site this means that the tip may buffer beyond a wakeup if it is not also a break and delay the process from doing some useful work however since in this case no output is expected from the process no noticeable delay is visible to the user except that the next break interaction may take a little longer if the tip chooses to buffer input before transmission it will transmit at least at every break character the server should be able to instruct the tip to transmit more often if it is appropriate davidson page rfc an echoing strategy for satellite links june an example conversational output linking is an example where transmission strategy is separate from the break and wakeup strategies transmission should occur on every character so that the character can be promptly printed at each linked terminal but no break or wakeup need occur until a special escape character is typed this reawakens the exec for example conversational output linking also introduces another funny unsolicited output what happens when the echo or discard path is enabled but the input buffer is empty i e immediate echoing is occurring and something arrives in the output buffer this something cannot be a response to a previously keyed command or the echo path would be disabled this proof is left to the reader it is most likely a system message like cr lf system will go down in minutes cr lf or a character arriving from another linked terminal since such output does not fit neatly into our rce scheme the following kludge is proposed unsolicited output should cause the output path to be enabled the occurrence of either an mtb dtb or empty output buffer will reenable the echo discard path iv orthogonal issues several other mechanisms may reasonably be incorporated within this proposed addition to telnet the problems which need some further discussion include some means should be provided for the server to clear the input transmission print and output buffers some means should be provided for the user to immediately clear the output buffer i e suppress printing of lengthy output the server may want to ask about the number of characters remaining to be printed a special tag character may be required to note where clearing of the input buffer occurred the tip s transmission strategy should be specifiable by the server perhaps a set wakeup classes command should be implemented davidson page rfc an echoing strategy for satellite links june the server should be able to cause the tip to break on the n th input character regardless of whatever a break character has been encountered should the tip or the server be responsible for properly echoing a formatting control character such as a tab the proper equivalence classes of ascii characters have to be finalized how should a cr be echoed should one for one echo replacement e g for esc or multi character substitution e g a for control a be provided by the tip the proposed dtb command directs the tip to also discard the delimiting break character should the break character discard rather be dependent on setting the break action to don t echo before sending the dtb several of these issues will be addressed in rfc vii conclusion this document has presented a proposed optional addition to the user telnet the next step is to perform some simulations and to incorporate rce into an experimental version of telnet no recommendation is made that the current telnet be discarded for example rce should not be used for those half duplex devices which perform their own echoing if rce is adopted as an alternate means of echoing changes to those telnets choosing not to implement it should be minimal switching from rce to the current echo mechanism is an immediate result of either user or server sending a you echo or i ll echo much of the machinery required to implement rce already exists at the interface between the server process and its terminal handler or server telnet this means that no server process need be changed but that the process means of specifying break classes break actions and echoing conventions must be interpreted by the terminal handler and reissued to the tip in terms of the corresponding rce commands this rfc was put into machine readable form for entry into the online rfc archives by erik j verbruggen davidson page 