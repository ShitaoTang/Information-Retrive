 network working group r watson request for comments sri arc nic july some factors which a network graphics protocol must consider after reading some of the rfc s on a network graphics protocol it seems that many are not providing general enough mechanisms to handle attention handling picture structure and other higher level processes involved in interactive graphics therefore for what it is worth i am sending out these rough introductory notes which contain ideas that i think any network graphics protocol must come to grips with the network graphics protocol should allow one to operate the most sophisticated system with more general data structures and concepts than those described in these notes and allow very simple systems to function also introduction it is our contention that if computer graphics is to be widely useful the graphics terminals must be just another type of terminal on a timesharing system with minimal special privileges in these brief notes we outline the basic features which we feel must be available in a graphics support package to allow easy interactive graphics application programming if one examines the types of tasks in industry government and universities which can avail themselves of timesharing support from graphics consoles one can estimate that the large majority can effectively utilize quite simple terminals such as those employing storage tubes i would estimate of the required terminals to fall in this class another of terminals may require higher response and some simple realtime picture movement thus requiring simple refresh displays the remainder of terminals are needed for high payout tasks requiring all the picture processing power one can make available in this talk we are not considering support for this latter class of applications main assumptions and requirements for system design the main assumptions and requirements underlying the interactive graphics are the following watson page rfc some factors which a network graphics july the user of the graphics terminal should be just another timesharing system user the graphics software support should interface to existing timesharing programs the software support should allow technicians engineers scientist and business analysts as well as professional programmers to easily create applications using a graphic terminal the software support should easily allow use of new terminals and types of terminals as they come on the market the software support should be expandable as experience indicates new facilities are required the software support should be portable from one timesharing service to another some form of hardcopy should be available multilevel modular approach to system design if one wants to create as system which is easy to use by inexperienced programmers and ultimately non programmers one needs to provide powerful problem oriented aids to program writing one has to start with the primitive machine language used to command the graphics system hardware and build upward the philosophy of design chosen is the one becoming more common in the computer industry which is to design increasingly more powerful levels of programming support each of which interfaces to its surrounding levels and builds on the lower levels it is important to try to design these levels more or less at the same time so that the experience with each will feed back on the designs of the others before they are frozen and difficult to change one can recognize five basic levels the basic system level this level provides facilities for use of the terminal by the assembly language programmers watson page rfc some factors which a network graphics july the problem programming language level this level of support provides powerful facilities for interactive graphics programming from the commonly used higher level programming languages the picture editor or drawing system this level of support allows pictures to be drawn and linkage to these pictures and application programs data management support for interactive programming this level of support is to provide facilities to aid creation and manipulation of data structures relating data associated with the pictures and the application the application program level a review of terminal hardware characteristics of concern to the users there are two basic kinds of general purpose cathode ray tube display systems available on the present market within each class there are alternate forms and techniques of implementation which we do not discuss here one type is called a refresh display the other type is called a storage tube display the refresh display must keep repainting the picture on the screen at rates of from times per second commands which instruct the system how to draw the picture are stored in a memory the storage tube display on the other hand through its internal method of construction can maintain on the face of the display a picture for practical purposes indefinitely once drawn refreshed displays there are limits to how much information can be drawn on the face of refreshed display before the time required to paint it forces the refresh rate below a critical value and the picture appears to flicker this quantity of information is a function of the type of phosphor on the tube face the speed of display system in drawing lines and characters and the ambient light level in the room refresh display systems range in cost upwards from to several hundred thousand dollars refresh displays because the picture can be changed every few milliseconds by simply altering its command list often called a display file or display buffer allow the picture parts to be moved on the face of the screen either under operator control or computer control objects on the screen can be selectively erased without affecting other objects on the screen watson page rfc some factors which a network graphics july these characteristics make refreshed displays suitable for a wide range of applications storage tube displays storage tube based displays can display a large amount of information without a flicker and generally cost under present systems suffer from some limitations however they cannot be selectively erased if an object is to be moved or deleted from the screen the entire screen must be erased and then the new picture can be redrawn because this type of display generally operates over a communication line the speed of the line may seriously restrict the amount of interaction if much erasing and redrawing is required the graphics software concepts to be described can be used with both a storage tube and refreshed display although some features are only appropriate to the refreshed type of display the important point is that new storage tube technologies insure that this class of terminal will be with us a long time input devices it is necessary to allow a console user to communicate with the graphics system this is done through a keyboard and through specialized graphic input devices the light pen the tablet the sri mouse and the joy stick these latter devices enable a console user to point to vectors and characters displayed on the crt and to input position information to the graphics system comparison of the graphics input devices analog comparitors the joy stick mouse and tablet are similar in that they both generate a two dimensional position address without the aid of the display processor but cannot be directly used to identify displayed objects the light pen display processor hardware combination and its associated software on the other hand can easily sense and identify displayed vectors and characters but does not generate directly any position data a tracking cross program is used to obtain the position data for the light pen to obtain the pointing capability for the joy stick mouse and tablet we can use a pair of analog comparitors which generate interrupts when the beam is drawn on the crt lies within a rectangular viewing window in much the same way that the light watson page rfc some factors which a network graphics july pen generates interrupts when a beam is drawn under its circular viewing area these comparitors sense the x and y axis drive voltages of the display analog bus a comparator will generate an output signal when the drive voltage is between two limits which may be set using special display processor commands when both comparitors generate a signal simultaneously the output voltages on the analog buss correspond to a beam position within the rectangular viewing window the position of viewing window is set based on the position of the pen mouse or joy stick we can also use software to simulate the effect of hardware comparators hardware comparators cannot be use with storage tube displays and therefore a software simulation is required this simulation is discussed later in these notes the light pen can be used only with a refreshed display the other types of devices can be used with present storage tube displays and refreshed displays they are used with storage tube displays which have hardware which produces on the screen a dot cross or other cursor indicating the x y position of the device the reason one can move this cursor around it that the cursor is created using special techniques to avoid its storing on the screen user software requirements the user requirements on a timesharing system based interactive graphics system are the following the user should have available a language for creating a computer representation of the picture to be displayed this language should allow more complex pictures to be built up from simpler structures the computer representation of the picture must allow easy identification of picture parts when pointed at or picked or hit with graphical input devices such as light pen electronic pen tablet joy stick sri mouse or other supplying x y information the computer representation of the picture must allow linking of picture parts with data about these parts appropriate to the application using the terminal there should be an appropriate data management system for use with interactive application programming watson page rfc some factors which a network graphics july there must be some way of communicating events taking place at the terminal in real time such as picking objects with the light pen with the application program running in the timesharing system the user should be able to save and restore pictures from one console session to the next if possible the user should be able to use the display as a stand alone terminal or in conjunction with a teletype or other typewriter terminal the user should be able to do some graphic programming by drawing directly at the console the choice of an appropriate data structure for picture representation simplifies the handling of requirements one to five it is this data structure that we consider now in more detail picture related structures if a picture displayed on the console had meaning only in the physical position of its lines and characters the system would be little more effective than an easily erased piece of paper to significantly enhance the capabilities of the system we must be able to express relations between displayed entities a line is much more than just a line when it represents a boundary or a part of some more complex unit such units in turn may be related in a similar way to higher level units furthermore we may wish to create picture elements that may be used repeatedly so that a change in the one master copy will be reflected in every use of that copy to illustrate the usefulness of this picture subpicture relationship we shall consider the three houses of figure while the two types of houses differ in appearance it is obvious that they have picture elements that could be drawn by a designer of prefabricated houses and that the designer wished to incorporate a new standard window unit into all houses the use of conventional pencil and paper techniques would require that he redraw or overlay each window on his diagram to reflect the changed component if the window were instead drawn by the graphics system within a common subroutine only that one master copy would have to be modified in order to change the appearance of every reference to that kind of window on the diagram watson page rfc some factors which a network graphics july nodes and branches to facilitate the discussion we will introduce the terms node and branch a node is a form of picture subroutine that may cause the display of lines and characters and may also call other nodes the subroutine call is called a branch nodes may also be thought of as representing pictures or subpictures and the branches to these nodes as uses or instances of these subpictures directed graph structure the nodes and branches form a directed graph the branches contain positioning information indicating the beam location to be used by the called node this location is relative to the position of the node in which the branch is made this use of relative beam positions allows the user of the system to create subroutine structures that make multiple branches to common nodes branches may also set other display parameters such as intensity and character size a subroutine calling structure appropriate to the requirements of our hypothetical designer is shown schematically in figure nodes are shown as circles and branches are shown as connecting lines the picture of the house is composed of wall unit and roof subpictures the wall unit is in turn composed of subpictures node and branch display parameters branches may contain the setting of parameters which will be in effect when the called node is executed the parameters which may be set are the beam position to be used relative to the current beam position i e a displacement value intensity character size line type visibility the display of vectors and characters may be suppressed hitablility whether or not vectors and text may be viewed by devices such as the light pen and blinking coding within nodes may modify only the parameters controlling position intensity character size and line type to be used by subsequent display coding or branches it is not necessary that a node or branch specify every parameter for those parameters other than position the system allows a don t care option the parameter setting in effect when the node or branch is executed will be retained and used in this case watson page rfc some factors which a network graphics july identification of graphic entities with graphic input devices structural hits a console operator or application program may modify add or delete branches to any of the nodes as well as add new nodes to allow a console operator to manipulate any branch in such a structure we have implemented a structural hit identification scheme to illustrate the following discussion we refer the reader to figures and a viewing device such as a light pen can respond only to the individual vectors or characters displayed on the screen at the time a vector is drawn under the viewing area of the light pen an interrupt is generated and if enabled will be sent to the central computer even though the same node is used to display the eight windows in the diagram of figure we can tell which window and house is being pointed to by examining the sequence of branches taken to arrive at the window displayed at the time of interrupt if the console user points to the right hand window of the middle house of figure marked with an asterisk an examination of the subroutine return addresses in the push down stack would show that the current window node had been arrived at via the dotted line path shown on the network of figure there remains the question are we pointing at a window at a wall at the house or at all three houses the location of this structural hit depends on how many branches are counted in examination of the return addresses before one stops to consider to which branch that return jump points this is analogous to counting a fixed number of levels from the ends of the graph structure this number of jumps is set using reserved keys on the keyboard one incrementing and the other decrementing the limit by manipulating these keys and pointing to various displayed objects with the light pen it is possible to point to any branch in the network of subroutine calls all information concerning the path in the node branch network taken to arrive at any displayable coding is contained in a push down stack return jumps are stored in the stack by the subroutine calls to nodes these jumps when executed will return the processor to the next instruction after the call a greatly simplified version of the display coding used to generate the picture and tree of figures and is shown in figure the labels a through d on the diagram represent the watson page rfc some factors which a network graphics july address of the subroutine calls which cause the display of the subpicture hit by the viewing device in this case the right hand window of the second house the returns from the called subroutines are stored in the push down stack as jumps to the location following the calls the routine return would merely execute pop instructions which ultimately will cause the execution of a jump instruction previously placed in the stack by the calling branch thus returning control to the calling routine the stack is shown in the condition at the time of the hit on the right hand window of the middle house note that by counting jumps upward downward in the diagram in the memory containing the stack we will arrive at the jump pointing to a structural hit at b in figure the call to model console operator feedback the console operator must be informed of where he is pointing in the network of nodes and branches this is accomplished by flashing all displayable coding below the structurally hit branch when a vector or character is viewed this flashing is a doubling of the intensity at to cycles per second in addition a list of the names of all nodes and branches taken to arrive at the vector or character viewed is displayed in a corner of the screen the name of the branch selected is intensified somewhat brighter than the other names generating an attention after the operator has confirmed the correctness of his choice he need only terminate the view in order to generate an attention on the desired branch this is done by releasing the button on the light pen or lifting the pen from the tablet a button on the mouse will perform the same function if the structural hit is not correct then the operator could move the viewing device to a new area a termination of the view on a blank area of the screen will result in the generation of a null attention this attention returns only position data no structural data is generated the significance of this attention is determined by the application program the above discussion assumed a refreshed display and use of a light pen but it greatly simplifies interactive graphics programming if the above concepts can be implemented no matter what type of display or graphical input device is being used this in fact can be accomplished as discussed later watson page rfc some factors which a network graphics july the graphics language for the purpose of discussion we assume that the graphics language statements are a set of subroutine calls although a more sophisticated syntax could be imbedded in the host programming language the statements required are subroutine calls for creation and manipulation of the picture subpicture data structure subroutine calls to generate displayed pictures and picture parts such as lines and characters subroutine calls to input information about events or attentions occurring in real time at the console subroutine calls to manipulate picture parameters such as line type solid dashed dotted etc brightness character size and so forth subroutine calls to perform utility functions such as saving and restoring pictures from disk files initiating the display and so forth naming a number of different naming conventions are required to meet system and application programmer needs the display pointer nodes and branches in the system are named by assigning an integer or array location as an argument in the call used to create them the system places in these variables a number which points to the physical location of the branch or node position in the picture subpicture data structure we call this name the display pointer as long as the user does not change the contents of these variables he can refer to particular nodes or branches in various subroutines by use of these integer variables as arguments in other words to the user the name of a picture or subpicture can be thought of as the variable used at the time of its creation such a naming scheme is clearly required if pictures or subpictures are to be manipulated by the programmer watson page rfc some factors which a network graphics july the light button code additional identification is useful to the application programmer in order to simplify his programming task a user has no control over the number assigned by the system to a display pointer there are situations in which the user would like to associate a particular known number with a branch one common example is in the use of light buttons a light button is a displayed object that the user wants to be able to point at in order to command the controlling application program to do something a light button is commonly a string of characters forming an english word or words but could be any picture when the user picks or hits the light button information identifying the object must be transmitted to the timesharing application program the program must then branch to an appropriate statement or subroutine to perform the operations required to execute the command the display pointer uniquely identifies the object hit but because its value is not under the programmers control writing the code necessary to test it against the various display pointers considered legitimate to be hit at this point in the program is tedious if however the application programmer knew that at this point only objects with identification numbers were legitimate to be hit then testing to see that one was in this range and branching by use of a computed goto simplifies the programming of flow of control often one does not need unique identification of an object but wants to perform a certain action if any object in a class of objects is hit the above need for identification is satisfied by allowing the application programmer the ability to assign a number not necessarily unique to a branch this number is called the light button code this code can be used in any way the programmer desires but is most commonly used as its name implies as a code identifying light buttons this number is sent to the application program along with the display pointer of the object hit on the screen with a graphical input device the back pointer we indicated earlier that it is required in interactive graphic programming to be able to associate application oriented data with picture and subpicture objects on the screen the data may be stored in many kinds of data structures depending on the nature of the application examples being arrays lists trees etc we meet the need by associating with each branch one word which could contain a pointer to the appropriate spot in the application data structure containing the data associated with watson page rfc some factors which a network graphics july the branch we call this word the back pointer the application programmer can in fact store any code he desires in this word and use it in any way desired but its common use as a pointer back into a data base in the application program dictated its name for example consider an application which would allow a chemical engineer to draw a chemical flow sheet on the screen and then input this flow sheet into a process calculation system there will be various symbol pictures on the screen representing basic process units such as heat exchangers mixers columns and so forth that can be copied and positioned on the screen these units will have to be connected together by streams the units and the streams will have names and data associated with them describing their contents and properties further the node branch structure while visually indicating to the user what units are connected together and how does not necessarily have the connecting information in a form easily handled by the application program the continuity is best represented by a data structure using simple list processing in which each unit and stream has a block of cells associated with it containing data for it and pointers containing the connectivity information when a branch is created to position and display a unit it will contain in the back pointer a pointer to the block of data associated with it the block of data will probably contain the display pointer for the associated branch so that one can go from the picture to the data block or from the data block to the picture for example one may point at a unit for the purpose of deleting it given the back pointer of the unit hit one can find its associated block and return that block to free space one can then follow the appropriate chain of pointers to the blocks for the streams connected to the unit in these blocks one has the display pointers for the branches displaying the stream and can then delete it from the node branch structure thus making it disappear from the screen an additional form of name is to allow the programmer to store an alphanumeric string with each branch or node this form of name is not required for most applications but can be useful with the picture editor to review each node and branch has associated with it a unique identifier named by the user and called the display pointer its value is assigned by the system each branch has two additional pieces of information which can be assigned to it by the programmer called the light button code and back pointer watson page rfc some factors which a network graphics july given a display pointer for a branch the programmer can obtain the light button code or the back pointer for the branch given a light button code or the back pointer the programmer can obtain a display pointer for a branch with such a code this display pointer may not be unique if several branches have the same light button code or back pointer the above naming and identification inventions have proven to be easy to understand and yet completely general and easy to use coordinate systems we now consider the question of a coordinate system within which to describe picture position the actual display generation hardware in a terminal has a fixed coordinate system commonly by units on a fixed size screen with the origin in the left hand corner or center on the screen ultimately the user wants to work on a virtual screen much larger than the hardware screen and wants to consider the hardware screen as a window that he can move around to view this virtual screen further pictures are to be capable of being constructed out of subpictures as in the example of figures and to be able to accomplish the latter and allow future expansion to allow the former the following coordinate system conventions are used each node has its own coordinate system when a node a is created the picture drawing crt beam is assumed by the programmer to be at the origin of the node s coordinate system when a node is used within a node b by use of a branch the positioning of node a is relative to the beam position in the coordinate system of node b all nodes are positioned relative to each other by x y positioners in the corresponding branches when a picture is actually to be displayed one node is indicated to the system as the initial or universe node this initial node is positioned absolutely on the screen and all other nodes appear relative to this one as specified in the branches pointing to them this scheme is required to give the flexibility and generality required in the picture subpicture tree logical completeness of operation set throughout the system design one should try to follow the philosophy of incorporating a logically complete and consistent set of operations in particular for each call that sets a value there should be another call to fetch the value that is for each operation there is an inverse operation whenever it is meaningful to have one we see a need for a basic system with the calls as primarily primitives one can incorporate calls that could be created by the programmer from other calls when it is watson page rfc some factors which a network graphics july felt that usage would warrant the expansion we would expect a library of higher level routines in the language it is beyond the scope of these notes to go into all the calls required except to indicate a few basic ones for structure creation one needs to be able to create a node or branch delete a branch add a new branch to a node at run time one needs to be able to specify beam movements in nodes and place text in nodes with the normal write format statements of the host programming language this latter point is very important for easy programming one needs to be able to set and test parameters and convert one form of name into others we discuss attention handling in more detail because of its importance in making interactive programming easy attention handling the user sitting at the console is operating in real time while the application program is operating in timesharing time at any point where the user may perform some operation at the console the application program may not be running a mechanism must be created to communicate between the user and the application program the design of this mechanism is very important and must be carefully considered there are many different operations that one might want to provide the user at the console a basic mechanism is discussed which will allow others to be added in the future when the application program gets to a point where it is expecting input from the terminal it issues a call and passes an array as an argument the attention handling mechanism dismisses the program until an event is reported from the console the information passed back to the application is the type of event which occurred and other relevant information for that event on refreshed displays a common input device is the light pen the light pen has a physical field of view of about a inch circle the most common use of the light pen is to point at an object to be hit or picked the logical field of view seen by the user is a branch in the node branch structure the picture drawn by the structure below the branch is blinked to give feedback to the user about what object he is going to hit or operate upon the level in the structure at which the logical view is given can be set under program control or adjusted by the user from the keyboard when the user obtains feedback indicating the correct object is in view he then presses a button on the light pen to watson page rfc some factors which a network graphics july generate an attention he is said to obtain a structural bit at a branch at the level in the node branch structure set by the application program or by himself when the hit occurs appropriate information is then entered into the attention queue as described below the other type of graphical input device commonly in use on both refreshed and non refreshed displays such as electronic pen tablets joy sticks sri mouse etc produce x y position information which is fedback to the screen as some sort of cursor such as a dot or a cross it is difficult if not impossible without special hardware to provide the kind of feedback possible with the light pen but structural hits can be generated by the use of special hardware or software these devices require the application programmer to set the appropriate level for an expected hit the level of a structural hit is counted up from the bottom of the node branch structure a hit at level is the lowest branch presently in view a hit at level is a hit on an individual vector or group of characters only special programs such as a picture editor are likely to obtain hits at level the attention type obtained when one gets a structural hit on a branch returns the following information the information returned in the array is that required by the application program the display pointer the light button code and x y information the x y information returned is not the absolute x y pen position because this would not be of use on this type of hit the x y information returned is the physical beam position just before execution of the branch which was hit if one wants the physical location of the node origin to which the hit branch is connected one executes another call to obtain the branch positioner and adds these values to the corresponding values obtained from the hit given the display pointer one can obtain the back pointer or other parameter values associated with the given branch call the attention type obtained when a hit is generated but no object is in view is now discussed this type of attention is called a null attention it is used frequently to position objects on the screen the only information returned in the array is the absolute screen coordinates of the position on the screen of the graphic input device or cursor this information can be converted into relative information for placement in a branch positioner or for incrementing a branch position when an object is being moved watson page rfc some factors which a network graphics july other calls are required to obtain information about other branches which are related to the one hit and to perform other functions structural hits for storage tube displays the final topic is to consider how to obtain structural hit information using a storage tube display or device which only gives absolute x y screen information the problem is to take an x y coordinate pair and determine if the user is or is not pointing at an object on the screen and if he is which object when a hit is generated with the light pen the display processor halts and the controlling computer can gain access to the return addresses in the push down stack and to the instruction location which generated the line or character causing the hit use of the joy stick mouse or tablet is completely asynchronous with the display for refresh displays and the hit occurs after the drawing has taken place for storage tube systems the brute force approach to the problem would be to simulate execution of the display buffer and calculate some measure of distance between every line and the x y coordinate of the hit this approach would be too time consuming and is not feasible a second approach and one commonly used is to have the programmer define a rectangle surrounding each object on the screen then one determines which rectangle the cursor was in and that determines the object hit this approach requires extra effort by the programmer and only works well if the node branch structure is one level deep there are no diagonal lines as nodes and no objects have overlapping rectangles these severe restrictions eliminates this approach from serious consideration a third approach would be to break the screen into small squares or rectangles of a size such that it is unlikely a line from more than one picture object would pass through the square or rectangle then we would record for each square the display pointer of the lowest level object branch passing through it this approach would require considerable system space and would take much time to determine what rectangles each line passed through the fourth approach and the one we recommend is to split the screen into horizontal and vertical strips when the call to display is given the system makes one pass through the node branch structure and makes a list of the display pointers for the lowest branch having a node with a line or character passing through or in each horizontal or vertical strip watson page rfc some factors which a network graphics july this calculation can be made quickly because the system can easily obtain the start and end points of a line one then can quickly determine which strips the end points fall in as well as the intermediate strips crossed when a hit is generated the x y information is converted to horizontal and vertical strip numbers the display pointers for each of these strips are intersected to see if a common display pointer exists if yes this is the display pointer for the object hit if not then a null hit is generated choice of strip width decreases the probability of multiple hits resulting the above process yields the display pointer of the lowest branch in the tree in view but one may want to obtain information about other higher branches in view this is accomplished by creating not only the strip lists described but by parsing the node branch structure at the same time into a table containing an abbreviated representation of the tree and the screen x y coordinates existing at each branch the strip lists do not actually contain display pointers but pointers back into the parsed representations which has the display pointer x y coordinates and the structure level for each of the branches the parsed representation is a linear list of the branches encountered as the program walks through the node branch graph given the hit at the lowest level one can determine all branches passed through from the top node to the hit branch by an upward search of the graph representation every time a branch is deleted or a new branch is added one needs to modify the screen modify the representations and the strip lists for refresh displays the picture can be changed immediately and the strip lists and representations modified at the time of an attention call for a storage display erasing and redrawing the picture on each deletion can be slow if many deletions are going on and may be unnecessary there are three approaches to performing these functions in storage tube systems erase the screen on each deletion and recompute the picture strip lists and graph representations on each deletion and addition keep a list of each display buffer change and perform erase if necessary and redraw or make an addition when an attention call is encountered this is a feasible approach because it is only at this point that the screen and structural hit information need to be up to date watson page rfc some factors which a network graphics july the third is to allow control of screen changes and other updating by special subroutine call the recommended approach uses a combination of the above adding information to the screen should occur at the time of the new branch call deletions and modifications of the representation and the strip lists occur only at the time of an attention call routines should also be provided to give the programmer control over this redraw mechanism experience with the above mechanism has shown it to be quite fast and not to noticeably degrade response time one minor difficulty has been encountered when a horizontal or vertical line of an object is on the borderline of a strip sometimes this results in a null hit being generated if the cursor is on the wrong side of the borderline a check can be made for this condition and audio feedback can be given to the user with the bell in the terminal to indicate a correct or erroneous hit interface to the timesharing system of a remote minicomputer driven display although the graphic system is locally controlled by a minicomputer the user does not have to worry about the mini application programs are written for the timesharing computer only the graphic system as a whole behaves as a terminal of the timesharing computer this feature is important because no matter how powerful the graphic system is it must be easy to program and use before useful applications can be implemented because no one wants to operate over a communication line one needs to compress the information sent to the remote system this is accomplished by compiling a central node branch structure in the central computer and only sending minimal character strings to the remote computer representing those subroutines calls that need to be compiled into a display buffer in the remote computer for display refresh in other words a smaller remote version of the graphics system resides in the remote minicomputer simple schemes for coordinating the display pointer in the remote and central machine have to be devised conclusion we feel that the above concepts are central to creating an interactive graphics support system for use with a timesharing system the key concepts are those associated with the node branch structure and the structured hit the topics of a picture editor data management system and basic level support are also very important but beyond the scope of this lecture watson page rfc some factors which a network graphics july figures and are available in both ps and pdf versions this rfc was put into machine readable form for entry into the online rfc archives by lorrie shiota watson page 