 network working group a mckenzie request for comments b thomas nic r tomlinson references rfcs bbn tenex nic k pogran mit multics june a note on protocol synch sequences this note is motivated by wayne hathaway s rfc which comments on the interpretation of the telnet synch sequence ins data mark we agree with wayne s observation that the phrase interesting things as it appears and is explained in the telnet protocol document nic is much too imprecise to appear in a protocol specification however we disagree with his proposal that the interpretation of the telnet synch sequence should be redefined hathaway s comments led us to examine the notion of interesting things with respect both to telnet protocol and to protocols built upon it we feel that the definition of the telnet synch sequence in the telnet protocol document is the proper one more important we feel that the potential difficulties with respect to the telnet synch sequence noted in rfc are not the reflection of a telnet design flaw but rather reflect misuse of the telnet synch sequence by higher level protocols in particular ftp that are based on telnet the remainder of this note examines the notion of a synch sequence and suggests an approach to the design of protocols which are to use the telnet protocol as a basis the reason for defining a synch sequence for a protocol is to provide a mechanism by which signals represented as characters that for one reason or another are stuck in the pipeline between the sender and the protocol interpreter can promptly be brought to the attention of the interpreter flow through the pipeline is of course controlled by the receiver the process operating the interpreter may be doing something else at the moment and may not be paying attention to the incoming data stream the sender would like to get the attention of the receiving process to have it read its incoming data stream and take action as directed by the interesting characters in that stream which will in general be protocol commands to accomplish this a synch sequence is transmitted a synch sequence consists of mckenzie et al page rfc a note on protocol synch sequences june an out of band signal which serves to get the attention of the protocol interpreter and an in band marker which serves to mark how much of the data stream is to be processed by the protocol interpreter in response to the out of band signal for the telnet protocol the out of band signal is the ins of host host protocol and the in band marker is the telnet data mark character dm ignoring for the moment the use of telnet as a basis for higher level protocols such as ftp the class of characters interesting to a telnet interpreter is the set of telnet commands including the commands for option negotiation and sub negotiation one might reasonably argue that this class could be enlarged by a server host to include the set of signals of interest to the terminal support software of that particular host for example in case of tenex such a set would include the terminal interrupt characters enabled by the process reading from the telnet connection e g c t etc other hosts such as multics might look only for the telnet commands such as interrupt process ip abort output ao etc whether or not one chooses to consider additional signals as interesting during the processing of a telnet synch sequence should cause the implementer no problem he must treat all telnet commands as interesting by interpreting them he may choose either to ignore such additional signals or to pass them on to the process in either case there is no vagueness since the implementer knows which characters his terminal support software considers interesting the difficulty noted in rfc concerning the vagueness of interesting things occurs when a higher level protocol makes use of the telnet synch sequence to force commands of interest to it through to its interpreter a higher level protocol designed in such a way represents a violation of the protocol layering discipline the telnet synch mechanism is being misused by attempting to give it meaning at two different levels of protocol the problem stems from the fact that in general a increasing number of different higher level protocols can be designed with telnet as a base a telnet interpreter has no way of knowing the higher level protocol interpreter if any to which it is passing characters and therefore can not tell which things are interesting to the higher level protocol interpreter that is just as an ncp should not have to know whether the data it handles is mckenzie et al page rfc a note on protocol synch sequences june for a telnet connection an ftp data connection etc a telnet interpreter should not be required to know the kind of process for which it is handling characters this should in fact result in a simplification of the design and implementation of telnet protocol interpreters this difficulty can be resolved by proper design of protocols that make use of telnet as a base in particular if in such a higher level protocol it is important to be able to force commands through to the protocol interpreter the higher level protocol should include its own synch sequence i e an out of band signal used with an in band data mark the telnet protocol provides the interrupt process character ip for use as an out of band signal a synch sequence for a protocol built upon telnet would be insert the telnet ip control character into the data stream insert the higher level protocol data mark character hdm into the data stream following whatever higher level protocol commands are important at the time receipt of the ip telnet command causes the higher level protocol interpreter to be interrupted enabling it to scan the data stream up to and including the hdm for commands it considers important as an example consider the case of the file transfer protocol rfc and the problem of aborting a file transfer in progress to accomplish such an abort the ftp user process should send the telnet ip character send the telnet sync sequence that is a send the telnet data mark dm b send the host host protocol ins send the ftp abor command and send the ftp data mark character the user or process acting on his behalf must transmit the telnet synch sequence of step above to ensure that the telnet ip gets through to the server s telnet interpreter mckenzie et al page rfc a note on protocol synch sequences june endnotes i e any telnet commands appearing before the data mark are to be interpreted the data mark is to be used to terminate the scan initiated by the ins characters that are not telnet commands may be discarded or passed to the user process as the implementer sees fit we support hathaway s proposal to fully parenthesize sub negotiations further we believe that the closing parenthesis should be a new command rather than a second sb command this will aid the receiver in recovering from errors either in parsing at the receiver or in generation at the transmitter we disagree with his proposal that sub negotiations be discarded when encountered during processing of a telnet synch for ftp such a data mark character has not yet been defined and in fact may not be necessary under the constraint that the ftp command interpreter should look for exactly one command after being interrupted this is consistent with the general command reply orientation of ftp this rfc was put into machine readable form for entry into the online rfc archives by helene morin via genie mckenzie et al page 