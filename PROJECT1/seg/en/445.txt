 network working group g h mealy request for comments harv nic july categories d d data computers data descriptions and access language according to the minutes of the nwg meeting in may rfc it appears that a unified approach to network data management is being proposed to cca the purpose of this paper is to discuss some of the problems involved and to suggest possible avenues of approach toward their resolution parenthetically i believe that a non unified approach leads to even worse problems my main remarks are predicated on a few assumptions and their consequences since some or all may turn out to be wrong it seems appropriate to state them explicitly the steps in the arguments leading from the assumptions to their consequences may appear to be and in fact may be less than obvious they are all of a piece however and revolve around the necessity for doing business with a number of dissimilar host systems while attempting to make it unnecessary for an individual user or user program to know the details of data file organization and representation given this as an objective i believe that the arguments are quite direct assumptions we face the usual set of naming cataloging protection backup etc problems i say this only to dismiss the subject as far as the following is concerned in my estimation these problems and feasible solutions are reasonably well understood our real problem in this area is in reaching agreement on specifics while leaving sufficient ratholes for future expansion files stored will contain arbitrarily complex data objects the organization of any file that is the way its structure is mapped into physical storage by the data computer will normally be unknown by the user healy page rfc data computers july data items in files may be stored in arbitrary representations e g those of the originating user s host rather than that of the data computer or other standard representation access to a file will normally be to some subset of it i e the unit for transmission will usually be part of a file rather than the whole file and access will not necessarily be sequential consequences a method of data description significantly more powerful than now commonly available as with cobol or pl i is required the descriptions must be stored with the files data item representations and storage organizations must be describable the data computer must offer a data reconfiguration service based on use of the data descriptions a representation and organization independent level of discourse must be made available for controlling access data description as it happens the descriptive facilities in ell references and are almost adequate as they stand ell is an extensible language the compiler and interpreter for ell are principal components of a system implemented on the pdp lo at harvard which allows the definition of arbitrary data structures in terms of a few primitive data types bool char int real symbol mode form and routine these data types are of the sort i called generic in reference to the el implementation on the pdp say we would have to add methods to describe a specific representation of int etc and primitive routines to convert between specific representations in the ecl system in which el is embedded there is no rigid distinction between compile time and run time in particular if the arguments and free variables of a routine are evaluable at compile time then the routine is evaluated and the value replaces the call more generally arbitrarily large amounts of a routine being compiled may collapse into values as far as the data computer is concerned this offers the possibility of producing tailor made data reconfiguration programs taking maximum advantage of the data descriptions at compile time rather than using a strictly interpretative mode of operation healy page rfc data computers july access language here i am on less firm ground i will suggest however that some of the ideas of sattley et al reference deserve consideration i will quote from the reference our proposal is a language for describing the transferable features of files in which conventional programming languages e g fortran algol etc can be embedded and from which the information necessary to optimize the use of secondary storage can be easily abstracted this language defines our abstract model of secondary storage in the same way that fortran defined an abstract machine this language should have at least the following features file declarations name the file and the elements in the file and specify the range of forms that the elements can take each file has precisely one named element each file includes the maximum size in number of elements of the file subsets of files can be created by means of grouping declarations such subsets can be nested subsets of files can be named by means of naming declarations such declarations can also name individual elements of the file some form of implicit naming allowing language constructs such as get another triple is included members of a set i e elements in a subset or file subsets in a containing subset or file can be ordered by order declarations some form of arbitrary but fixed ordering allowing language constructs such as get next triple is included the portions of a file transacted with at a point of access is declared the size of this portion can be expressed in absolute or relative terms at each point of access to secondary storage an environment is described or referenced which contains those declarations of types l necessary to define the transaction with secondary healy page rfc data computers july a language with the above features makes no mention of hardware devices but it provides the programmer with the means of defining the algorithm dependent features of his files so that those files might be transferred efficiently from machine to machine in the sattley et al study the notion was that a compiler would take the source program and actually compile the hardware dependent file accessing code in our environment we are concerned with control commands to the data computer e g get next waldo and supplying the data computer with enough information to define a waldo the basic functions would seem to be the same in either case albeit implemented rather differently references wegbreit b the treatment of data types in el technical report division of engineering and applied physics harvard university cambridge massachusetts may wegbreit b the ecl programming system technical report division of engineering and applied physics harvard university cambridge massachusetts april mealy g h another look at data afips conference proceedings vol fall joint computer conference sattley k millstein r and warshall s on program transferability report ca massachusetts computer associates wakefield massachusetts movember this rfc was put into machine readable form for entry into the online rfc archives by larry masinter healy page 