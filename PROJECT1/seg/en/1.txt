 network working group d huff request for comments cwru case nic december updates none obsoletes none network graphics not much has been written about graphics on the arpanet when the volume of the nic collection is considered presently it contains some entries of which only about are on the subject of graphics the reason is probably similar to that given by l g roberts in a forward look nic as the reason that data base sharing or software sharing will not be important topics for several more years the net hasn t been up long enough for interested people to have enough of the facts to know if it is feasible and to think creatively this paper is therefore aimed at bringing together the present state of graphics on the net for the newcomer and attempting to add a little more distance to the ground covered so far i will start with an overview then proceed to briefly describe past work and finally add some of my own thoughts since the net represents a wealth of data processors any or all of which may be used at one time we are not restricted to the configurations most generally found in private installations where there is a main processor and a somewhat less capable machine or perhaps none at all doing the honors as display processor indeed when using the net it might occur that one has a more powerful machine as the display processor than the machine which is running the main job graphics on the net need not be anything like what we know it as now there is of course a greater more diversified mix of graphics equipment that must be considered when designing a standard graphics language and its processor if we wish to drive an aribitrary display from a program such an output language must be quite general but the processor which constructs the actual display list for the target display need not and in fact will not be general rather its only job will be to translate a well defined general language to meet the requirements of one specific graphics terminal attention handling a lately discussed and much worried about topic presents an entirely different problem this time the net may cause more harm than good for the simple reason that now there may be several instead of one in some cases none at all mappings defined to get from the initial display list that the main job process is creating rfc nic to the final display list which interactive devices such as the light pen actually refer to this is a problem which has to be faced and has been solved at many different sites in as many different ways it is likely to give as much trouble as the final concept local processing is in many cases a very simple thing to accomplish when the display terminal is intelligent or even has its own medium or large scale processor which has little or nothing else to do aside from refreshing the display such processing can be simple additions or deletions to the picture which certainly do not require the main job process to accomplish the local processor need only notify the main process of what changes have been made to the display list so that the main copy may be updated the allocation of abilities poses the last problem the lower limit is reached when the local processor is unable to do anything beyond keeping the picture displayed and the upper limit applies to the case when the local processor is more powerful than the main processor and handles all attentions itself now such questions as just which copy of the display list is the master copy who is responsible for seeing that all copies of the list contain the same information and what kind of mappings between display lists are required become the important ones we all seek to answer proposals for network standard graphics started with the idea of a simple interpretable language containing only commands to erase the screen display a string of text move the beam or draw a line or point within a virtual rectangle which is the generalized display screen execute a previously defined subroutine and replace the contents of a subroutine with what follows in the command stream movements within the screen area were defined in terms of fractions of the screen dimensions instead of absolute lengths this proposal was responded to with the suggestion that a graphics standard could not be so restrictive and find wide acceptance the proposal was not expressive enough to handle sophisticated picture manipulations it was recognized that a standard must be able to make use of all graphics hardware present and within the forseeable future the data structure should represent both logical and pictorial structure allow for the definition and manipulation of subpictures and division of the display screen into logical units the proposed standard has now become a general high level language rather than a low level language it was pointed out that all sites need not be able to handle the interpretation of this graphic language but because of the existence of the rest of the net one of the other machines could run the interpreter this is equivalent to a data reconfiguration service such drawing modes as intensity blinking dashed color or stereo should also be expressable by means of a command to set the mode the canonical definition of a character string should be defined since everyone has their own way of displaying text and most of them are rfc nic different it is suggested that the multics convention be used as described by osanna j sahzer j remote terminal character stream processing of multics proceedings sjcc p if in addition to simply displaying graphic information if one wishes to to interact with the picture directly the protocol must include a standard for feedback attention handling as it is being called attentions may not always refer directly to the picture however as in the case of keyboard input which can be handled as any other standard message on the net some graphics processors may also have the capability of handling attentions locally and only need to report the end result to the main process this is the problem of which data structure is most up to date which is considered the master copy and how can the processes be kept in sync the observation is also made that as long as the graphics application program the main process communicates with a pair of graphic device handling routines in a network standard language the system configuration can be arbitrary and any terminal may be attached to any main process the same is of course true of attention handling a set of standards for the transmission of an attention generated by a particular device when developed will allow any graphics terminal to be understood by any other main process a summary of input devices has been given along with typical outputs and the suggestion that each attention message identify the device causing the attention the data which is being supplied and of course the data itself the proposed graphic protocol has become much richer in display types the following list was suggested as basic points lines vectors character strings viewport and window transformations of instances hardware dependent byte streams attention commands the point was also made that special considerations for grey scale devices are needed and four alternate display modes are discussed nic an example of hardware sharing is described in nic it is a protocol for the use of the lds processor at m i t by anyone on the net who has a program for the lds this graphics loader as it is called provides for the execution of programs that have been sent to the pdp at m i t and the return of the data generated when the program is executed the picture is not drawn on a display but since the lds processor can be instructed as to what to do with the coordinates that it generates the graphics loader sets up the processor to write back into core the computed display coordinates these coordinates may now be sent back to the originating site for display or as a debugging aid rfc nic in nic many of these previously discussed points are again brought up but this time under the supposition that a graphics terminal should be just another terminal with minimal special privileges suggestions were also made pertaining to the design of a graphics protocol with particular emphasis on display structure attention handling coordinate systems and the difference between storage tube and refreshed display requirements a specific solution for the handling of tablet input data has been presented nic along with the expression that the graphics protocol should be designed so that non interactive graphics should not be complicated with the requirements imposed by the interactive aspects of the protocol it is pointed out that there are several types of tablet data that can be sent as input to a graphics process four types of data are described they are single shot raw asynchronous raw synchronous and preprocessed data preprocessed data can be smoothed or filtered or thinned using various techniques to make the data more uniform and workable velocities can also be calculated for each point to aid in the interpretation of the data the description of netcrt nic is the first encounter with local processing or lack of it netcrt is a protocol between a central processor and a character display the character display is completely slaved to the central processor and can do no local processing however it can interrupt the processor thus signalling that the user is done typing or wishes to begin typing netcrt tries to maintain good man machine interaction by controlling the state of the terminal i have refrained from commenting on the various proposals as i summarized them because i don t think that it would have been in line with what i am trying to do in this paper i think that there is a need to consider an overall model of the graphic system we are trying to design previous proposals have dealt with some set of details without identifying with a general model producing good ideas for implementation of details but not considering how the whole will fit together thus i would like to propose a model for our graphics system it will contain many protocols and leave many areas to be discussed further but it will provide a starting point from which work can be done along simple lines and yet not exclude the later inclusion of more sophisticated abilities figure shows a block diagram of information flow the process indicates a graphics application program which is running on a computer in the net its associated input and output routines can be thought of as being a set of subroutines loaded with the main process or as separate and running elsewhere serving many users at the other end of the loop are a set of input and output drivers for the display which is being used to display the graphics information the information flowing rfc nic from the process to the display is drawing information for the building and manipulation of pictures the information flowing from the display to the process is attention information the graphic data base associated with the main process is that which is constructed when the picture is being drawn by the process or when the picture is being drawn by local processing and attention messages tell the process what has been done to the picture this data base need not contain more information that the process is willing to work with and in fact need not contain anything if no picture interaction is to be done the graphic data base associated with the display drivers is built by themselves so that the output driver can handle attentions from the display without requiring the main process to be able to do this and for the input driver to use when modifying the picture based on what is actually being displayed the information flowing to and from the main process is the sort which is passed or received as parameters to procedures the input and output routines translate to and from respectively a network standard graphics protocol which is sent out over the net to the input and output display drivers whose responsibility it is to translate the standard message into the appropriate byte stream to drive the display or translate the attention from the display into a network standard message the display is assumed to handle its own refreshing if it requires any so that there will be as little apparent difference between refreshed and non refreshed displays as is possible this model provides for both simplicity of use for those doing simple things and power which is needed for those doing sophisticated interactive graphics it can be used with a minimum of effort and overhead by setting runtime conditions to indicate that no interactive graphics will be done and all associated processing should be skipped while still enabling other processes to do high powered graphics without going to a completely different set of routines and rules due to the existence of two separate data bases which must be kept up to date with each other there are two modes of operating this model for lack of better names let us call them program graphics and local graphics the former indicates that the picture being displayed is constructed by the main process and all input from the user at the display is solicited thus the display data base is only updated after and as a result of action by the main process the latter indicates that the user at the display is directing the construction of a picture by means of function buttons and drawing tools the display data base is updated immediately and the main process is notified of the change so that it may keep up but it does not perform manipulations of the picture unless requested to do so by the display output driver this can be as a result of a request to perform some function that the display input output drivers can do by themselves or a request by the user to have the main process perform a non standard function on the picture rfc nic the main purpose of this design is to allow greatest generality of graphic configurations rather than minimum response time the design for an optimum requires more exact specification of the hardware configuration and the proposed usage since neither of these variables can be known and in fact our attempt at generality keeps us from even guessing very closely at them we must provide intelligent input output drivers that will know how to split the processing load between themselves and the main process as a function of what kind of display they are driving rather than attempting to design in an optimum breakpoint the graphics protocol should specify the format of the messages which are transmitted between the input and output routines and drivers these messages can be divided as previously mentioned according to their direction and content i e drawing messages and attention messages since it is often desired to intermix graphics and text there should be a distinguishing message header for all graphics messages then a byte to specify the type of information contained in the body of the message a count of the bytes in the body and finally the body itself virtually all of the necessary message types have been indicated in the previous rfcs and i will not list them here except to note that attentions now include requests for processing that the drivers could not do to summarize i believe that a simple model is enough to enable the design of both sophisticated interactive graphics and low effort non interactive graphics the primary reason for this is that our major interest is not minimum response but rather maximum configuration mixes there are opportunities to use software sharing and data reconfiguration services when building input output routines and drivers much detailed work remains to be done but with a basic model in sight providing a framework to hang proposed ideas on for evaluation work should be able to proceed more smoothly rfc nic input output routine driver v graphic graphic process data data display base base v output input routine driver figure this rfc was put into machine readable form for entry into the online rfc archives by ian redfern 