 network working group abhay bhushan request for comments mit mac nic july categories d d d obsoletes rfc and the file transfer protocol i introduction the file transfer protocol ftp is a protocol for file transfer betweet hosts including terminal imps on the arpa computer network arpanet the primary function of ftp is to transfer files efficiently and reliably among hosts and to allow the convenient use of remote file storage capabilities the objectives of ftp are to promote sharing of files computer programs and or data fo encourage indirect or implicit via programs use of remote computers to shield a user from variations in file storage systems among hosts and to transfer data reliably and efficiently ftp though usable directly by user at a terminal is designed mainly for use by programs the attempt in this specification is to satisfy the diverse needs of users of maxi hosts mini hosts tips and the datacomputer with a simple elegant and easily implemented protocol design this paper assumes knowledge of the following protocols the host host protocol nic the initial connection protocol nic the telnet protocol nwg rfc nic ii discussion in this section the terminology and the ftp model are discussed the terms defined in this section are only those that have special significance in ftp page the file transfer protocol july a terminology ascii the usascii character set as defined in nic in ftp ascii characters are defined to be the lower half of an eight bit code set i e the most significant bit es zero access controls access controls define users access privileges to the use of a system and to the files in that system access controls are necessary to prevent unauthorized or accidental use of files it is the prerogative of a user ftp process to provide access controls byte size the byte size specified for the transfer of data the data connection is opened with this byte size data connection byte size is not necessarily the byte size in which data is to be stored in a system and may not be related to the structure of data data connection a simplex connection over which data is transferred in a specified byte size mode and type the data transferred may be a part of a file an entire file or a number of files the data connection may be in either direction server to user or user to server data socket the socket on which a user ftp process listens for a data connection eof the end of file conidition that defines the end of a file being transferred eor the end of record condition that defines the end of a record being transferred error recovery a procedure that allows a user to recover form certain errors such as failure of either host system or transfer process in ftp error recovery may involve restarting a file transfer at a given checkpoint ftp commands a set of commands that comprise the control information flowing from the user ftp to the server ftp process page the file transfer protocol july file an ordered set of computer data including programs of arbitrary length uniquely identified by a pathname mode the mode in which data is to be transferred via the data connection the mode defines the data format including eor and eof the transfer modes defined in ftp are described in section iii a nvt the network virtual terminal as defined in the arpanet telnet protocol nvfs the network virtual file system a concept which defines a standard network file system with standard commands and pathname conventions ftp only partially embraces the nfs concept at this time pathname pathname is defined to be the character string which must be input to a file system by a user in order to identify a file pathname normally contains device and or directory names and file name specification ftp does not yet specify a standard pathname convention each user must follow the file naming conventions of hte file systems he wishes to use record a sequential file may be structured as a number of contiguous parts called records record structures are supported by ftp but are not mandatory reply a reply is an acknowledgment positive or negative sent from server to user via the telnet connections in response to ftp commands the general form of a reply is a completion code including error codes followed by an ascii text string the codes are for use by programs and the text is for human users server ftp process a process or set of processes which perform the function of file transfer in cooperation with a user ftp process the server ftp process must interpret and respond to user commands and initiate the data connection page the file transfer protocol july server site a host site wich has a server ftp process server telnet a telnet process which listens on a specified socket for an icp initiated by a user telnet and perform in accordance with the arpanet telnet protocol telnet connections the full duplex communication path between a user telnet and a server telnet the telnet connections are established via the standard arpanet initial connection protocol icp type the data representation type used for data transfer and storage type implies certain transformations between the time of data storage and data transfer the representation types defined in ftp are described in section iii b user a process on behalf of a human being or a human being wishing to obtain file transfer service user site a host site satisfying any of the following conditions the site where a user is located a site where a user ftp process is located a site to which a data connection is made by a server in the normal case the sites defined by and are the same site but nothing in ftp requires that this be so user ftp process a process or set of precesses which perform the function of file transfer in cooperation with a server ftp process the user ftp process initiates the icp via a user telnet initiates ftp commands and listens on the data socket for the data connection in some obvious cases use from tips and other mini hosts a user ftp process will be subsumed under the term user user telnet a telnet process which initiates an icp to a specified server telnet socket and performs in accordance with the arpanet telnet protocol page the file transfer protocol july ii b the ftp model with the above definitions in mind the following model shown in figure may be diagrammed for an ftp service telnet connections file server server user user file systems ftp telnet ftp commands telnet ftp system process process data socket data connection s user notes the data connection may be in either direction the data connection need not exist all of the time the distinctions between user ftp and user telnet and between server ftp and server telnet may not be as clear cut as shown above for example a user telnet may be directly driven by the user figure model for ftp use in the model described in figure the user telnet initiates the telnet connection standard ftp commands are then generated by the user and transmitted to the server site via the telnet connections ftp commands are in ascii in accordance with nvt conventions and the telnet protocol note that commands may be initiated by the user directly through the user telnet or via a user ftp process standard replies are sent from the server to the user in response to the commands over the telnet connections the ftp commands specify the parameters for teh data connection data socket byte size transfer mode and representation type and the nature of file system operation store retrieve append delete etc the user ftp process or its designate should listen on page the file transfer protocol july the specified data socket and it is the server s responsibility to initiate the data connection and data transfer in accordance with the specified data connection parameters it should be noted that the data socket need not be in the same host that initiates the ftp commands via the telnet connection but the user or his user ftp process must ensure a listen on the specified data socket a practical example of such file transfer to third hosts is a maxi host user who may actually be a tip user whishing to transmit a file to or from an i o device attached to a tip it should also be noted that two data connections one for send and the other for receive may exist simultaneously the protocol requires that the telnet connections be open while data transfer is in progress it is the responsibility of the user to close the telnet connections when finished using the ftp service the server may abort data transfer if the telnet connections are closed iii data transfer functions data and files are transferred only via the data connection the data transfer of data is governed by ftp data transfer commands received on the telnet connections the data transfer functions include establishing the data connection to the specified data socket in the specified host using the specified byte size transmitting and receiving data in the specified representation type and transfer mode handling eor and eof conditions and error recovery where applicable iii a establishing data connection the user site shall listen on the specified data socket the ftp request command determines the direction of data transfer and the socket number odd or even which is to be used in establishing the data connection the server on receiving the appropriate store or retrieve request shall initiate the data connection to the specified user data socket in the specified byte size default byte size is bits and send a reply indicating that file transfer may proceed prior to this the server should send a reply indicating the server socket for the data connection the user may use this server socket information to ensure the security of his data transfer the server may send this reply either before of after initiating the data connection the byte size for the data connection is specified by the type ascii is bits or type and byte commands it is not required by the protocol that servers accept all possible byte size the user of various byte size is for efficiency in data transfer and servers may implement only those byte size for which their data transfer is efficient it is however recommended that servers implement at least the byte size of bits page the file transfer protocol july after the data transfer is completed it is the server s responsibility to close the data connection except when the user is sender of data the data connection shall be closed under any of the following conditions server receives an abort command form user eof in stream mode indicated by closing data connection the socket or byte size specification is changed any of the telnet connections are closed an irrecoverable error condition it should be noted that two simultaneous data connections for send and receive may exist it is a server option however to close the data connection after each instance of file transfer iii b data representation and storage data is transferred from a storage device in sending host to a storage device in receiving host often it is necessary to perform certain transformations on the data because data storage representations in the two systems are different for example nvt ascii has different data storage representations in different systems pdp s generally store nvt ascii as five bit ascii characters left justified in a bit word s store nvt ascii as bit ebcdic codes multics stores nvt ascii as four bit characters in a bit word it may desirable to convert characters into the standard nvt ascii representation when transmitting text between disimilar systems the sending and receiving site would have to perform the necessary transformations between the standard representation and their internal representations a different problem in representation arises when transmitting binary data not character codes between host systems with different word length it is not always clear how the sender should send data and the receiver store it for example when transmitting bit bytes from a bit word length system to a bit word length system it may be desirable for reasons of efficiency and usefulness o store the bit bytes right justified in a bit word in the latter system in any case the user should have the option of specifying data representation and transformation functions it should be noted that ftp provides for very limited data types reprentations transformations desired beyond this limited capability should be performed by the user directly or via the use of the data reconfiguration service drs rfc nic additional representation types may be defined later if there is a demonstrable need page the file transfer protocol july data representations are handled in ftp by a user specifying a representation type the type may also specify a fixed transfer byte size for example in ascii and print file representations the transfer byte size must be bits only in the image and local byte representations the byte size specified by the byte command is to be used the following data representation types are currently defined in ftp ascii the sender converts data form its internal character representation to the standard arpanet ascii form the receiver converts the data from the standard form to its own internal form the data is transferred in the standard form the transfer byte size must be bits this type would be used for transfer of text files this is be default type and it is recommended that this type be implemented by all image the sender transforms data from contiguous bits to bytes for transfer the receiver transforms the bytes into bits storing them contiguously independent of the byte size chosen for data transfer typical uses for the image type are transfer of executable programs between like machines and transfer of binary non text data it is recommended that this type be implemented by all for some byte size preferably including the bit byte size local byte this representation allows for efficient storage use and retrieval of data the mann in which data is to be transformed depends on the byte size for data transfer and the particular host being used the transformation scheme for different byte size is to be well publicized b all server sites this transformation shall be invertible i e if a file is stored using a certain transfer byte size an identical file must be retrievable using the same byte size and representation type it is the user s responsibility to keep track of the representation type and byte size used for his transfer typical uses of the local byte type are in efficient storage and retrieval of files and transfer of structured binary page the file transfer protocol july data this type may be identical to the image type for byte size which are integral multiples of or factors of the computer word length print file the server site will transform the ascii ascii file in a form suitable for printing at the server site the byte size must be bits the transformation may not be invertible this type is different from ascii in that tabs ffs and other ascii format effector characters may be replaced by sps lfs and other substitute characters the print file conversions are to be well publicized by all server sites this type would be used when the file is destined for an ascii printer this type in some systems may be identical to the ascii type it is recommended that this type be implemented by all ebcdic print the server site will transform the ebcdic file file into a form suitable for printing at the server site the byte size must be bits the transformation may not be invertible this type would be used when the file is destined for an ebcdic printer only systems which use ebcdic for their internal character representation need accept this type it should be noted that a serving host need not accept all representation types and or byte size but it must inform the user of the fact by sending an appropriate reply iii c file structure and transfer modes the only file structures supported directly in ftp at the present time are record structures however the use of record structures is not mandatory a user with no record structure in his file should be able to store and retrieve his file at any host a user wishing to transmit a record structured file must send the appropriate ftp stru command the default assumption is no record structure a serving host need not accept record structures but it must inform the user of this fact by sending an appropriate reply any record structure information in the data stream may subsequently be discarded by the receiver page the file transfer protocol july all data transfer must end with an eof the eof is defined by the data transfer mode for files that have record structures an eor is also defined by the transfer mode only the transfer modes and representation type combinations that have eor defined may be used for transfer or files with record structures records may be of zero length but they must be contained in file boundaries the relationship between files and records is heirarchical and an eof implies an eor the following data transfer modes are defined in ftp stream the file is transmitted as a stream of bytes of the specified byte size the eof is signalled by closing the data connection any representation type and byte size may be used in the stream mode but record structures are possible only with the ascii representation type the convention is that the ascii character cr carriage return code followed by lf line feed code indicates an eor in stream mode and ascii representation type this is the default mode and it is recommended that this mode be implemented by all text the file is ascii text transmitted as sequence of bit bytes in the ascii representation type record structures are allowed in this mode the eor and eof are defined by the presence of special telnet control codes most significant bit set of one in the data stream the eor code is octal hex c the eof code os octal hex c the byte size for transfer is bits block the file is transmitted as a series of data blocks preceded by one or more header bytes the header bytes contain a count field and descriptor code the count field indicates the total length of the data block in bytes thus marking the beginning of the next data block there are no filler bits the descriptor code defines last file block eof last record block eor restart marker see section iii d or suspect data i e the data being transferred is suspected of errors and is not reliable record structures are allowed in this mode and any representation type or byte size may be used the header consists of integral number of bytes whose length is greater than or equal to bits only the least significant bits right jusified of header shall have page the file transfer protocol july information other must significant bits must be zero of the bits of header information the low order bits shall represent byte count and the high order bits shall represent descriptor codes as shown below integral data bytes must be zero descriptor byte count to bits bits bits the following descriptor codes are assigned code meaning an ordinary block of data end of data block is eor end of data block is eof suspected errors in data block data block is a restart marker the restart marker is imbedded in the data stream as integral number of bit bytes representing printable ascii characters right justified in integral number of data bytes greater than bits for example if the byte size is bits the restart marker byte would be one byte right justified per two bit bytes as shown below two bit bytes marker char bits for byte size of bits or more two more marker bytes shall be packed right justified the end of the marker may be delimited by the character sp code if marker characters do no exactly fit an integral byte the unused character slots should contain the ascii character sp code for example to transmit a six character marker in a bit byte size the following three bit bytes would be sent zero descriptor bits code byte count page the file transfer protocol july marker marker marker marker bits bits bits bits marker marker sp sp bits bits bits bits hasp the file is transmitted as a sequence of bit bytes in the standard hasp compressed data format document to be issued by bob braden ucla this mode achieves considerable compression of data for print files record structures are allowed in the hasp mode iii d error recovery and restart there is no provision for detecting bits lost or scrambled in data transfer this issue is perhaps handled best at the ncp level where it benefits most users however a restart procedure is provided to protect user from system failures such as failure of either host ftp process or the imp subnet the restart procedure is defined only for the block mode of data transfer it requires the sender of data to insert a special marker code in teh data stream with some marker information the marker information has meaning only to the sender but must consist of printable ascii characters the printable ascii characters are defined to be codes through i e not including codes through and the characters sp and del the marker could represent a bit count a record count or any other information by wich a system may identify a data checkpoint the receiver of data if it implements the restart procedure would then mark the corresponding position of this marker in the receiving system and return this information to the user in the event of a system failure the user can restart the data transfer by identifying the marker point with the ftp restart procedure the following examples illustrate the use of the restart procedure when server is the sender of data the server ftp process inserts an appropriate marker block in the data stream at a convenient data point the user ftp process receiving the data marks the coressponding data point in its file system and conveys the last known sender and receiver marker information to the user in the event of system failure the user or user ftp process restarts the server at the page the file transfer protocol july last server marker by sending a restart command with the server s marker code at its argument the restart command is transmitted over the telnet connection and is immediately followed by the command such as store or retrieve which was being executed when the system failure occured when user is the sender of data the user ftp process inserts the appropriate marker block in the data stream the server ftp process receiving the data marks the corresponding data point in its file system the server does not store this marker but conveys the last known sender and receiver marker information to the user over the telnet connections by appropriate reply codes the user or the user ftp process then restarts transfer in a manner identical to that described in the first example iv file transfer functions the telnet connections on which ftp commands and replies are transmitted are initiated by the user ftp process via an icp to a standard server socket ftp commands are then transmitted from user to server and replies are transmitted from server to user the user file transfer functions invoive sending the ftp commands interpreting the replies received and transferring data over the data connection in the specified manner the server file transfer functions involve accepting and interpreting ftp commands sending replies setting up the data connection and transferring data iv a ftp commands ftp commands are ascii terminated by the ascii character sequence crlf carriage return follow by line feed the command codes themselves are ascii alpabetic characters terminated by the ascii character space code for convenience the command codes are defined to be four or less ascii alphanumeric characters including both upper and lower case alphabetic characters the command codes and the semantics of commands are described in this section but the detailed syntax of commands is specified in section v b the reply sequence are discussed in section v c and scenarios illustrating the use of commands are provided in section v d ftp commands may be partitioned as those specifying access control identifiers data transfer parameters or ftp service requests page the file transfer protocol july iv a access control commands the following commands specify access control identifiers command codes are shown in parentheses user name user the argument field is an ascii string identifying the user the user identification is that wich is required by the server for access to its file system this command will normally be the first command transmitted by the user after the telnet connections are made some servers may require this additional identification information in the form of pasword command may also be required by some servers password pass the argument field is an ascii string identifying the user s password this command must be immediately preceded by the user name command and together it completes the user s identifecation for access control iv a data transfer commands all data transfer parameters have default values and the commands specifying data transfer parameters are required only if the default parameter values are to be changed the default value is teh last specified value or if no value has been specified the standard default value specified here this implies that the server must remember the applicable default values the commands may be in any order except that they must precede the ftp service request the following commands specify data transfer parameters byte size byte the argument is an ascii represented decimal integer through specifying the byte size for the data connection for local byte and image representation types the default byte size is bits the byte size is always bits in the ascii and print file representation types a server may reject specific byte size type combinations by sending an appropriate reply data socket sock the argument is a host socket specification for the data socket to be used in data connection there may be two data sockets one from server to user and the other for user to server data transfer an odd socket number defines a send socket and an even socket number defines a receive socket the default host is the user host to which telnet connections are made the default data sockets are u and u where u is the socket number used in the telnet icp and the telnet connections are on sockets u and u page the file transfer protocol july representation type type the argument is a single ascii character code specifying the representation types described in section iii b the following codes are assigned for type a ascii i image l local byte p print file in ascii e ebcdic print file the default representation type is ascii file structure stru the argument is a single ascii character code specifying file structure described in section iii c the following codes are assigned for structure f file no record structure r record structure the default structure is file i e no records transfer mode mode the argument is a single ascii character code specifying the data transfer modes described in section iii c the following codes are assigned for transfer modes s stream bytes close is eof b block header with descriptor and count t text telnet control mode for eor eof h hasp specially formatted compressed data the default transfer mode is stream iv a ftp service commands the ftp service commands define the file transfer or the file system function requested by the user the argument of an ftp service command will normally be a pathname the syntax of pathnames must conform to server site conventions with standard defaults applicable except that ascii characters must be used in conformance with the telnet protool the suggested default handling is to use the last specified device directory or file name or the standard default defined for local users the commands may be in any order except that a rename from command must be followed by a rename to command and some servers may require an allocate command before a store command the data when transferred in response to ftp service commands shall always be over the data connection the following commands specify ftp service requests page the file transfer protocol july retrieve retr this command achieves the transfer of a copy of file specified in pathname from server to user site the status and contents of a file at server site shall be unaffected store stor this command achieves the transfer of a copy of file from user to server site if file specified in pathname exists at the server site then its contents shall be replaced by the contents of the file being transferred a new file is created at the server site if the file specified in pathname does not already exist append with create appe this command achieves the transfer of data from using to serving site if file specified in pathname exists at the server site then the data transferred shall be appended to that file otherwise the file specified in pathname shall be created at the server site rename from rnfr this command specifies the file which is to be renamed this command must be immediately followed by a rename to command specifying the new file pathname delete dele this command causes teh file specified in pathname to be deleted at the server site if an extra level of protection is desired such as the query do you really wish to delete it should be provided by the user ftp process list list this command causes a list to be sent from server to user site if pathname specifies a directory the server should transfer a list of files in the specified directory if pathname specifies a file then server should send current information on the file this command may be used to obtain the contents of a file directory the response should be sent in ascii type or test the existence of a file and its current status allocate allo this command my be required by some servers to reserve sufficient storage to accomodate the new file to be transferred the command field shall be a decimal integer representing the number of bytes of size specified by the byte size command of storage to be reserved for the file this command shall be followed by a store or append command the allo command should be treated as a no op no operation by thuse servers which do not require that the maximum size of the file be declared beforehand restart rest the argument field represents the server marker at which file transfer is to be restarted this command does not cause file transfer but spaces over the file to the specified page the file transfer protocol july data checkpoint this command shall be immediately followed by the appropriate ftp service command which shall cause file transfer to resume status stat this command shall cause a status response to be sent over the telnet connection in form of a reply the command may have an argument field such as a pathname if the argument is a pathname the command is analogous to the list command except that data shall be transferred in ascii on the telnet connection if no argument is specified the server should return general status information about the server ftp process this may include service availability the current settings for the relevant ftp parameters including default settings and the status of command execution and connections abort abor this command indicates to the server to abort the previous ftp service command and any associated transfer of data the abort command should be preceded by the telnet synch condition indicated by the combination of the data mark and the ins no action is to be taken if the previous command has been completed including data transfer the telnet connections is not to be closed by the server but the data connection may be closed an appropriate reply should be sent by the server logout bye this command terminates a user and if file transfer is not in progress closes the telnet connection if file transfer is in progress the connection will remain open for result response and will then close during the interim a new user command and no other command is acceptable an unexpected close on telnet connection will cause the server to take the effective action of an abort abor and a logout bye iv b ftp replies the server sends ftp replies to user over the telnet connections in response to ftp commands the ftp replies constitute the acknowledgement or completion code including errors the ftp server replies are formatted for human or program interpretation the replies consist of a leading three digit numeric code followed by a space followed by a text explanation of the code the numeric codes are assigned by groups and for ease of interpretation by programs in a manner consistent with other protocols such as the rje protocol the three digits of the code are to be interpredet as follows page the file transfer protocol july a the first digit specifies type of response as indicated below these replies are purely informative and constitute neither a positive nor a negative acknowledgement xx informative replies to status inrequiries these constitute a positive acknowledgment to the status command xx positive acknowledgment of previous command or other successful action xx incomplete information activity cannot proceed without further specification and input xx unsuccessful reply the request is correctly specified but the server is unsuccessful in corretly fulfilling it xx incorrect or illegal command the command or its parameters were invalid or incomplete from a syntactic viewpoint or the command its inconsistent with a previous command the command in question has been completely ignored xx xx reserved for future expansion b the second digit specifies the general category to which the response refers x x general purpose replies not assignable to other categories x primary access informative replies to the log on attempt x secondary access the primary server is commenting on its ability to access a secondary service x x ftp results x x rje resutls x x x x reserved for future expansion page the file transfer protocol july c the final digit specifies a particular message type since the code is designed for an automaton process to interpret it is not necessary for every variation of a reply to have a unique number only the basic meaning of replies need have unique numbers the text of a reply can explain the specific reason for that reply to a human user each telnet line ended by crlf from the server is intended to be a complete reply message if it is necessary to continue the text of a reply onto following lines then those continuation replies contain the special reply code of three spaces it should be noted that text of replies are intended for a human user only the reply codes and in some instances the first line of text are intended for programs the assigned reply codes relating to ftp are general information message site time of day etc server availibility information ftp commentary or user information system status reply file status reply directory listing reply last command received correctly an abort has terminated activity as requested abort request ignored no activity in progress user is logged in may proceed user is logged out service terminated logout command noted will complete when transfer done ftp file transfer started correctly ftp restart marker reply text is mark yyyy mmmm where yyyy is user s data stream marker yours and mmmm is server s equivalent marker mine note the spaces between the markers and ftp transfer completed correctly rename completed delete completed ftp server data socket reply text is sock nnnn where nnnn is decimal integer representing the server socket for data connection connection greeting message awaiting input current command incomplete no crlf for long time enter password may be sent with hide your input this service not implemented this service not accepting users now goodbye log on time or tries exceeded goodbye log on unsuccessful user and or password invalid user not valid for this service page the file transfer protocol july log out forced by operator action phone site log out forced by system problem service shutting down goodbye ftp file not found ftp file access denied to you ftp file transfer incomplete data connection closed ftp file transfer incomplete insufficient storage space last command line completely unrecognized syntax of last command in incorrect last command incomplete parameters missing last command invalid ignored illegal parameter combination last command invalid action not possible at this time last command conflicts illegally with previous command s requested action not implemented by the server v declarative specifications v a connections the server ftp process at the server site shall listen on socket via its server telnet the user or user ftp process at the user site shall initiate the full duplex telnet connections via its user telnet performing the arpanet standard initial connection protocol icp to server socket the telnet connections shall be closed by the user site upon completion of use the user site shall listen on the specified data socket or sockets a send and or a receive socket the server site shall initiate the data connection using the specified data socket and byte size the direction of data connection and the data socket used shall be determined by the ftp service command the server shall send a reply to the user indicating the server data socket so that the user may ensure the security of data transfer this can be done at any time prior to the first transfer of data over a data connection the data connection shall be closed by the server site under the conditions described is section iii a the server should in general send a reply before closing the data connection to avoid problems at the user end v b commands the commands are ascii character strings transmitted over the telnet connections as described in section iv a the command functions and semantics are described in sections iv a iv a iv a and iv a the command syntax is specified here page the file transfer protocol july the commands begin with a command code followed by an argument field the command codes are four of less ascii alphabetic characters upper and lower case alphabetic characters are to be treated identically thus any of the following may represent the retrieve command retr retr retr retr retr the command codes and the argument fields are separated by one or more spaces the argument field consists of a variable length ascii character string ending with the character sequence crlf carriage return immediately followed by line feed in the following section on syntax it should be stressed that all characters in the argument field are ascii characters thus a decimal integer shall mean an ascii represented decimal integer the following are all the currently defined ftp commands user crlf pass crlf byte crlf sock crlf type crlf stru crlf mode crlf retr crlf stor crlf appe crlf rnfr crlf rnto crlf dele crlf list crlf allo crlf rest crlf stat crlf abor crlf bye crlf the syntax of the above argument fields using bnf notation where aplicable is any of the ascii characters except cr and lf page the file transfer protocol july any ascii code through any decimal integer through a decimal integer specifying an arpanet host decimal integer between o and a i l p e f r s b t h the null string specifies use of default v c sequencing of commands and replies the communication between the user and server is intended to be an alternating dialogue as such the user issues an ftp command and the server responds with a prompt primary reply the user should wait for this initial primary success of failure response before sending further commands a second type of reply is sent asynchronously with respect to user commands these replies may for example report on the progress or completion of file transfer and as such are secondary replies to file transfer commands the third class of replies are informational and spontaneous replies which may arrive at any time these replies are listed below as spontaneous command reply correspondence table command success fail user pass bye byte sock type mode retr secondary reply stor secondary reply appe secondary reply page the file transfer protocol july rnfr rnto dele list secondary reply allo stat rest abor spontaneous xx replies v d tyical ftp scenarious tip user wanting o transfer file from fost x to local printer a tip user opens telnet connections by icp to host x socket b the following commands and replies are exchanged tip host x user username crlf enter password crlf pass password crlf user logged in crlf sock crlf command received ok crlf retr this file crlf sock crlf host x initiates data connection to tip socket i e port receive file transfer started bye crlf file transfer completed c host x closes the telnet and data connections note the tip user should be in line mode and can thus use local tip editing such as character delete page the file transfer protocol july user at host u wanting to transfer files to from host s in general the user would communicate to the server via a mediating user ftp process the following may be a typical scenario the user ftp prompts are shown in parenthesis represents commands from host u to host s and represents replies from host s to host u local commands by user action involved ftp host multics cr icp to host s socket establishing telnet connections username doe cr user doecrlf passwordcrlf password mumble cr pass mumblecrlf doe logged in crlf retrieve local type asciicr local pathname test cr user ftp open local file in ascii for pathname test pl cr retr test pl crlf sock crlf server makes data connection to u file transfer startscrlf file transfer completecrlf type imagecr type crlf command okcrlf byte cr byte crlf command okcrlf store local type imagecr local pathname file dumpcr user ftp opens local file in image for pathname udd cn fdcr stor udd cn fdcrlf access deniedcrlf terminate byecrlf doe logged outcrlf server closes all connections page the file transfer protocol july acknowledgements the work on file transfer protocol has involved many people this document reports the work of a group rather than the author alone the author gratefully acknowledges the conributions of the following bob braden ucla cccn arvola chan mit mac bill crowther bbn tip eric harslem rand john heafner rand chuck holland ucsd alex mckenzie bbn net bob metcalfe xparc jon postel ucla neal ryan mit mac bob sundberg harvard ray tomlinson bbn tenex dick watson sri arc jim white sri arc richard winter cca this rfc was put into machine readable form for entry into the online rfc archives by gottfried janik page 