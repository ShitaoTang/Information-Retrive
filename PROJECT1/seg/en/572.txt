 network working group s crocker request for comments ucla october a note on padding the padding on a message is a string of the form for hosts with word lengths etc bits long this string is necessarily in the last word received from the imp for hosts with word lengths which are not a multiple of but which are at least bits long the bit will be in either the last word or the next to last word of course if the bit is in the next to last word the last word is all zero an unpleasant coding task is discovering the bit position of the bit within its word one obvious technique is to repeatedly test the low order bit shifting the word right one bit position if the low order bit is zero the following techniques are more pleasant isolating the low order bit let w be a non zero word where the word length is n then w is of the form x x v v n k k where k p r p r p we obtain the following table of useful divisors for p page network working group a note on padding rfc p r p p r p notice that and are useful divisors even though they generate only and remainders respectively determination of r p if p is odd the remainders mod p mod p t will be between and p inclusive at some power of say there k t will be a repeated remainder so that for some k t mod p t k since mod p t k and mod p etc t all of the distinct remainders occur for therefore r p t page network working group a note on padding rfc next we show that r p mod p r p k we already know that mod p for some k q k q k q mod p mod p page network working group a note on padding rfc from this we can see that the sequence of remainders will have an q initial segment of of length q and repeating segments of length r p therefore r p q r p since we normally expect r p p even p generally will not be useful i don t know of a direct way of choosing a p for a given n but the previous table was generated from the following fortran program run under the sex system at ucla call iassgn oc format i i m do k k l l l n mod n k if n gt go to if l le m go to m l write k l continue stop end fortran program to computer useful divisors in the program k takes on trial values of p n takes on the values of the successive remainders l counts up to r p and m remembers the previous largest r p execution is quite speedy page network working group a note on padding rfc results from number theory the quantity referred to above as r p is usually written ord and is p read the order of mod p the maximum value of ord is given by p euler s phi function sometimes called the totient the totient of a positive integer p is the number of integers less than p which are relatively prime to p the totient is easy to compute from a representation of p as a product of primes n n n let p p p p k k where the p are distinct primes then i k k k phi p p p p p p p k k k if p is prime the totient of p is simply phi p p if p is not prime the totient is smaller if a is relatively prime to p then euler s generalization of fermat s theorem states phi m a mod p it is this theorem which places an upper bound ord because ord is p p the smallest value such that ord p mod p moreover it is always true that phi p is divisible by ord p page network working group a note on padding rfc acknowledgements bob kahn read an early draft and made many comments which improved the exposition alex hurwitz assured me that a search technique is necessary to compute r p and supplied the names for the quantities and theorems i uncovered this rfc was put into machine readable form for entry into the online rfc archives by guillaume lahaye and john hewes page 