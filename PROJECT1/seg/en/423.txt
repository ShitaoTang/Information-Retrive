 network working group h brodie request for comments ucla nmc nic december categories file transfer updates obsoletes none some experience with file transfer at ucla nmc we have recently completed implementation of a program which utilizes ucsb s storage capability via their simple minded file system see rfc by jim white for a description of smfs the use of the program is detailed in appendix a we learned a number of things in the implementation effort and subsequent usage we think a number of these apply towards the development of a net word wide file transfer protocol and we hope to stimulate further dis cussion of these issues we discovered some things in the ucsb protocol that we would like to see included in the network wide protocol and we see some things that are in the currently proposed net protocol and are unfortunately absent from the ucsb protocol in the first category is the ucsb file retrieval procedure the user specifies among other things a bit count of the number of bits to be retrieved in the current request successive rtf commands yield successive pieces of the file portions of the file can be spaced over by use of the spf command we think that the ability of the user to specify the size of the chunks of the file he is about to receive along with the ability to access any part of the file without having to get the entire file is definitely an advantage it makes the user programs easier to write since the problem of parsing the input stream virtually disappears as the user program knows exactly what to expect at all times in addition the one request one response nature of the protocol avoids the problem of sending a request and then receiving pieces of data of unpredictable size at unknown intervals the response to each rtf gives the comforting knowledge that they re still listening this leads us to believe that there is much to be gained by the adoption of a one request one response type of protocol we might point out that for any significant file transfer this does not seriously cut down on the overall data transfer rate since a defaulting type of approach as smfs uses can be used to keep the request messages very small we also have found the mandatory password scheme of ucsb quite easily used and any server site i e a site specifically advertising file storage can reasonably be expected in our opinion to require passwords see also rfc by r braden page network working group h brodie request for comments ucla nmc nic december almost immediately after starting to use smfs we found a serious lack in one area there is no way for a user to ask what files do i have there as a matter of fact the author suspects that there are already several files there which he has forgotten about it is reasonable perhaps even necessary for any server to supply a nicely formatted character string describing the files stored there for this password or user or whatever division is used the listing should also contain other pertinent information such as date created size etc in the meantime ucsb is providing the sex system with valuable out of line on line storage and we look forward to the development of a widely accepted file transfer protocol implemented on a large number of server sites hopefully equipped with low cost bulk storage page sex notebook appendix a h brodie section december fxfer fxfer is a re entrant program written in symbol which is used to send a receive file from ucsb using their simple minded file system for the description of the network interface to smfs see rfc by jim white files are stored there in a paged format identical to the paged format that the tape process uses thus a file which master lists as having n pages will take n bytes of storage at ucsb the user s sign on initials are used as both the access and modification passwords so that if a file is sent under on user s sign on they can only be retrieved or deleted by him commands pa increments print all counter different settings of this counter yield different levels of program trace output on the console np no print this sets the print all counter to zero df foo this deletes the file foo located at ucsb pf foo this sends the file foo pointed to by the user s root directory to ucsb only read access is needed to foo gf foo the file foo located at ucsb is retrieved and put in the user s root with write access note that it must have been sent by the user to have the right password rn foo bar rename the file foo at ucsb to bar the same password restrictions as with pf and gf apply not yet implemented st status tells what program is doing and how much its done x exit program if the system and or ucsb is particularly slow then ucsbfil may type a time out message at this point the user has the option of continuing or exiting the program the message is self explanatory as are most of the program s messages this rfc was put into machine readable form for entry into the online rfc archives by nick christenson page 