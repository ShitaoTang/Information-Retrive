 network working group bob anderson request for comments rand nic vint cerf ucla eric harslem john heafner rand jim madden u of illinois bob metcalfe mit arie shoshani sdc jim white ucsb david wood mitre april status report on proposed data reconfiguration service contents i introduction purpose of this rfc motivation ii overview of data reconfiguration service elements of data reconfiguration service conceptual network connections connection protocols and message formats example connection configurations iii the form machine input output stream and forms form machine bnf syntax alternate specification of form machine syntax forms rules terms term format term format term format term format application of a term anderson et al page rfc data reconfiguration service april restrictions and interpretations of term functions term and rule sequencing iv examples remarks field insertion deletion variable length records string length computation transposition character packing and unpacking v proposed uses of data reconfiguration service vi implementation plans appendix a note to the drs working group note to the drs working group i introduction purpose of this rfc the purpose of this rfc is to describe in part a proposed network experiment and to solicit comments on any aspect of the experiment the experiment involves a software mechanism to reformat network data streams the mechanism can be adapted to numerous network application programs we hope that the results of the experiment will lead to a further standard service that embodies the principles described in this rfc we would like comments on the appropriateness of this work as a network experiment and also comments on particular network data reformatting needs that could not easily be accomplished using these techniques motivation application programs require specific data i o formats yet the formats are different from program to program we take the position that the network should adapt to the individual program requirements rather than changing each program to comply with a standard this position doesn t preclude the use of standards that describe the formats of regular message contents it is merely an interpretation of a standard as being a desirable mode of operation but not a necessary one anderson et al page rfc data reconfiguration service april in addition to differing program requirements a format mismatch problem occurs where users wish to employ many different kinds of consoles to attach to a single service program it is desirable to have the network adapt to individual console configurations rather than requiring unique software packages for each console transformation one approach to providing adaptation is for those sites with substantial computing power to offer a data reconfiguration service a proposed example of such a service is described here the envisioned modus operandi of the service is that an applications programmer defines forms that describe data reconfigurations the service stores the forms by name at a later time a user perhaps a non programmer employs the service to accomplish a particular transformation of a network data stream simply by calling the form by name we have attempted to provide a notation tailored to some specifically needed instances of data reformatting while keeping the notation and its underlying implementation within some utility range that is bounded on the lower end by a notation expressive enough to make the experimental service useful and that is bounded on the upper end by a notation short of a general purpose programming language ii overview of the data reconfiguration service elements of the data reconfiguration service an implementation of the data reconfiguration service drs includes modules for connection protocols a handler of some requests that can be made of the service a compiler and or interpreter called the form machine to act on those requests and a file storage module for saving and retrieving definitions of data reconfigurations forms this section highlights connection protocols and requests the next section covers the form machine language in some detail file storage is not described in this document because it is transparent to the use of the service and its implementation is different at each drs host conceptual network connections there are three conceptual network connections to the drs see fig the control connection cc is between an originating user and the drs a form specifying data reconfiguration is anderson et al page rfc data reconfiguration service april defined over this connection and is applied to data passing over the two connections described below the user connection uc is between a user process and the drs the server connection sc is between the drs and the serving process since the goal is to adapt the network to user and server processes a minimum of requirements are imposed on the uc and sc cc sc originating drs server user process telnet simplex or duplex protocol uc connections connection user process figure drs network connections connection protocols and message formats over a control connection the dialog is directly between an originating user and the drs here the user is defining forms or assigning forms to connections for reformatting the user connects to the drs via the initial connection protocol icp specified in nwg rfc version rather than going through a logger the user calls on a particular socket on which the drs always listens drs switches the user to another socket pair messages sent over a control connection are of the types and formats to be specified for telnet thus a user at a terminal should be able to connect to a drs via his local telnet for example as shown in fig anderson et al page rfc data reconfiguration service april cc telnet drs user terminal or program figure a telnet connection to drs when a user connects to drs he supplies a six character user id uid as a qualifier to guarantee the uniqueness of his form names he will have at least the following commands defform name endform name these two commands define a form the text of which is chronologically entered between them the name is six characters the form is stored in the drs local file system purge name the named form as qualified by the current uid is purged from the drs file system listnames uid the unqualified names of all forms assigned to uid are returned listform name the source text of a named form is returned duplexconnect user site user send user receive user method server site server send server receive server method user to server form server to user form simplexconnect send site send socket send method receive site receive socket receive method form anderson et al page rfc data reconfiguration service april either one both or neither of the two parties specified in or may be at the same host as the party issuing the request sites and sockets specify user and server for the connection method indicates the way in which the connection is established three options are provided site socket already connected to drs as a dummy control connection a dummy control connection should not also be the real control connection connect via standard icp only for command no connect directly via str rts example connection configurations there are basically two modes of drs operation the user wishes to establish a drs uc sc connection s between two programs and the user wants to establish the same connection s where he his terminal is at the end of the uc or the sc the latter case is appropriate when the user wishes to interact from his terminal with the serving process e g a logger in the first case fig where the originating user is either a terminal or a program the user issues the appropriate connect command the uc sc can be simplex or duplex the second case has two possible configurations shown in figs and cc sc telnet uc drs sp user figure use of dummy control connection user cc side sc user uc drs sp serving side figure use of server telnet anderson et al page rfc data reconfiguration service april in fig the user instructs his telnet to make two duplex connections to drs one is used for control information the cc and the other is a dummy when he issues the connect he references the dummy duplex connection uc using the already connected option in fig the user has his telnet user side call the drs when he issues the connect the drs calls the telnet server side which accepts the call on behalf of the console this distinction is known only to the user since to the drs the configuration in fig appears identical to that in fig two points should be noted telnet protocol is needed only to define forms and direct connections it is not required for the using and serving processes the using and serving processes need only a minimum of modification for network use i e an ncp interface iii the form machine input output streams and forms this section describes the syntax and semantics of forms that specify the data reconfigurations the form machine gets an input stream reformats the input stream according to a form describing the reconfiguration and emits the reformatted data as an output stream in reading this section it will be helpful to envision the application of a form to the data stream as depicted in fig an input stream pointer identifies the position of data in the input stream that is being analyzed at any given time by a part of the form likewise an output stream pointer locates data being emitted in the output stream form current part of input current current output stream pointer form being applied pointer stream figure application of form to data streams anderson et al page rfc data reconfiguration service april form machine bnf syntax form rule rule form rule label inputstream outputstream label integer inputstream terms terms term terms term outputstream terms term identifier identifier descriptor descriptor comparator identifier an alpha character followed by to alphamerics descriptor replicationexpression datatype valueexpression lengthexpression control comparator value connective value control identifier control replicationexpression arithmeticexpression datatype b o x e a valueexpression value lengthexpression arithmeticexpression connective le lt ge gt eq ne value literal arithmeticexpression arithmeticexpression primary primary operator arithmeticexpression primary identifier l identifier v identifier integer operator literal literaltype string anderson et al page rfc data reconfiguration service april literaltype b o x e a string from to characters control options options s where f where u where s where f where f where s where where arithmeticexpression r arithmeticexpression alternate specification of form machine syntax infinity form rule rule integer terms terms infinity terms term term term identifier identifier descriptor comparator descriptor arithmeticexpression datatype value lengthexpression options comparator value connective value options identifier value options connective le lt ge gt eq ne lengthexpression arithmeticexpression datatype b o x e a value literal arithmeticexpression anderson et al page rfc data reconfiguration service april infinity arithmeticexpression primary operator primary operator primary identifier l identifier v identifier integer literal literaltype character literaltype b o x a e options s where f where f where s where u where where arithmeticexpression r arithmeticexpression identifier alphabetic alphameric forms a form is an ordered set of rules form rule rule form the current rule is applied to the current position of the input stream if the input stream part of a rule fails to correctly describe the contents of the current input then another rule is made current and applied to the current position of the input stream the next rule to be made current is either explicitly specified by the current term in the current rule or it is the next sequential rule by default flow of control is more fully described under term and rule sequencing if the input stream part of a rule succeeds in correctly describing the current input stream then some data may be emitted at the current position in the output stream according to the rule the input and output stream pointers are advanced over the described and emitted data respectively and the next rule is applied to the now current position of the input stream application of the form is terminated when an explicit return r arithmeticexpression is encountered in a rule the user and anderson et al page rfc data reconfiguration service april server connections are closed and the return code arithmeticexpression is sent to the originating user rules a rule is a replacement comparison and or an assignment operation of the form shown below rule label inputstream outputstream a label is the name of a rule and it exists so that the rule may be referenced elsewhere in the form for explicit rule transfer of control labels are of the form below label integer the optional integer labels are in the range integer the rules need not be labeled in ascending numerical order terms the inputstream describing the input stream to be matched and the outputstream describing data to be emitted in the output stream consist of zero or more terms and are of the form shown below inputstream terms outputstream terms terms term terms term terms are of one of four formats as indicated below term identifier identifier descriptor descriptor comparator term format the first term format is shown below identifier the identifier is a symbolic reference to a previously identified term term format in the form it takes on the same attributes value length type as the term by that name term format is normally used to emit data in the output stream identifiers are formed by an alpha character followed by to alphameric characters anderson et al page rfc data reconfiguration service april term format the second term format is shown below identifier descriptor term format is generally used as an input stream term but can be used as an output stream term a descriptor is defined as shown below descriptor replicationexpression datatype valueexpression lengthexpression control the identifier is the symbolic name of the term in the usual programming language sense it takes on the type length and value attributes of the term and it may be referenced elsewhere in the form the replication expression is defined below replicationexpression arithmeticexpression arithmeticexpression primary primary operator arithmeticexpression operator primary identifier l identifier v identifier integer the replication expression is a repeat function applied to the combined data type and value expression it expresses the number of times that the value of the data type value expression is to be repeated within the field length denoted by the data type length expression a null replication expression has the value of one arithmetic expressions are evaluated from left to right with no precedence it is anticipated that this interpretation might be changed if necessary the l identifier is a length operator that generates a bit binary integer corresponding to the length of the term named the v identifier is a value operator that generates a bit binary integer corresponding to the value of the term named see restrictions and interpretations of term functions the value operator is intended to convert character strings to their numerical correspondents anderson et al page rfc data reconfiguration service april the data type is defined below datatype b o x e a the data type describes the kind of data that the term represents it is expected that additional data types such as floating point and user defined types will be added as needed data type meaning unit length b bit string bit o bit string bits x bit string bits e ebcdic character bits a network ascii character bits the value expression is defined below valueexpression value value literal arithmeticexpression literal literaltype string literaltype b o x e a the value expression is the unit value of a term expressed in the format indicated by the data type it is repeated according to the replication expression in a field whose length is constrained by the length expression a null value expression in the input stream defaults to the data present in the input stream the data must comply with the datatype attribute however a null value expression generates padding according to restrictions and interpretations of term functions the length expression is defined below lengthexpression arithmeticexpression the length expression states the length of the field containing the value expression as expanded by the replication expression if the value of the length expression is less then the length implied by the expanded value expression then the expanded value expression is truncated see restrictions and interpretations of term functions the terminal symbol means an arbitrary length explicitly terminated by the value of the next term the is legal only in the input stream and not in the output stream anderson et al page rfc data reconfiguration service april if the length expression is less than or equal to zero the term succeeds but the appropriate stream pointer is not advanced positive lengths cause the appropriate stream pointer to be advanced if the term otherwise succeeds control is defined under term and rule sequencing term format term format is shown below descriptor it is identical to term format with the omission of the identifier term format is generally used in the output stream it is used in the input stream where input data is to be passed over but not retained for emission or later reference term format the fourth term format is shown below comparator value connective value control identifier value control value literal arithmeticexpression literal literaltype string literaltype b o x e a string from to characters connective le lt ge gt eq ne the fourth term format is used for assignment and comparison the assignment operator assigns the value to the identifier the connectives have their usual meaning values to be compared must have the same type and length attributes or an error condition arises and the form fails the application of a term the elements of a term are applied by the following sequence of steps the data type and value expression together specify a unit value call it x the replication expression specifies the number of times x is to be repeated or copied in concatenated fashion the value of the concatenated xs becomes say y of length l anderson et al page rfc data reconfiguration service april the data type and the length expression together specify a field length of the input area call it l that begins at the current stream pointer position the value of y is truncated to y if l l call the truncated length l if the term is an input stream term then the value y of length l is compared to the input value beginning at the current input pointer position if the values are identical over the length l then the input value of length l may be greater than l starting at the current pointer position in the input area becomes the value of the term in an output stream term the procedure is the same except that the source of input is the value of the term s named in the value expression and the data is emitted in the output stream the above procedure is modified to include a one term look ahead where lengths are indefinite because of the arbitrary symbol restrictions and interpretations of term functions terms specifying indefinite lengths through the use of the symbol must be separated by some type specific data such as a literal a literal isn t specifically required however an arbitrary number of ascii characters could be terminated by a non ascii character is legal only in the input stream not in the output stream truncation and padding is as follows a character to character a e conversion is left justified and truncated or padded on the right with blanks b character to numeric and numeric to numeric conversions are right justified and truncated or padded on the left with zeros c numeric to character conversion is right justified and left padded with blanks the following are ignored in a form definition over the control connection a tab carriage return etc b blanks except within quotes c string is treated as comments except within quotes the following defaults prevail where the term part is omitted anderson et al page rfc data reconfiguration service april a the replication expression defaults to one b the data type defaults to type b c the value expression of an input stream term defaults to the value found in the input stream but the input stream must conform to data type and length expression the value expression of an output stream term defaults to padding only d the length expression defaults to the size of the quantity determined by replication expression data type and value expression e control defaults to the next sequential term if a term is successfully applied else control defaults to the next sequential rule if where evaluates to an undefined label the form fails arithmetic expressions are evaluated left to right with no precedence the following limits prevail a binary lengths are bits b character strings are bit characters c identifier names are characters d maximum number of identifiers is e label integers are and value and length operators product bit binary integers the value operator is currently intended for converting a or e type decimal character strings to their binary correspondents for example the value of e would be the value of e ab would cause the form to fail anderson et al page rfc data reconfiguration service april term and rule sequencing sequencing may be explicitly controlled by including control in a term control options options s where f where u where s where f where f where s where where arithmeticexpression r arithmeticexpression s f and u denote success fail and unconditional transfers respectively where evaluates to a rule label thus transfer can be effected from within a rule at the end of a term to the beginning of another rule r means terminate the form and return the evaluated expression to the initiator over the control connection if still open if terms are not explicitly sequenced the following defaults prevail when a term fails go to the next sequential rule when a term succeeds go to the next sequential term within the rule at the end of a rule go to the next sequential rule note in the following example the correlation between transfer of control and movement of the input pointer xyz b s f xyz the value of xyz will never be emitted in the output stream since control is transferred out of the rule upon either success or failure if the term succeeds the bits of input will be assigned as the value of xyz and rule will then be applied to the same input stream data that is since the complete rule was not successfully applied then the input stream pointer is not advanced anderson et al page rfc data reconfiguration service april iv examples remarks the following examples forms and also single rules are simple representative uses of the form machine the examples are expressed in a term per line format only to aid the explanation typically a single rule might be written as a single line field insertion to insert a field separate the input into the two terms to allow the inserted field between them for example to do line numbering for a character line printer with a leading carriage control character use the following form numb initialize line number counter to one cc e f r pick up control character and save as cc return a code of upon exhaustion line e f r save text as line cc emit control character e numb emit counter in first two columns e e emit period after line number e line emit text truncated in byte field numb numb u increment line counter and go to rule one deletion data to be deleted should be isolated as separate terms on the left so they may be omitted by not emitting them on the right b isolate bits to ignore save a extract ascii characters from input stream e save emit the characters in save as ebcdic characters whose length defaults to the length of save i e and advance to the next rule in the above example if either input stream term fails the next sequential rule is applied variable length records some devices terminals and programs generate variable length records to following rule picks up variable length ebcdic records anderson et al page rfc data reconfiguration service april and translates them to ascii char e pick up all an arbitrary number of ebcdic characters in the input stream x x ff followed by a hexadecimal literal ff terminal signal a char emit them as ascii x x emit an ascii carriage return string length computation it is often necessary to prefix a length field to an arbitrarily long character string the following rule prefixes an ebcdic string with a one byte length field q e pick up all ebcdic characters ts x x ff followed by a hexadecimal literal ff b l q emit the length of the characters plus the length of the literal plus the length of the count field itself in an bit field q emit the characters ts emit the terminal transposition it is often desirable to reorder fields such as the following example q e r e s e t e r t s q the terms are emitted in a different order character packing and unpacking in systems such as hasp repeated sequences of characters are packed into a count followed by the character for more efficient storage and transmission the first form packs multiple characters and the anderson et al page rfc data reconfiguration service april second unpacks them form to pack ebcdic streams returns if ok input exhausted returns if illegal ebcdic look for terminal signal ff which is not a legal ebcdic duplication count must be x x ff s r pick up the ebcdic and initialize count char e f r cnt count consecutive ebcdics like char e char f cnt cnt u emit count and current character b cnt char u end of form form to unpack ebcdic streams look for terminal x x ff s r emit character the number of times indicated by the counter contents cnt b char e cnt e char cnt u failure of form u r v proposed uses of data reconfiguration service the following are some proposed uses of the drs that were submitted by the sites indicated ucla pack unpack text files preprocessor to scan meta compiler input perhaps graphics mit reformatting within file transfer service character conversions possible graphics service evans and sutherland output format reformat arguments of subroutines remote to each other u of illinois dependent upon remote use of drs for many remote services sdc would be essential to data transfer in general anderson et al page rfc data reconfiguration service april could be used in relation to data management language ucsb checkout of i o formats of file system debugging network services in general mapping their services into future standards rand to describe rjo rje message formats at ucsb to describe rjs message formats at ucla to adapt network to existing services in general mitre character conversions testing data formats going into data bases for correct field formatting vi implementation plans four sites currently plan to implement and offer the service on an experimental basis mit implementation of forms interpreter in midas assembly perhaps tree meta compiler of forms implementation on pdp ucla implementation on sigma employing meta to compile forms ucsb implementation on rand initial implementation on compiler to be written in graphics cps compiled intermediate forms to be interpreted by assembler language subroutine later implemented on pdp in addition to the above sites the university of illinois and mitre plan to experiment with the service anderson et al page rfc data reconfiguration service april appendix a note to the drs working group as you recall we spent considerable time in discussing the use and meaning of the arbitrary symbol to summarize it was clear that inclusion of the in both replication and length expressions led to ambiguities we settled on its restricted use in the length expression of an input term although no one was entirely satisfied with this definition recently jim white has again commented on the jim feels that it is curious that one can pick up an arbitrary number of ebcdic characters for example but can t pick up an arbitrary number of specific ebcdic characters such as ebcdic a s jim feels that a more natural way to interpret the length value and replication expressions would be as the ibm os assembler interprets the attributes of the pseudo instruction define constant cd the ibm os assembler uses the following format duplication type modifiers nominal value factor the duplication factor if specified causes the constant to be generated the number of times indicated by the factor the type defines the type of constant being specified modifiers describe the length scaling and exponent of the constant nominal value supplies the constant described by the subfields that precede it assume that we use the only as a duplication factor replication expression hence in the example of the form to pack ebcdic characters the counter and looping can be eliminated char e len char b l len char the interpretation is that the data type length expression and value expression make up the unit value this quantity can then be replicated as our document now stands only the data type and value expression make up the unit value the application of a term according to jim s suggestion is as follows the data type value expression and length expression together specify a unit value call it x anderson et al page rfc data reconfiguration service april the replication expression specifies the number of times x is to be repeated the value of the concatenated xs becomes y of length l if the term is an input stream term then the value beginning at the current input pointer position if the input value satisfies the constraints of y over length l then the input value of length l becomes the value of the term note to the drs working group there has been recent debate of whether the input pointer should be advanced upon successful completion of a rule as it now is defined or upon successful completion of each term see the example on page if the input pointer is advanced upon successful completion of a term then rules become equivalent to terms i would like to for us to discuss at the sjcc both the term attributes and the input pointer advance issues john this rfc was put into machine readable form for entry into the online rfc archives by katsunori tanaka anderson et al page 