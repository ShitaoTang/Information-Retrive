network working group mike padlipsky rfc net using memo net using nic october neted a common editor for the arpa network background at the recent resource sharing workshop there was a somewhat surprising degree of consensus on what i had anticipated would the least popular aspect of the my unified user level protocol proposal a number of the attendees agreed without argument that it would be a good thing to have the same context editor available on all servers where the same refers of course to the user interface we even agreed that neted seemed to be a plausible common name in view of the fact that the rest of the proposal didn t seem to capture anybody s imagination though it seemed to be a useful notion to separate out the common editor and make it the subject of a stand alone proposal my resolve to come up with the following was further strengthened at the the organizing meeting of the network user interest group which followed the workshop being primarily concerned with user issues this group was downright enthusiastic about the prospect of a common editor indeed this proposal has been reviewed by the group and is endorsed by it reasons the need for a common editor might well be obvious to many readers they are encouraged to skip this section which is for the benefit of those who don t already see the light in the first place it s almost axiomatic that to use a time sharing system you have to be able to create files datasets segments even if you re only using the network to send mail you d still like to be able to create a file separately so as to be able to edit it before sending and if you want to write a program or even make a runoff source file you simply must be able to use some editor command on the system at hand unfortunately there are even more editors than there are systems and each one has it own conventions and peculiarities so network users who use several servers as opposed to those who use the network only to access a particular system all the time are faced with the unpleasant chore of developing several sets of incompatible reflexes if they want to get along this can certainly be done it has been by a number of members of the network working group neted spec p the real kicker however comes when we consider the needs of those users who are coming into the network community in ever increasing numbers who are not professional programmers they just want to get some work done on the net that is irrespective of which operating system they might be talking to they are likely to be appalled rather than amused by having to learn a dozen ways of getting to first base therefore it seems clear than not only do we need a common editor but we also need a simple common editor choices simplicity is not the only criterion for rejecting the apparently obvious choice of either teco or qed that it is a strong factor is indicated by the old test of consider explaining it to a naive secretary now consider explaining it to a corporation president perhaps even worse is the problem of dialects that is features vary across implementations and settling on a common set of features or dialect is likely to be a very hard task for programmers tend to get very fond of their familiar goodies besides both teco and qed have their own strong fanatic advocates who s probably never be willing to settle for the other one further not every system has both and implementing the other is a fairly large job even if the nwg could agree on which and how much at any rate the difficulties seem overwhelming when it comes to choosing a high powered editor as the common editor therefore i tried to think of a nice low powered editor and it suddenly occurred to me that i not only knew of one but it was even fairly well documented the editor in question is known on multics as eds the same member of the ed family of editors which started on ctss a line oriented context editor no regular expressions but also no line numbers it is used as an extended example of programming in the multics environment in chapter of the multics programmers manual which gives an annotated pl i listing of the actual working program it is simple to learn and should be quite easy to implement pl i version serves as a detailed model with only equivalent system calls and choice of language to worry about i urge its adoption as the common network editor to be known on all participating servers as neted and or neted documentation in view of the fact that if eds neted is adopted only perhaps a dozen members of the nwg will actually have to implement one it seems wasteful to distributed some pages of the mpm to everyone especially since most of the parties concerned have access to an mpm already another problem solved by not including it here is that of whether i d be violating copyright by doing so the exact reference is pp of chapter of part i of the multics programmer s manual neted spec p anybody who needs a copy can let me know although the emphasis in the document is naturally enough on the multics specific aspects i believe that the listing is clear enough to serve as a model to implementors without any great difficulty if we do get to the implementation stage i ll be glad to try to explain any non obvious system calls either individually or in a follow up memo but even though we initiate where you open or we call los read ptr where you iot tty or something it shouldn t cause much trouble for that matter some implementers might prefer to ignore the existing program and simply work from the function specifications below limitations it became abundantly clear during the course of the review of this document by the user interest group that the limitations of neted must be acknowledged even insisted upon and explained here in the first place it must be emphasized that it is not being proposed as the network editor rather it is an insistently simple minded editor for two major reasons it is meant for use mainly by non professional programmers and more important still it is meant to be extremely easy to implement therefore it seems far more important to go with the published program with all its warts than to specify the addition of new undebugged features the idea is to make it implementable in man days by an average to average plus programmer instead of in man weeks by a superstar programmer in the second place the very act of adding new features is fraught with peril to take some examples from the comments i received during the review phase in the first draft i inadvertently failed to document the mechanism by which the ability to go backwards i e to reverse the direction of the current line pointer described below is actuated several reviewers argued strongly for the inclusion of such a mechanism but not knowing it was already in the code i argued successfully for leaving it out on the grounds that we should stick to what s in the existing code which is known to work as published even what to call such a new request would have been debatable should it be and become the only non alphabetic name should it be b for bottom should n for next become and so on although this particular issue turned out be a false alarm i ve left it in to emphasize the sort of pitfalls we can get into by haggling over particular features another familiar feature is some sort of read request so that the file name need not be specified as an argument to the command then of course one would also want a create or make request and perhaps a file delete request it keeps going on and on the point i think is that if we allow ourselves to go into tinker mode we could spend as many years striving to achieve consensus on what features to add as we ve spent on telnet or ftp and still not please everyone therefore i urge the nwg to accept the contention that having a working model to use as neted spec p a pattern is more important than any particular additional features even though i myself find for what s the current line s number annoying to live without responses for the benefit of those who don t want to plow through the functional spec this seems to be a good spot to indicate what appropriate responses to this proposal would be ideally i d like to hear from a responsible system programmer at say tenex ccn ucsd ucsb ames one of the dec hosts and from any of the experimental servers who happen to be interested that they think it s a fine idea and why don t i log in next week to try their neteds next most desirable would be agreement in principle followed by specific inquiries about eds i would hope that haggling over specific features wouldn t occur as we re not trying to do a definitive editor just an easy commonly implemented one based on an existing implementation but unfortunately i can t legislate such haggles out of existence at the very least i d hope to either hear or see reasoned arguments why it s not worth doing as usual phone mail mail map cn in sndmsg or map cn in mail on multics or rfc s are the assumed media for responding usage the following is intended to serve double duty as both a functional spec now and with the addition of some examples a users manual later so if it seems to tutorial i m sorry and if it doesn t seem tutorial enough assuming the addition of examples please let me know as is typical of context editors the neted command is used both for creating new files and for altering already existing files where files are named collections of character encoded data in the storage hierarchy of a time sharing system consequently neted operates in two distinct modes called input mode and edit mode when neted is used to create a file that is when it is invoked from command level with an argument which specifies the name of a file which does not already exist in the user s working directory it is automatically in input mode it will announce this fact by outputting a message along the lines of file soandso not found input until you take explicit action to leave input mode everything you type will go into the specified file actually it goes into a working copy of the file and into the real file only when you indicate a desire to have that happen to leave input mode type a line consisting of only a period and the appropriate new line character where is whatever it takes to cause a telnet new line to be generated from your terminal neted spec p after leaving input mode you are in edit mode here you may issue various requests which will allow you to alter the contents of the working file re enter input mode if you wish and eventually cause the file to be stored note that edit mode is entered automatically if the argument you supplied to neted specified an existing file regardless of how it was entered being in edit mode is confirmed by neted s outputting a message of the form edit editing is performed relative to conceptual pointer which specifies the current line and many requests pertain to either moving the pointer or changing the contents of the current line when edit mode is entered from input mode the pointer is at the last line input when entered from command level the pointer is at the top of the file neted s edit mode requests follow in order intended to be helpful two important reminders the requests may only be issued from edit mode and each one is a line i e terminates in a new line carriage return linefeed is appropriate to the user telnet being employed syntax note if the request takes an argument there must be at least one space blank between request s name and the argument n m for unsigned m the n ext request causes the pointer to be moved down m lines if m is negative the pointer is moved up m lines if m is not specified the pointer is moved one line if the end of the file is reached an end of file reached by n m message is output by neted the pointer is left after the last line l string the l ocate request causes the pointer to be moved to the net line containing the character string string which may contain blanks the line is output if no match is found a message of the form end of file reached by l string will be output and the pointer will have returned to the top of the file the search will not wrap around the end of the file however if the string was above the starting position of the pointer a repetition of the locate request will find it in view of the fact that the pointer would have been moved to the top of the file to find any occurrence of the string rather than the next occurrence it is necessary to move the pointer to the top of the file before doing the locate see following request t move the pointer to the top of the file neted spec p b move the pointer to the bottom of the file and enter input mode leave the pointer where it is and enter input mode first new line goes after current old line i string the i nsert request cause a line consisting of string which will probably contain blanks to be inserted after the current line the pointer is moved to the new line edit mode is not left r string the r eplace request causes a line consisting of string probably containing blanks to replace the current line p m the p rint request causes the current line and the succeeding m i lines to be output if m is not specified only the current line will be output end of file considerations are the same as with n c s s m g the c hange request is quite powerful although perhaps a bit complex to new users in the line being pointed at the string of characters s is replaced by the string of characters s if s is void s will be inserted at the beginning of the line if s is void s will be deleted from the line any character not appearing within either character string may be used in place of the slash as a delimiter if a number m is present the request will affect m lines starting with the one being pointed at all lines in which a change was made are printed the pointer is left at the last line scanned if the letter g is absent after the final delimiter only the first occurrence of s within a line will be changed if g for global is present all occurrences of s within a line will be changed if s is void g has no effect note well blanks in both strings are significant and must be counted exactly end of file considerations are the same as with n d m the d elete request causes m lines including the current one to be deleted from the working copy of the file if m is not specified only the current line is deleted the pointer is left at a null line above the first undeleted line end of file considerations are the same as with n neted p w write out the working copy into the storage hierarchy but remain in neted useful for those who fear crashes and don t want to lose all the work performed save write out the working copy into the storage hierarchy and exit from neted additional specs a on multics type ahead is permitted this approach is recommended for all versions of neted but is of course not required as various servers ncp implementations may prohibit it however b if an error is detected the offending line is output and pending typeahead if any must be discarded to guard against the possibility of the pending request s being predicated on the success of erroneous request c the command is not reinvokable in the sense that work is lost if you quit out of it via the telnet interrupt process command or its equivalent indeed quitting out is the general method of negating large amounts of incorrect work and retaining the original file intact when the time comes i ll be glad to furnish examples for the users manual version but for now that s all there is note it really does work unsophisticated though it may be i think that it s sufficient to get new users going and necessary to give them a fighting chance it would even be of utility within the nwg for those of us who don t like having to learn new editors all the time if anybody wants to try it i ll make a version available to anonymous users see the multics section in the resource notebook if you don t already know how to get in our sampling account under the name neted if you do try it please delete files when done with them knowledgeable multics users with their own accounts can instead link to udd cn map neted it is also there under the names eds if you want to save typing a couple of characters 