 network working group r anderson request for comments a harslem nic j heafner rand december language machine for data reconfiguration introduction in nwg rfc we mentioned the needs for data reconfiguration along with a complier executor version of a form machine to perform those manipulations this note proposes a different approach to the form machine specifically we describe a syntax driven interpreter that operates on a grammar which is an ordered set of replacement rules following the interpreter description are some real world examples of required data reconfigurations that must occur between rand consoles and the remote job system on the ucla lastly we suggest that the protocol manager mentioned in nwg rfc can be simplified by using the form machine and two system forms specified a priori in the code caveat the form machine is not intended to be a general purpose programming language note the absence of declaration statements etc the form machine i forms a form is an ordered set of rules f r rn the first rule r is the rule of highest priority the last rule rn is the rule of lowest priority the form machine gets as input a list of addresses and lengths that delimit the input stream s a list of addresses and lengths that delimit the output area s a pointer to a list of form s a pointer to the starting position of the input stream and a pointer to the starting position of the output area the form machine applies a form to the input string emitting an output string in the output area the form is applied in the following manner anderson et al page rfc language machine for data december step r is made the current rule step the current rule is applied to the input data step a if the rule fails the rule of priority one lower is made current b if the rule succeeds the rule of highest priority is made current c when the rule of lowest priority fails the form fails and application of the form to the input data terminates step continue at step in addition during step if the remainder of the input string is insufficient to satisfy a rule then that rule fails and partial results are not emitted if a rule fills the output string application of the form is terminated ii rules a rule is a replacement operation of the form left hand side right hand side both sides of a rule consists of a series of zero or more terms see below separated by commas the left hand side of the rule is applied to the input string at the current position as a pattern match operation if it exactly describes the input the current input position pointer is advanced over the matched input the right hand side emits data at the current position in the output string and the current output position pointer is advanced over the emitted data iii terms a term is a variable that describes the input string to be matched or the output string to be emitted a term has three formats anderson et al page rfc language machine for data december term format name data replication value length type expression expression expression any of the fields may be absent the name is a symbolic name of the term in the usual programming language sense it is a single lower case alphabetic that is unique within a rule the data type describes the kind of data that the term represents it is a member of the set d o x a e b data types have the following meanings and implied unit lengths char meaning length d decimal number bit o octal number bits x hexadecimal number bits a ascii character bits e ebcdic character bits b binary number bit the replication expression is a multiplier of the value expression a replication expression has the formats an arithmetic expression of the members of the set v name l name numerals programming variables the v name is a value operator that generates a numeric value of the named data type and l name is a length operator that generates a numeric value of the named string length the programming variable is described under term format three arithmetic operators are shown below and have their usual meanings anderson et al page rfc language machine for data december or the terminal which means an arbitrary multiple of the value expression the value expression is the unit value of a term expressed in the format indicated by the data type the value expression is repeated according to the replication expression a value expression has the format same as part of the replication expression where again v name produces a numeric value or a single member of the set v name quoted literal where v name produces a data type e or a value note that concatenation is accomplished through multiple terms the length expression is the length of the field containing the value expression as modified by the replication expression it has the same formats as a replication expression thus the term x e f l x is named x is of type ebcdic has the value fffffff and is of length the term y a on the left hand side of a rule would be assigned the next bits of input as its value on the right hand side it would only cause the output pointer to be advanced bit positions because is has no value expression contents to generate data in the output area anderson et al page rfc language machine for data december term format name label the label is a symbolic reference to a previously named term in the rule it has the same value as the term by that name the identity operation below illustrates the use of the label notation a a a the a on the right hand side causes the term a to be emitted in the output area it is equivalent to the rule below a a av a l a term format name programming connective operand variable expression a programming variable is a user controlled data item that does not explicitly appear in the input output streams its value can be compared to input data to constants and used to generate output data programming variables are single lower case greek symbols they are used to generate indices counters etc in the output area to compare indices counters etc in the input area and to bind replacement rules where the data is context sensitive explained later a connective is a member of the set the left arrow denotes replacement of the left part by the right part the other connectives are comparators anderson et al page rfc language machine for data december the operand expression is an arithmetic expression of members of the set programming variables v name l name numerals for example if the programming variable alpha has the value and the rule a h alpha a alpha alpha h alpha is applied exhaustively to string of hexadecimal digits the output would be the hexadecimal string note the above rule is equivalent to a b alpha a alpha alpha b alpha iv restrictions and interpretations of term functions when a rule succeeds output will be generated in the rule a a a ev a e the input string is searched for an arbitrary number of asciis followed by a terminal the asciis a are converted to ebcdic in a byte field followed by a terminal this brings out three issues arbitrary length terms must be separated by literals since the data is not type specific the may only be used on the left hand side of a rule a truncation padding scheme is needed anderson et al page rfc language machine for data december the truncation padding scheme is as follows a character to character types a e output is left justified with truncation or padding with blanks on the right b character to numeric a e to d o h b c numeric to character d o h b to a e d numeric to numeric d o h b output is right justified with padding or truncation on the left padding is zeros if output is numeric examples of some data reconfigurations the following are examples of replacement rule types for specifically needed applications literal insertion to insert a literal separate the left hand side terms for its insertion on the right a a b a a e lit b the ascii characters are emitted in the output area with the ebcdic literal lit inserted after the first ascii characters deletion terms on the left are separated so that the right side may omit unwanted terms b a a ev a l a only the ascii characters are emitted as ebcdic in the output area the binary digits are discarded spacing in the output buffer where a pre formatted output buffer exists typically a display buffer spacing can be realized by omitting the replication and value functions from a term on the right anderson et al page rfc language machine for data december a a e ev a the e causes bit positions to be skipped over in the output area then the ascii characters are converted to ebcdic and emitted at the current output position arbitrary lengths some devices programs generate a variable number of characters per line and it is desirable to produce fixed length records from them a a ev a the ascii characters are truncated or padded as required and converted to ebcdic in a character field transposition fields to be transposed should be isolated as terms on the left a x b a ev b l b a string length computation some formats require the string length as part of the data stream this can be accomplished by the length function a e b x ff bl a l b av a l a b the length term is emitted first in a bit field in this case the length includes the length field as well as the ascii character field expansion and compression of repeated symbols the following rule packs repeated symbols a e b e v a l b bl b a given the input string below three successive applications of the rule will emit the output string shown input xxxxyyzzzzzzz output x y z anderson et al page rfc language machine for data december application of the form machine to program protocols the protocol manager mentioned in nwg rfc needs several interesting features that are properties of the above form machine in certain instances during a protocol dialog it might be acceptable to get either an accept on connection a or an allocation on connect b that is the order is sometimes unimportant the defined procedure for applying rules allows for order independence a logger might send us a socket number embedded in a regular message the socket number is intended to be the first of a contiguous set of sockets that we can use to establish connections with some program we wish to extract the socket number field from the regular message perhaps convert it to another format and add to it to get the additional socket names as a result of the regular message we wish to emit several init system calls that include the socket numbers that we have computed the value operator and the arithmetic operators of the form machine can do this a third property of the form machine that is applicable to protocols is inter and intra rule binding to resolve context sensitive information in general we wish rules to be order independent but in certain cases we wish to impose an ordering using the logger in nwg rfc as an example the close that is sent by the logger can have two different meanings depending upon its context if the close is sent before the regular message containing the socket number then it means call refused if the regular message precedes the close then the call is accepted since the close has contextual meaning we must bind it to the regular message to avoid introducing if and then into the form machine language assume for a moment that we can express system calls in form machine notation the notation below is for illustration only and is not part of the form machine language we have two ways to bind the regular message to the close by intra rule binding we insist that the close be preceded by a regular message reg msg close now assume for a moment that the remote party must have an echo after each transmission since we must emit an echo after receiving the regular message and before the close is sent then we must use inter rule binding this can be accomplished with the programming variable it is assigned a value when the regular message is received and the value is tested when the close is received reg msg echo lambda anderson et al page rfc language machine for data december close lambda to illustrate inter rule binding via the programming variable the connection protocol in nwg rfc could be represented by passing the following form to a protocol manager the notation below is for illustration only and is not part of the form machine language init parameters alpha send an init rts init parameters allocate parameters send an allocate in response to the connection completion an str received reg msg parameters alpha when the messages bearing link numbers is received set an internal indicator the extraction of the link is not illustrated close parameters alpha init parameters init parameters when the close is received following the regular message is checked to see that the regular message was received before establishing the duplex connection if the close is received with no regular message preceding it call refused the form will fail since no rules is satisfied this protocol can be handled via a single form containing four replacement rules we have examined similar representations for more complex protocol sequences such protocol sequences stored by name are an asset to the user he can request a predefined sequence to be executed automatically anderson et al page rfc language machine for data december two system forms to handle protocol statements assume that we have a protocol manager that manages protocol sequences between consoles and the network the consoles generate and accept ebcdic character strings and the network transmits binary digits the console user has a language similar to system calls in which he can create and store protocol sequences via protocol manager and at the same time he can indicate which commands are expected to be sent and which are to be received upon command the protocol manager can execute this sequence with the network generating commands and validating those received assume also that the protocol manager displays the dialog for the console user as it progresses in order to translate between console and network for generating comparing and displaying commands the protocol manager can use the form machine two system forms are needed see fig one is a console to network set of rules containing ebcdic to binary for all legal commands the other is a mirror image for network to console request since language design is not our forte we would like comments from those with more experience than we anderson et al page rfc language machine for data december system form c n one rule for each legal command binary ebcdic network consoles binary ebcdic system form n c one rule for each legal response figure application of system form for protocol management anderson et al page rfc language machine for data december distribution list alfred cocanower merit gerry cole sdc les earnest stanford bill english sri james forgie lincoln laboratory jennings computer center case nico haberman carnegie melon robert kahn bb n peggy karp mitre benita kirstel ucla tom lawrence radc isim james madden university of illinois george mealy harvard thomas o sullivan raytheon larry roberts arpa ron stoughton ucsb albert vezza mit barry wessler utah the original document included non ascii characters the greek letters alpha and lambda have been spelled out and enclosed in square brackets a curly l character has been replaced by capital l left and right arrows have been replaced by and respectively rfc editor this rfc was put into machine readable form for entry into the online rfc archives by lorrie shiota anderson et al page 