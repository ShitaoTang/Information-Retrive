 network working group dave walden request for comments bolt beranek and newman july a note on interprocess communication in a resource sharing computer network the attached note is a draft of a study i am still working on it may be of general interest to network participants walden page rfc interprocess communication in a computer network july interprocess communication in a resource sharing computer network introduction a resource sharing computer network is defined to be a set of autonomous independent computer systems interconnected so as to permit each computer system to utilize all of the resources of each other computer system that is a program running in one computer system should be able to call on the resources of the other computer systems much as it would normally call a subroutine this definition of a network and the desirability of such a network is expounded upon by roberts and wessler in the actual act of resource sharing can be performed in two ways in a pairwise ad hoc manner between all pairs of computer systems in the network or according to a systematic network wide standard this paper develops one possible network wide system for resource sharing i believe it is natural to think of resources as being associated with processes and therefore view the fundamental problem of resource sharing to be the problem of interprocess communication i also share with carr crocker and cerf the view that interprocess communication over a network is a subcase of general interprocess communication in a multiprogrammed environment these views pervade this study and have led to a two part study first a model for a time sharing system having capabilities particularly suitable for enabling interprocess communication is constructed next it is shown that these capabilities can be easily used in a generalized manner which permits interprocess communication between processes distributed over a computer network this note contains ideas based on many sources particularly influential were an early sketch of a host protocol for the arpa network by w crowther of bolt beranek and newman inc bbn and s crocker of ucla ackerman and plummer s paper on the mit pdp time sharing system and discussion with r kahn of bbn about host protocol message control and routing for the arpa network hopefully there are also some original ideas in this note i alone am responsible for the collection of all of these ideas into the system described herein and i am therefore responsible for any inconsistencies or bugs in this system it must be emphasized that this note does not represent an official bbn position on host protocol for the arpa computer network walden page rfc interprocess communication in a computer network july a model for a time sharing system this section describes a model time sharing system which i think is particularly suitable for performing interprocess communication the basic structure of this model time sharing system is not original the model time sharing system has two pieces the monitor and the processes the monitor performs several functions including switching control from process to process as appropriate e g when a process has used enough time or when an interrupt occurs managing core and the swapping medium controlling the passing of control from one process to another i e protection mechanisms creating processes caring for sleeping processes etc the processes perform most of the functions normally thought of as being supervisor functions in a time sharing system system processes as well as the normal user functions user processes a typical system process is the disc handler or the file system for efficiency reasons it may be useful to think of system processes as being locked in core a process can call on the monitor to perform several functions start another equal autonomous process i e load a program or find a copy of a program somewhere that can be shared start it and pass it some initial parameters halt the running process put the current process to sleep pending a specified event send a message to a specified process become available to receive a message from a specified process become available to receive a message from any process send a message to a process able to receive from any process and request a unique number there undoubtedly should also be other monitor functions it is left as an exercise to the reader to convince himself that the monitor he is saddled with can be made to provide these functions most can i will not concern myself with protection considerations here but instead will assume all of the processes are good processes which never make any mistakes if the reader needs a protection structure to keep in mind while he reads this note the capability system described in should be satisfying we now look a little closer at the eight operations listed above that a process can ask the monitor to perform walden page rfc interprocess communication in a computer network july start this operation starts another process it has two parameters some kind of identification for the program that is to be loaded and a parameter list for that program once the program is loaded it is started at its given entry point and passed its parameter list in some well known manner the process will continue to exist until it halts itself halt this operation puts the currently running process to sleep pending the completion of some event the operation has one parameter the event to be waited for sample events are arrival of a hardware interrupt arrival of a message from another process etc the process is restarted at the instruction after the sleep command the monitor never unilaterally puts a process to sleep except when the process overflows its quantum receive this operation allows another process to send a message to this process the operation has four parameters the port defined below awaiting the message the port a message will be accepted from a specification of the buffer available to receive the message and a location of transfer to when the transmission is complete in other words an interrupt location any message port may be used to allow interrupts event channels etc the user programs what he wants send this operation sends a message to some other process i suppose a process could also send a message to itself it has four parameters a port to send the message to the port the message is being sent from the message and a location to transfer to when the transmission is complete receive any this operation allows any process to send a message to this process the operation has four parameters the port awaiting the message the buffer available to receive the message a location to transfer to when the message is received and a location where the port which sent the message may be noted send from any this operation allows a process to send a message to a process able to receive a message from any process it has the same four parameters as send the necessity for this operation will be discussed below unique this operation obtains a unique number from the monitor a port is a particular data path to or from a process all ports have an associated unique number which is used to identify the port ports are used in transmitting messages from one process to another in the following fashion consider two processes a and b wishing to communicate process a executes a receive at port n from port m walden page rfc interprocess communication in a computer network july process b executes a send to port n from port m the monitor matches up the port numbers and transfers the message from process b to process a as soon as the buffer has been fully transmitted out of process b process b is restarted at the location specified in the send operation as soon as the message is fully received at process a process a is restarted at the location specified in the receive operation just how the processes come by the correct port numbers with which to communicate with other processes is not the concern of the monitor this problem is left to the processes an example suppose that our model time sharing system is initialized to have several processes always running additionally these permanent processes have some universally known and permanently assigned ports or perhaps there is only one permanently known port which belongs to a directory process which keeps a table of permanent process well known port associations suppose that two of the permanently running processes are the logger process and the teletype scanner process when the teletype scanner process first starts running it puts itself to sleep awaiting an interrupt from the hardware teletype scanner the logger process initially puts itself to sleep awaiting a message from the teletype scanner process via well known permanent send and receive ports the teletype scanner process keeps a table indexed by teletype number containing in each entry a port to send characters from that teletype to and a port at which to receive characters for that teletype if a character arrives waking up the teletype scanner process and the process does not have any entry for that teletype it gets a pair of unique numbers from the monitor via unique and sends a message containing this pair of numbers to the logger process using the ports that the logger process is known to have a receive pending for actually the scanner process could always use the same pair of port numbers for a particular teletype as long as they were passed on to only one copy of the executive at a time the scanner process also enters the pair of numbers in the teletype table and sends the characters and all future characters from this teletype to the port with the first number from the port with the second number the scanner process probably also passes a second pair of unique numbers to the logger process for it to use for teletype output and does a receive using these numbers the logger process when it receives the message from the scanner process starts up a copy of what sds tss users call the executive that program which prints file directories tells who is on other teletypes runs subsystems etc and passes this copy of the executive the port numbers so this executive process can also do its in s and out s to the teletype using these ports if the logger process wants to get a job number and password from the user it can temporarily use the port numbers to communicate with the user before it passes them on to the executive walden page rfc interprocess communication in a computer network july port numbers are often passed among processes more rarely a port is transferred to another process it is crucial that once a process transfers a port to some other process that the first process no longer use the port we could add a mechanism that enforces this the protected object system of is one such mechanism of course if the protected object system is available to us there is really no need for two port numbers to be specified before a transmission can take place the fact that a process knows an existing receive port number is prima facie evidence of the process right to send to that port the difference between receive and receive any ports then depends solely on the number of copies of a particular port number that have been passed out a system based on this approach would clearly be preferable to the one described here if it was possible to assume all of the autonomous time sharing system in a network would adopt this protection mechanism if this assumption cannot be made it seems more practical to require both port numbers note that somewhere in the monitor there must be a table of port numbers associated with processes and restart locations the table entries are cleared after each send receive match is made also note that if a process is running perhaps asleep and has receive any pending then any process knowing the receive port number can talk to that process without going through loggers or any of that this is obviously essential within a local time sharing system and seems very useful in a more general network if the ideal of resource sharing is to be reached when a send is executed nothing happens until a matching receive is executed if a proper receive is not executed for some time the send is timed out after a while and the sending process is notified if a receive is executed but the matching send does not happen for a long time the receive is timed out and the receiving process is notified a receive any never times out but may be taken back a send from any message is always sent immediately and will be discarded if a proper receiver does not exist an error message is not returned and acknowledgment if any is up to the processes if the table where the send and receive are matched up ever overflows a process originating a further send or receive is notified just as if the send or receive timed out generally well known permanently assigned ports are used via receive any and send from any the permanent ports will most often be used for starting processes going and consequently little data will be sent via them walden page rfc interprocess communication in a computer network july still another example this time a demonstration of the use of the fortran compiler we have already explained how a user sits down at his teletype and gets connected to an executive we go on from there the user is typing in and out of the executive which is doing sends and receives eventually the user types run fortran and the executive asks the monitor to start up a copy of the fortran compiler and passes to fortran as start up parameters the two ports the executive was using to talk to the teletype fortran is of course expecting these parameters and does sends and receives to these ports to discover what input and output files the user wants to use fortran types input file to the user who responds f fortran then sends a message to the file system process which is asleep waiting for something to do the message is sent via well known ports and it asks the file system to open f for input the message also contains a pair of ports that the file system process can use to send its reply the file system looks up f opens it for input makes some entries in its open file tables and sends a message back to fortran which contains the ports which fortran can use to read the file the same procedure is followed for the output file when the compilation is complete fortran returns the teletype port numbers back to the executive which has been asleep waiting for a message from fortran and then fortran halts itself the file system process goes back to sleep when it has nothing else to do the reader should have noticed by now that i do not like to think of a new process consisting of a new conceptual copy of a program being started up each time another user wishes to use the program rather i like to think of the program as a single process which knows it is being used simultaneously by many other processes and consciously multiplexes among the users or delays service to users until it can get around to them again the file system process can keep a small collection of port numbers which it uses over and over if it can get file system users to return the port numbers when they are done with them of course when this collection of port numbers has eventually dribbled away the file system can get some new unique numbers from the monitor note that when two processes wish to communicate they set up the connection themselves and they are free to do it in a mutually convenient manner for instance they can exchange port numbers or one process can pick all the port numbers and instruct the other process which to use of course in a particular implementation of a time sharing system the builders of the system might choose to restrict the processes execution of sends and receives and might forbid arbitrary passing around of port numbers requiring instead that the monitor be called or some other special program to perform these functions walden page rfc interprocess communication in a computer network july flow control is provided in this system by the simple method of never starting a send from one process until a receive is executed by the receiver of course interprocess messages may be sent back and forth suggesting that a process stop sending or that space be allocated etc interprocess communication between remote process the system described in the previous section easily generalizes to allow interprocess communication between processes at geographically different locations as for example within a computer network consider first a simple configuration of processes distributed around the points of a star at each point of the star there is an autonomous time sharing system a rather large smart computer system called the network controller exists at the center of the star no processes can run in this center system but rather it should be thought of as an extension of the monitor of each time sharing system in the network it should be obvious to the reader that if the network controller is able to perform the operations send receive send from any receive any and unique and that if all of the monitors in all of the time sharing systems in the network do not perform these operations themselves but rather ask the network controller to perform these operations for them then we have solved the problem of interprocess communication between remote processes we have no further change to make the reason everything continues to work when we postulate the existence of the network controller is that the network controller can keep track of which receives have been executed and which sends have been executed and match them up just as the monitor did in the model time sharing system a networkwide port numbering scheme is also possible with the network controller knowing where i e at which site a particular port is at a particular time next consider a more complex network in which there is no common center point making it necessary to distribute the functions performed by the network controller among the network nodes in the rest of this section i will show that it is possible to efficiently and conveniently distribute the functions performed by the star network controller among the many network sites and still enable general interprocess communication between remote processes some changes must be made to each of the four send receive operations described above to adapt them for use in a distributed network to receive is added a parameter specifying a site to which the receive walden page rfc interprocess communication in a computer network july is to be sent to send from any and send is added a site to send the send to although this is normally the local site both receive and receive any have added the provision for obtain the source site of any received message thus when a receive is executed the receive is sent to the site specified possibly a remote site concurrently a send is sent to the same site normally the local site of the process executing the send at this site called the rendezvous site the receive is matched with the proper send and the message transmission is allowed to take place to the site from whence the receive came a receive any never leaves its originating site and therein lies the necessity for send from any it must be possible to send a message to a receive any port and not have the message blocked waiting for receive at the sending site of course it would be possible to construct the system so the send receive rendezvous takes place at the receive site and eliminate the send from any operation but in my judgment the ability to block a normal send transmission at the source site more than makes up for the added complexity somewhere at each site a rendezvous table is kept this table contains an entry for each unmatched send or receive received at that site and also an entry for all receive anys given at that site a matching send receive pair is cleared from the table as soon as the match takes place or perhaps when the transmission is complete as in the similar table kept in the model time sharing system send and receive entries are timed out if unmatched for too long and the originator is notified receive any entries are cleared from the table when a fulfilling message arrives the final change necessary to distribute the network controller functions is to give each site a portion of the unique numbers to distribute via its unique operation i ll discuss this topic further below to make it clear to the reader how the distributed network controller works an example follows the details of what process picks port numbers etc are only exemplary and are not a standard specified as part of the system suppose there are two sites in the network k and l process a at site k wishes to communicate with process b at site l process b has a receive any pending at port m walden page rfc interprocess communication in a computer network july site k site l process a process b port m receive any process a fortunately knows of the existence of port m at site l and sends messages using the send from any operation from port n to port m the message contains two port numbers and instructions for process b to send messages to process a to port p from port q site k s site number is appended to this message along with the message s send port n site k site l process a process b port n send from port m any to port m site l containing k n p q process a now executes a receive at port p from port q process a specifies the rendezvous site to be site l walden page rfc interprocess communication in a computer network july site k site l r e n t d a e b process b process a z l v e o port p receive u message s to site l containing p q k a receive message is sent from site k to site l and is entered in the rendezvous table at site l at some other time process b executes a send to port p from port q specifying site l as the rendezvous site site k site l r e n t d a e b process b process a z l v e o port p u port q send s to site l containing p q a rendezvous is made the rendezvous table entry is cleared and the transmission to port p at site k takes place the send site number and conceivably the send port number are appended to the messages of the transmission for the edification of the receiving process walden page rfc interprocess communication in a computer network july site k site l process a process b port p port q transmission to port t site k containing data and l process b may simultaneously wish to execute a receive from port n at port m note that there is only one important control message in this system which moves between sites the type of message that is called a host host protocol message in this control message is the receive message there are two other possible intersite control messages an error message to the originating site when a receive or send is timed out and the send message in the rare case when the rendezvous site is not the send site of course there must also be a standard format for messages between ports for example the following walden page rfc interprocess communication in a computer network july rendezvous site destination site source site receive port receive port receive port send port send port send port source port data data data transmitted transmitted received by send by network by receive process controller process note for a send from any message the rendezvous site is the destination site in the model time sharing system it was possible to pass a port from process to process this is still possible with a distributed network controller the reader unconvinced of the utility of port passing is directed to read the section on reconnection in remember that for a message to be sent from one process to another a send to port m from port n and a receive at port m from port n must rendezvous normally at the send site both processes keep track of where they think the rendezvous site is and supply this site as a parameter of appropriate operations the receive process thinks it is the send site and the send process normally thinks it is the send site also since once a send and a receive rendezvous the transmission is sent to the source of the receive and the entry in the rendezvous table is cleared and must be set up again for each further transmission from n to m it is easy for a receive port to be moved if a process sends both the port numbers and the rendezvous site number to a new process at some other site which executes a receive using these same old port numbers and rendezvous site specification the sender never knows the receiver has moved it is walden page rfc interprocess communication in a computer network july slightly harder for a send port to move however if it does the pair of port numbers that has been being used for a send and the original rendezvous site number are passed to the new site the process at the new send site specifies the old rendezvous site with the first send from the new site the receive process will also still think the rendezvous site is the old site so the send and receive will meet at the old site when they meet the entry in the table at that site is cleared the rendezvous site number for the send message is changed to the site which originated the send message and both the send and receive messages are sent to the new send site just as if they had been destined for there in the first place the send and receive then meet again at the new rendezvous site and transmission may continue as if the port had never moved since all transmissions contain the source site number further receives will be sent to the new rendezvous site it is possible to discover that this special manipulation must take place because a send message is received at a site which did not originate the send message everything is so easily changed because there are no permanent connections to break and move as in the once proposed reconnection scheme for the arpa network that is connections only exist fleetingly in the system described here and can therefore be remade between any pair of processes which at any time happen to know each other s port numbers and have some clue where they each are of course all of this could have been done by the processes sending messages back and forth announcing any potential moves and the new site numbers walden page rfc interprocess communication in a computer network july references l roberts and b wessler computer network development to achieve resource sharing proceedings sjcc v vyssotsky f f corbato and r graham structure of the multics supervisor proceedings fjcc c carr s crocker and v cerf host host communication protocol in the arpa network proceedings sjcc f heart et al the interface message processor for the arpa computer network proceedings sjcc w ackerman and w plummer an implementation of multi processing computer system proceedings gatlinburg symposium on operating system principles j dennis and e van horn programming semantics for multiprogramming computation proceedings of the san dimes conference on programming language and pragmatics b lampson dynamic protection structures proceedings fjcc b lampson an overview of the cal time sharing system computer center university of calif berkeley p hansen the nucleus of a multiprogramming system cacm april s crocker arpa network working group note j postel and s crocker arpa network working group note b lampson lectures walden page rfc interprocess communication in a computer network july appendix an application only one resource sharing computer network currently exists the aforementioned arpa network in this appendix i hope to show that the system that was described in this note can be applied to the arpa network a significant body of work exists on interprocess communication within the arpa network this work comes in several almost distinct pieces the host imp protocol imp imp protocol and the host host protocol i assume familiarity with this work in the subsequent discussion see references specifications for the inter connection of a host to an imp bbn report no and arpa network working group notes in the arpa network the imp s have sole responsibility for correctly transmitting bits from one site to another the hosts have sole responsibility for making interprocess connections both the host and imp are concerned and take a little responsibility for flow control and message sequencing application of the interprocess communication system i have described leads me to different allocation of responsibility the imp still continues to correctly move bits from one site to another but the network controller also resides in the imp and flow control is completely in the hands of the processes running in the hosts although perhaps they use mechanisms provided by the imps the imps provide the send receive send from any receive any and unique operations in slightly altered forms for the hosts and also maintain the rendezvous tables including moving of send ports when necessary it is perhaps easiest to step through the five operations again send the host gives the imp a send port number a receive port number the rendezvous site and a buffer specification e g start and end beginning and length the send is sent to the rendezvous site normally the local site when the matching receive arrives the host is notified of the receive port of the just arrived receive message this port number is sufficient to identify the sending process although a given time sharing system may have to keep internal tables mapping this port number into useful internal process identifiers simultaneously the imp will begin to ask the host for specific chunks of the data buffer these chunks will be sent off to the destination as the imp s rfnm control allows if a rfnm is not received for too long implying a message has been lost in the network the host is asked for the same chunk of data again which also allows messages to be completely thrown away by the imp network walden page rfc interprocess communication in a computer network july if that should ever be useful but the host has the option to abort the transmission at this time while a transmission is taking place the host may ask the imp to perform other operations including other sends a second send over a pair of ports already in the act of transmission is noted and the send becomes active as soon as the first transmission is complete a third identical send results in an error message to the host if a send times out an error is returned also receive the host gives the imp a send port a receive port a rendezvous site and a buffer description the receive message is sent to the rendezvous site when chunks of a transmission arrive for the receive port they are passed to the host along with receive port number and perhaps the send port number and an indication to the host where to put the data in its input buffer when the last of the send buffer is passed into the host it is marked accordingly and the host can then detect this a second receive over the same port pair is allowed a third results in an error message to the host the mechanism described in this and the previous paragraphs allows a pair of processes to always have both a transmission in progress and the next one pending therefore no efficiency is lost on the other hand each transmission must be preceded by a receive into a specified buffer thus providing complete flow control it is conceivable that the receive message could allocate a piece of network bandwidth while making its network traverse to the rendezvous site receive any the host gives the imp a receive port and a buffer descriptor this works the same as receive but assumes the local site to be the rendezvous site send from any the host gives the imp receive and send ports the destination site and a buffer descriptor the imp requests and transmits the buffer as fast as possible a send from any for a non existent port is discarded at the destination site rfnm s are tied to the transmission of a particular chunk of buffer just as acknowledgments are now tied to packets and they perform the same function if the hosts allow the imps to reassemble buffers in the hosts by the imp telling the host where it should put a buffer chunk as described above chunks of a single buffer can be transmitted in parallel and several rfnms can be outstanding simultaneously packet reassembly is still done in the imps a final operation must be provided by the imp the unique operation there are many ways to maintain unique numbers and three are presented here the first possibility is for the hosts to ask the imps for the unique numbers originally and then guarantee the walden page rfc interprocess communication in a computer network july integrity of any unique numbers currently owned by local processes and programs using whatever means the host has at its disposal in this case the imps would provide a method for a unique number to be sent from one host to another and would vouch for the number s identity at the new site the second method is to simply give the unique numbers to the processes that are using them depending on the non malicious behavior of the processes to preserve the unique numbers or if an accident should happen the two passwords send and receive ports that are required to initiate a transmission if the unique numbers are given out in a non sequential manner and are reasonably long say bits there is little danger in the final method a user identification is included in the port numbers and the individual time sharing systems guarantee the integrity of these identification bits thus a process while not able to be sure that the correct port is transmitting to him can be sure that some port of the correct user is transmitting this is the so called virtual net concept suggested by w crowther random contents putting these operations in the imp requires the host host protocol program to be written only once rather than many times as is currently being done in the arpa network the imps can stop a specific host transmission by not asking for the next chunk for a while if that should seem necessary to alleviate congestion problems in the communications subnet and the imp might know the approximate time it takes for a receive to get to a particular other site and warn the host to wake up a process shortly before it becomes imminent that a message for that process will be arriving this rfc was put into machine readable form for entry into the online rfc archives by katsunori tanaka walden page 