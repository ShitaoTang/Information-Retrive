 network working group bob anderson request for comments rand nic vint cerf ucla eric harslem john haefner rand jim madden u of illinois bob metcalfe mit arie shoshani sdc jim white ucsb david wood mitre may data reconfiguration service an implementation specification contents i introduction purpose of this rfc motivation ii overview of the data reconfiguration service elements of the data reconfiguration service conceptual network connections conception protocols and message formats example connection configurations iii the form machine input output streams and forms form machine bnf syntax alternate specification of form machine syntax forms rules terms term format term format term format term format anderson et al page rfc data reconfiguration service may the application of a term restrictions and interpretations of term functions term and rule sequencing iv examples remarks field insertion deletion variable length records string length computation transposition character packing and unpacking i introduction purpose of this rfc the purpose of this rfc is to specify the data reconfiguration service drs the drs experiment involves a software mechanism to reformat network data streams the mechanism can be adapted to numerous network application programs we hope that the result of the experiment will lead to a future standard service that embodies the principles described in this rfc motivation application programs require specific data i o formats yet the formats are different from program to program we take the position that the network should adapt to the individual program requirements rather than changing each program to comply with a standard this position doesn t preclude the use of standards that describe the formats of regular message contents it is merely an interpretation of a standard as being a desirable mode of operation but not a necessary one in addition to differing program requirements a format mismatch problem occurs where users wish to employ many different kinds of consoles to attach to a single service program it is desirable to have the network adapt to individual console configurations rather than requiring unique software packages for each console transformation anderson et al page rfc data reconfiguration service may one approach to providing adaptation is for those sites with substantial computing power to offer a data reconfiguration service this document is a specification of such a service the envisioned modus operandi of the service is that an applications programmer defines forms that describe data reconfigurations the service stores the forms by name at a later time a user perhaps a non programmer employs the service to accomplish a particular transformation of a network data stream simply by calling the form by name we have attempted to provide a notation tailored to some specifically needed instances of data reformatting while keeping the notation and its underlying implementation within some utility range that is bounded on the lower end by a notation expressive enough to make the experimental service useful and that is bounded on the upper end by a notation short of a general purpose programming language ii overview of the data reconfiguration service elements of the data reconfiguration service an implementation of the data reconfiguration service drs includes modules for connection protocols a handler of some requests that can be made of the service a compiler and or interpreter called the form machine to act on those requests and a file storage module for saving and retrieving definitions of data reconfigurations forms this section describes connection protocols and requests the next section covers the form machine language in some detail file storage is not described in this document because it is transparent to the use of the service an its implementation is different at each drs host conceptual network connections there are three conceptual network connections to the drs see fig the control connection cc is between an originating user and the drs forms specifying data reconfigurations are defined over this connection the user indicates once forms to be applied to data passing over the two connections described below the user connection uc is between a user process and the drs anderson et al page rfc data reconfiguration service may the server connection sc is between the drs and the serving process since the goal is to adapt the network to user and server processes a minimum of requirements are imposed on the uc and sc originating cc drs sc server user process uc telnet user simplex or duplex protocol process connections connection figure drs network connections connection protocols and message formats over a control connection the dialog is directly between an originating user and the drs here the user is defining forms or assigning predefined forms to connections for reformatting the user connects to the drs via the standard initial connection protocol icp rather than going through a logger the user calls on a particular socket on which the drs alway listens experimental socket numbers will be published later drs switches the user to another socket pair messages sent over a control connection are of the types and formats specified for telnet the data type code should specify ascii the default thus a user at a terminal should be able to connect to a drs via his local telnet for example as shown in fig cc telnet drs user terminal or program figure a telnet connection to drs anderson et al page rfc data reconfiguration service may when a user connects to drs he supplies a six character user id uid as a qualifier to guarantee the uniqueness of his form names he will initially have the following commands defform form endform form these two commands define a form the text of which is chronologically entered between them the form is stored in the drs local file system purge form the named form as qualified by the current uid is purged from the drs file system listnames uid the unqualified names of all forms assigned to uid are returned listform form the source text of a named form is returned duplexconnect user site user receive socket user method server site server receive socket server method user to server form name server to user form name a duplex connection is made between two processes using the receive sockets and the sockets one greater method is defined below the forms define the transformations on these connections simplexconnect user site user socket user method server site server socket server method form a simplex connection is made between the two sockets as specified by method abort site receive socket the reconfiguration of data is terminated by closing both the uc and sc specified in part in the command either one both or neither of the two parties specified in or may be at the same host as the party issuing the request sites and sockets specify user and server for the connection method indicates anderson et al page rfc data reconfiguration service may the way in which the connection is established the following rules apply to these commands commands may be abbreviated to the minimum number of characters to identify them uniquely all commands should be at the start of a line parameters are enclosed in parentheses and separated by commas imbedded blanks are ignored the parameters are form name characters uid characters site characters specifying the hexadecimal host number socket characters specifying the hexadecimal socket number method a single character method has the following values c the site socket is already connected to the drs as a dummy control connection should not be the real control connection i connect via the standard icp does not apply to simplexconnect d connect directly via str rts the drs will make at least the following minimal responses to the user a positive or negative acknowledgement after each line cr lf if a form fails or terminates terminate ascii host as hex ascii socket as hex ascii return code as decimal thus identifying at least one end of the connection anderson et al page rfc data reconfiguration service may example connection configurations there are basically two modes of drs operation the user wishes to establish a drs uc sc connection s between the programs and the user wants to establish the same connection s where he his terminal is at the end of the uc or the sc the latter case is appropriate when the user wishes to interact from his terminal with the serving process e g a logger in the first case fig where the originating user is either a terminal or a program the user issues the appropriate connect command the uc sc can be simplex or duplex the second case has two possible configurations shown in figs and cc sc user telnet uc drs sp figure use of dummy control connection user cc side sc user uc drs sp serving side figure use of server telnet in fig the user instructs his telnet to make two duplex connections to drs one is used for control information the cc and the other is a dummy when he issues the connect he references the dummy duplex connection uc using the already connected option in fig the user has his telnet user side call the drs when he issues the connect the drs calls the telnet server side which accepts the call on behalf of the console this distinction is known only to the user since to the drs the configuration fig appears identical to that in fig two points should be noted telnet protocol is needed only to define forms and direct connections it is not required for the using and serving anderson et al page rfc data reconfiguration service may processes the using and serving processes need only a minimum of modification for network use i e an ncp interface iii the form machine input output streams and forms this section describes the syntax and semantics of forms that specify the data reconfigurations the form machine gets an input stream reformats the input stream according to a form describing the reconfiguration and emits the reformatted data as an output stream in reading this section it will be helpful to envision the application of a form to the data stream as depicted in fig an input stream pointer identifies the position of data in the input stream that is being analyzed at any given time by a part of the form likewise an output stream pointer locates data being emitted in the output stream form current part of input current current output stream pointer form being applied pointer stream figure application of form to data streams anderson et al page rfc data reconfiguration service may form machine bnf syntax form rule rule form rule label inputstream outputstream label integer inputstream terms terms term terms term outputstream terms term identifier identifier descriptor descriptor comparator identifier an alpha character followed by to alphanumerics descriptor replicationexpression datatype valueexpression lengthexpression control comparator value connective value control identifier control replicationexpression arithmeticexpression datatype b o x e a valueexpression value lengthexpression arithmeticexpression connective le lt ge gt eq ne value literal arithmeticexpression arithmeticexpression primary primary operator arithmeticexpression primary identifier l identifier v identifier integer operator literal literaltype string anderson et al page rfc data reconfiguration service may literaltype b o x e a string from to characters control options options s where f where u where s where f where f where s where where arithmeticexpression r arithmeticexpression alternate specification of form machine syntax infinity form rule rule integer terms terms infinity terms term term term identifier identifier descriptor comparator descriptor arithmeticexpression datatype value lengthexpression options comparator value connective value options identifier value options connective le lt ge gt eq ne lengthexpression arithmeticexpression datatype b o x e a value literal arithmeticexpression anderson et al page rfc data reconfiguration service may infinity arithmeticexpression primary operator primary operator primary identifier l identifier v identifier integer literal literaltype character literaltype b o x a e options s where f where f where s where u where where arithmeticexpression r arithmeticexpression identifier alphabetic alphameric forms a form is an ordered set of rules form rule rule form the current rule is applied to the current position of the input stream if the input stream part of a rule fails to correctly describe the contents of the current input then another rule is made current and applied to the current position of the input stream the next rule to be made current is either explicitly specified by the current term in the current rule or it is the next sequential rule by default flow of control is more fully described under term and rule sequencing if the input stream part of a rule succeeds in correctly describing the current input stream then some data may be emitted at the current position in the output stream according to the rule the input and output stream pointers are advanced over the described and emitted data respectively and the next rule is applied to the now current position of the input stream application of the form is terminated when an explicit return r arithmeticexpression is encountered in a rule the user and anderson et al page rfc data reconfiguration service may server connections are closed and the return code arithmeticexpression is sent to the originating user rules a rule is a replacement comparison and or an assignment operation of the form shown below rule label inputstream outputstream a label is the name of a rule and it exists so that the rule may be referenced elsewhere in the form for explicit rule transfer of control labels are of the form below label integer the optional integer labels are in the range integer the rules need not be labeled in ascending numerical order terms the inputstream describing the input stream to be matched and the outputstream describing data to be emitted in the output stream consist of zero or more terms and are of the form shown below inputstream terms outputstream terms terms term terms term terms are of one of four formats as indicated below term identifier identifier descriptor descriptor comparator term format the first term format is shown below identifier the identifier is a symbolic reference to a previously identified term term format in the form it takes on the same attributes value length type as the term by that name term format is normally used to emit data in the output stream identifiers are formed by an alpha character followed by to alphanumeric characters anderson et al page rfc data reconfiguration service may term format the second term format is shown below identifier descriptor term format is generally used as an input stream term but can be used as an output stream term a descriptor is defined as shown below descriptor replicationexpression datatype valueexpression lengthexpression control the identifier is the symbolic name of the term in the usual programming language sense it takes on the type length value and replication attributes of the term and it may be referenced elsewhere in the form the replication expression if specified causes the unit value of the term to be generated the number of times indicated by the value of the replication expression the unit value of the term quantity to be replicated is determined from the data type value expression and length expression attributes the data type defines the kind of data being specified the value expression specifies a nominal value that is augmented by the other term attributes the length expression determines the unit length of the term see the ibm srl form c for a similar interpretation of the pseudo instruction defined constant after which the descriptor was modeled the replication expression is defined below replicationexpression arithmeticexpression arithmeticexpression primary primary operator arithmeticexpression operator primary identifier l identifier v identifier integer the replication expression is a repeat function applied to the combined data type value and length expressions it expresses the number of times that the nominal value is to be repeated the terminal symbol means an arbitrary replication factor it must be explicitly terminated by a match or non match to the input stream this termination may result from the same or the following term anderson et al page rfc data reconfiguration service may a null replication expression has the value of one arithmetic expressions are evaluated from left to right with no precedence the l identifier is a length operator that generates a bit binary integer corresponding to the length of the term named the v identifier is a value operator that generates a bit binary integer corresponding to the value of the term named see restrictions and interpretations of term functions the value operator is intended to convert character strings to their numerical correspondents the data type is defined below datatype b o x e a the data type describes the kind of data that the term represents it is expected that additional data types such as floating point and user defined types will be added as needed data type meaning unit length b bit string bit o bit string bits x bit string bits e ebcdic character bits a network ascii character bits the value expression is defined below valueexpression value value literal arithmeticexpression literal literaltype string literaltype b o x e a the value expression is the nominal value of a term expressed in the format indicated by the data type it is repeated according to the replication expression a null value expression in the input stream defaults to the data present in the input stream the data must comply with the datatype attribute however a null value expression generates padding according to restrictions and interpretations of term functions the length expression is defined below lengthexpression arithmeticexpression anderson et al page rfc data reconfiguration service may the length expression states the length of the field containing the value expression if the length expression is less than or equal to zero the term succeeds but the appropriate stream pointer is not advanced positive lengths cause the appropriate stream pointer to be advanced if the term otherwise succeeds control is defined under term and rule sequencing term format term format is shown below descriptor it is identical to term format with the omission of the identifier term format is generally used in the output stream it is used in the input stream where input data is to be passed over but not retained for emission or later reference term format the fourth term format is shown below comparator value connective value control identifier value control value literal arithmeticexpression literal literaltype string literaltype b o x e a string from to characters connective le lt ge gt eq ne the fourth term format is used for assignment and comparison the assignment operator assigns the value to the identifier the connectives have their usual meaning values to be compared must have the same type and length attributes or an error condition arises and the form fails the application of a term the elements of a term are applied by the following sequence of steps the data type value expression and length expression together specify a unit value call it x anderson et al page rfc data reconfiguration service may the replication expression specifies the number of times x is to be repeated the value of the concatenated xs becomes y of length l if the term is an input stream term then the value of y of length l is tested with the input value beginning at the current input pointer position if the input value satisfies the constraints of y over length l then the input value of length l becomes the value of the term in an output stream term the procedure is the same except that the source of input is the value of the term s named in the value expression and the data is emitted in the output stream the above procedure is modified to include a one term look ahead where replicated values are of indefinite length because of the arbitrary symbol restrictions and interpretations of term functions terms having indefinite lengths because their values are repeated according to the symbol must be separated by some type specific data such as a literal a literal isn t specifically required however an arbitrary number of ascii characters could be terminated by a non ascii character truncation and padding is as follows a character to character a e conversion is left justified and truncated or padded on the right with blanks b character to numeric and numeric to numeric conversions are right justified and truncated or padded on the left with zeros c numeric to character conversions is right justified and left padded with blanks the following are ignored in a form definition over the control connection a telnet control characters b blanks except within quotes c string is treated as comments except within quotes the following defaults prevail where the term part is omitted a the replication expression defaults to one b in an output stream term defaults to one c the value expression of an input stream term defaults to anderson et al page rfc data reconfiguration service may the value found in the input stream but the input stream must conform to the data type and length expression the value expression of an output stream term defaults to padding only e the length expression defaults to the size of the quantity determined by the data type and value expression f control defaults to the next sequential term if a term is successfully applied else control defaults to the next sequential rule if where evaluates to an undefined label the form fails arithmetic expressions are evaluated left to right with no precedence the following limits prevail a binary lengths are bits b character strings are bit characters c identifier names are characters d maximum number of identifiers is e label integers are and value and length operators product bit binary integers the value operator is currently intended for converting a or e type decimal character strings to their binary correspondents for example the value of e would be the value of e ab would cause the form to fail term and rule sequencing sequencing may be explicitly controlled by including control in a term control options options s where f where u where s where f where f where s where where arithmeticexpression r arithmeticexpression s f and u denote success fail and unconditional transfers respectively where evaluates to a rule label thus transfer can be effected from within a rule at the end of a term to the beginning of another rule r means terminate the form and return the evaluated expression to the initiator over the control connection if still open if terms are not explicitly sequenced the following defaults prevail anderson et al page rfc data reconfiguration service may when a term fails go to the next sequential rule when a term succeeds go to the next sequential term within the rule at the end of a rule go to the next sequential rule note in the following example the correlation between transfer of control and movement of the input pointer xyz b s f xyz the value of xyz will never be emitted in the output stream since control is transferred out of the rule upon either success or failure if the term succeeds the bits of input will be assigned as the value of xyz and rule will then be applied to the same input stream data that is since the complete left hand side of rule was not successfully applied the input stream pointer is not advanced iv examples remarks the following examples forms and also single rules are simple representative uses of the form machine the examples are expressed in a term per line format only to aid the explanation typically a single rule might be written as a single line field insertion to insert a field separate the input into the two terms to allow the inserted field between them for example to do line numbering for a character line printer with a leading carriage control character use the following form numb initialize line number counter to one cc e f r pick up control character and save as cc return a code of upon exhaustion line e f r save text as line cc emit control character e numb emit counter in first two columns e e emit period after line number e line emit text truncated in byte field numb numb u increment line counter and go to rule one anderson et al page rfc data reconfiguration service may deletion data to be deleted should be isolated as separate terms on the left so they may be omitted by not emitting them on the right b isolate bits to ignore save a extract ascii characters from input stream e save emit the characters in save as ebcdic characters whose length defaults to the length of save i e and advance to the next rule in the above example if either input stream term fails the next sequential rule is applied variable length records some devices terminals and programs generate variable length records the following rule picks up variable length ebcdic records and translates them to ascii char e pick up all an arbitrary number of ebcdic characters in the input stream x x ff followed by a hexadecimal literal ff terminal signal a char emit them as ascii x x emit an ascii carriage return string length computation it is often necessary to prefix a length field to an arbitrarily long character string the following rule prefixes an ebcdic string with a one byte length field q e pick up all ebcdic characters ts x x ff followed by a hexadecimal literal ff b l q emit the length of the characters plus the length of the literal plus the length of the count field itself in an bit field q emit the characters ts emit the terminal anderson et al page rfc data reconfiguration service may transposition it is often desirable to reorder fields such as the following example q e r e s e t e r t s q the terms are emitted in a different order character packing and unpacking in systems such as hasp repeated sequences of characters are packed into a count followed by the character for more efficient storage and transmission the first form packs multiple characters and the second unpacks them form to pack ebcdic streams returns if ok input exhausted returns if illegal ebcdic look for terminal signal ff which is not a legal ebcdic duplication count must be x x ff s r pick up an ebcdic char char e get identical ebcdic chars len e char emit the count and the char b l len char u end of form form to unpack ebcdic streams look for terminal x x ff s r emit character the number of times indicated by the count in a field the length indicated by the counter contents cnt b char e cnt e char u failure of form u r this rfc was put into machine readable form for entry into the online rfc archives by simone demmel anderson et al page 