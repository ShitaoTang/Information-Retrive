 network working group abhay bhushan request for comments mit nic bob braden categories d d and d ucla updates will crowther obsolete none alex mckenzie bbn eric harslem john heafner rand john melvin dick watson sri bob sundberg harvard jim white ucsb june the data transfer protocol i introduction a common protocol is desirable for data transfer in such diverse applications as remote job entry file transfer network mail system graphics remote program execution and communication with block data terminals such as printers card paper tape and magnetic tape equipment especially in context of terminal imps although it would be possible to include some or even all of the above applications in an all inclusive file transfer protocol a separation between data transfer and application functions would provide flexibility in implementation and reduce complexity separating the data transfer function would also reduce proliferation of programs and protocols we have therefore defined a low level data transfer protocol dtp to be used for transfer of data in file transfer remote job entry and other applications protocols this paper concerns itself solely with the data transfer protocol a companion paper rfc describes file transfer protocol ii discussion the data transfer protocol dtp serves three basic functions it provides for convenient separation of ncp messages into logical blocks transactions units records groups and files it allows for the separation of data and control information and it includes some error control mechanisms bhushan et al page rfc the data transfer protocol june three modes of separating messages into transactions are allowed by dtp the first is an indefinite bit stream which terminates only when the connection is closed i e the bit stream represents a single transaction for duration of connection this mode would be useful in data transfer between hosts and terminal imps tips the second mode utilizes a transparent block convention similar to the ascii dle data link escape in transparent mode transactions which may be arbitrarily long end whenever the character sequence dle etx is encountered dle and etx are bit character codes to prevent the possibility of a dle etx sequence occurring within data stream any occurrence of dle is replaced by dle dle on transmission the extra dle is stripped on reception a departure from the ascii convention is that transparent block does not begin with dle stx but with a transaction type byte this mode will be useful in data transfer between terminal imps the third mode utilizes a count mechanism each transaction begins with a fixed length descriptor field containing separate binary counts of information bits and filler bits if a transaction has no filler bits its filler count is zero this mode will be useful in most host to host data transfer applications dtp allows for the above modes to be intermixed over the same connection i e mode is not associated with connection but only with transaction the above transfer modes can represent transfer of either data or control information the protocol allows for separating data or control information at a lower level by providing different type codes see specifications for data and control transactions this provision may simplify some implementations the implementation of a workable subset of the above modes is specifically permitted by dtp to provide compatibility between hosts using different subsets of transfer modes an initial handshake procedure is required by dtp the handshake involves exchanging information on modes available for transmit and receive this will enable host programs to agree on transfer modes acceptable for a connection the manner in which dtp is used would depend largely on the applications protocol it is the applications protocol which defines the workable subset of transfer modes for example the file transfer protocol will not work just with the indefinite bit stream modes at least for control information one of the other two modes is required again the use of information separator and abort functions provided in dtp see specifications is defined by the applications protocol for example in a remote job entry protocol aborts may be used to stop the execution of a job while they may not bhushan et al page rfc the data transfer protocol june cause any action in another applications protocol it should also be noted that dtp does not define a data transfer service there is no standard server socket or initial connection protocol defined for dtp what dtp defines is a mechanism for data transfer which can be used to provide services for block data transfers file transfers remote job entry network mail and numerous other applications there are to be no restrictions on the manner in which dtp is implemented at various sites for example dtp may be imbedded in an applications program such as for file transfer or it may be a separate service program or subroutine used by several applications programs another implementation may employ macros or uuo s user unimplemented operations on pdp s to achieve the functions specified in dtp it is also possible that in implementation the separation between the dtp and applications protocols be only at a conceptual level iii specifications byte size for network connection the standard byte size for network connections using dtp is bit however other byte sizes specified by higher level applications protocols or applications programs are also allowed by dtp for the purpose of this document bytes are assumed to be bits unless otherwise stated transactions at dtp level all information transmitted over connection is a sequence of transactions dtp defines the rules for delimiting transactions a types the first byte of each transaction shall define a transaction type as shown below note that code assignments do not conflict with assignments in telnet protocol the transaction types may be referred by the hexadecimal code assigned to them the transactions types are discussed in more detail in section b bhushan et al page rfc the data transfer protocol june code transaction type hex octal b indefinite bit stream data b transparent dle block data b descriptor and counts data b modes available handshake b information separators endcode b error codes b abort b no operation noop b indefinite bit stream control b transparent dle block control ba descriptor and counts control bb unassigned but reserved for data transfer bc bd be bf b syntax and semantics b type b and b indefinite bitstream modes transactions terminate only when the ncp connection is closed there is no other escape convention defined in dtp at this level it should be noted that closing connection in bitstream mode represents an implicit file separator see section b b type b and b transparent block modes transactions terminate when the byte sequence dle etx is encountered the sender shall replace any occurrence of dle in data stream by the sequence dle dle the receiver shall strip the extra dle the transaction is assumed to by byte oriented the code for dle is hex or octal this is different from the ascii dle which is hex or octal etx is hex or octal the same as ascii etx b type b and ba descriptor and counts modes transactions have three fields a byte bits descriptor field and variable length including zero info and filler fields as shown below the total length of a transaction is info filler bits bhushan et al page rfc the data transfer protocol june bits bits bits bits bits bits variable length bit descriptor field info and filler info count is a binary count of number of bits in info field not including descriptor or filler bits number of info bits is limited to as there are bits in info count field sequence is a sequential count in round robin manner of b and ba type transaction the inclusion of sequence numbers would help in debugging and error control as sequence numbers may be used to check for missing transactions and aid in locating errors hosts not wishing to implement this mechanism should have all s in the field the count shall start from zero and continue sequentially to all s after which it is reset to all zeros the permitted sequence numbers are one greater than the previous and all s filler count is a binary count of bits used as fillers i e not information after the end of meaningful data number of filler bits is limited to as there are bits in filler count field the nul bytes contain all s b type b modes available transactions have a fixed length of bytes as shown below first byte defines transaction type as b second byte defines modes available for send and third byte defines modes available for receive type i send i receive b ba b b b b b ba b b b b b the modes are indicated by bit coding as shown above the particular bit or bits if set to logical indicate that mode to be available the most significant bits should be set to logical the use of type b transactions is discussed in section b b type b information separator transactions have fixed length of bytes as shown below first byte defines transaction type as b and second byte defines the separator bhushan et al page rfc the data transfer protocol june type end code r g e b f r c u i o o n l u r i e p d t the following separator codes are assigned code meaning hex octal unit separator record separator group separator f file separator files groups records and units may be data blocks that a user defines to be so the only restriction is that of the hierarchical relationship file groups records units where means contains thus a file separator marks not only the end of file but also the end of group record and unit these separators may provide a convenient logical separation of data at the data transfer level their use is governed by the applications protocol b type b error codes transactions have a fixed length of bytes as shown below first byte defines transaction type as b second byte indicates an error code and third byte may indicate the sequence number on which error occurred type error code sequence b bhushan et al page rfc the data transfer protocol june the following error codes are assigned error code meaning hex octal undefined error out of sync type code other than b through bf broken sequence the sequence field contains the first expected but not received sequence number illegal dle sequence other than dle dle or dle etx b through through the transaction type indicated by bf by error code is not implemented the error code transaction is defined only for the purpose of error control dtp does not require the receiver of an error code to take any recovery action the receiver may discard the error code transaction in addition dtp does not require that sequence numbers be remembered or transmitted b type b abort transactions have a fixed length of bytes as shown below first byte defines transaction type as b and second byte defines the abort function type function r g e f r c u i o o n l u r i e p d t bhushan et al page rfc the data transfer protocol june the following abort codes are assigned abort code meaning hex octal abort preceding transaction abort preceding unit abort preceding record abort preceding group f abort preceding file dtp does not require the receiver of an abort to take specific action therefore sender should not necessarily make any assumptions the manner in which abort is handled is to be specified by higher level applications protocols b type b noop transactions are one byte long and indicate no operation these may be useful as fillers when byte size used for network connections is other than bits initial connection handshake and error recovery a dtp does not specify the mechanism used in establishing connections it is up to the applications protocol e g file transfer protocol to choose the mechanism which suits its requirements b the first transaction after connection is made will be type b modes available in a full duplex connection both server and user will communicate type b transactions indicating modes available for send and receive in a simplex connection only sender will communicate a type b transaction it is the sender s responsibility to choose a mode acceptable to the receiver if an acceptable mode is not available or if mode chosen is not acceptable the connection may be closed c no error recovery mechanisms are specified by dtp the applications protocol may implement error recovery and further error control mechanisms end notes the term transaction is used here to mean a block of data defined by the transfer mode what constitutes a workable subset is entirely governed by the high level application protocol bhushan et al page rfc the data transfer protocol june transactions suppress the notion of host imp messages and may have a logical interpretation similar to that of flags and data defined by mealy in rfc this assignment is made to be consistent with the telnet philosophy of maintaining the integrity of the network ascii characters a b t descriptor field provides a convenient separation of information bits as is the least common multiple of and the commonly encountered byte sizes on arpa network host computers it is however recommended that the standard initial connection protocol be adopted where feasible it is recommended that when more than one mode is available the sender should choose descriptor and count mode type b or ba the bitstream mode type b or b should be chosen only when the other two modes cannot be used this rfc was put into machine readable form for entry into the online rfc archives by samuel etler bhushan et al page 