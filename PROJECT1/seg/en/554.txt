 network working group j day request for comments center for advanced computation nic june a proposed file access protocol specification attached is a proposal for the file access protocol fap is an extension to ftp i believe the specification is fairly general and should provide a good jumping off place i hope the protocol is specified in such a way as to fit with idiosyncrasies of most systems if the protocol would cause an inordinate amount of burden on your system for one reason or another i would like to hear about it at some later date when the difficulties of implementation are better known i would like to see several levels of implementation specified and implementation be done in terms of those levels from rumors i have heard i believe this will also allow creation and transfer of what tenex calls holey files but i am not sure of all of the implications of that or what would happen or should happen when a holey file is moved to a site that doesn t really have such a thing per se comments from the tenex crowd would be appreciated i think some further work could be done to make fap easier for record oriented systems this would probably require an extra command or parameter to specify all operations are in terms of records comments are invited in the long run though i would like to see fap thrown away the commands as they are described merely add a finer structure to the present retr stor and appe without much additional overhead the sequence open r foo bar crlf read all crlf clos crlf is equivalent to retr foo bar crlf fap could be merged with ftp to give a much richer coherent whole in writing this document i ran into the deficiency of reply codes for protocols three digits is no where near enough i would like to suggest that as another interim solution we go to a five digit day page rfc a proposed file access protocol specification june reply with two for specific categories such as primary access ftp results etc and two for specific results in the meantime the nwg should begin considering a general scheme for reply codes one that doesn t need revising every two years comments complaints etc are welcomed i may be reached through network mail at isi day or multics day cnet or by phone at the university of illinois a proposed file access protocol specification john day i introduction the purpose of the file access protocol is to provide a method for processes to access non local files in either a sequential or non sequential manner unlike the proposed mail protocol fap is an extension of ftp and not a subsystem in general fap is compatible with the rest of ftp those modifications which are necessary are specified below the intent of this protocol is to allow processes to specify to the remote file system where in the file they wish the next operation to start and how much data to move thus only the part of a file necessary for a process computation need be transferred rather than the entire file thus transmission times and storage requirements may be held down in short the rationale for a file access protocol on the network is the same as the rationale for random accessed files in a standard operating system the file access protocol uses the connection model data representations and transmission methods of the file transfer protocol all data transmissions in fap are handled according to the description in ftp section iii c with the following modifications in stream mode the minimum byte size is increased to bits another control code value is used to indicate end of transmission an combination of eot eor or eof may be indicated by the proper control code with this method it is not necessary to close the connection after each access a practice not highly recommended in block mode bit of the descriptor field of the header is set noting that this block is the end of transmission in addition to this fap uses a file pointer fp the file pointer day page rfc a proposed file access protocol specification june points into the file and is the point at which the next fap read or write will commence the file pointer is a general mechanism for addressing a file and should be flexible enough to handle both stream and record oriented systems ii problems of implementation as usual not all systems will be able to implement this protocol in its full generality the approach that should be taken is that no host should be required to provide for network users in the name of complete protocol implementation service it does not provide its local users some systems allow random access to some kinds of files on its system and not to others in this case this should be their implementation i e not all operations are valid for all kinds of files some systems cannot move the byte pointer backwards without opening and closing the file they should not be required to do this although they may if they wish but they should allow spacing down a file some distance before starting a transfer some systems may not allow read and write access to be available without closing and reopening the file systems should not be required to do both in general the rules of implementation are if a system normally allows that particular kind of access to that particular file then it should be allowed if not the system should not be forced to implement it in many cases the legality cannot be known until the operation is attempted i e it cannot be told of the first two cases above if they are legal when the file is opened but only on the read or write which violates the implementation restrictions a system should not try to simulate a facility if the simulation has side effects for example if simulating the capability of moving the byte pointer to the desired position has some side effects then the simulation should be left to the process accessing the file all implementors should make known the capabilities of their implementations via nic documents day page rfc a proposed file access protocol specification june iii file access protocol the fap extension to ftp includes new commands and the file pointer any implementation requires the file pointer and all six commands but as described above it is not necessary to implement the commands in their full generality iii the file pointer the file pointer represents an index or address within the file the units by which the index is measured is logical byte size and does not include any bytes related to transmission or structure in particular for transmission mode stream and structure record the eor and eof markers are not counted local transformations on data must be taken into account for example multics stores crlf as nl in this case nl counts as two ascii bytes since it was transmitted to or will be sent from multics as crlf if transmission mode is image then the logical byte size is taken as the transmission byte size there are two commands which operate on the file pointer setp to move the pointer and getp to find out where it is at these are described below in more detail the file pointer may take on three classes of values all may be mapped to some decimal number the value b represents the beginning of the file byte the value e represents the end of the file or byte n for a file n bytes long the byte pointer may also take on any value between and n a file of n bytes n n n n n b e if a file is stored under set of parameters type etc and operations are attempted on it under different parameters the server does not guarantee that the information will be valid iii commands iii open this command instructs the server to open the file for access in the direction specified the directions are read r write w or both b a read direction implies that the data connection is day page rfc a proposed file access protocol specification june from server to user write from user to server and both implies connections each ways functionally this command corresponds to retr or stor therefore all the ftp parameter commands type mode etc must be sent before the file is opened if the direction is write w and the file specified by the pathname does not exist there is an implied create with the open the success of this create is of course dependent on local access privileges and possibly whether or not an all command was sent if applicable the file created should be of the most general kind of file on which random access is allowed this is to allow the largest degree of compatibility with operations that may follow this should be ignored if some site specific command has already specified the kind of file this command identifies the file on which subsequent operations are to be performed after the file is opened the file pointer is at b and any of the other five fap commands may be sent it is acknowledged that some systems cannot open a file for access in both directions an error reply should be sent for this response replies iii setp this command causes the file pointer to be set to the number specified in the argument this value will be the ordinal number of the starting position of the next operation byte is the first byte in the file the argument may take on two other values besides b for begin which sets the file pointer at the beginning of a file i e and e for end which sets the file pointer to the last byte in the file two error conditions are possible if the argument specifies an illegal change of file pointer such as moving it backwards on some systems then the error reply should be sent if the argument attempts to move the file pointer off the end of the file then the eof reply should be sent with the address of the end of the file e and the file pointer left at e replies day page rfc a proposed file access protocol specification june iii getp this command requests the server to return the value of the file pointer as a decimal number reply iii read this command instructs the server to move as many bytes as specified of size logical byte size from the server to the user the values the argument may take on are and all all is interpreted as all data from the present position of the file pointer to the end of file if a read requests more bytes than in the file the number of bytes from the present position to the end of file should be transferred and an eof response returned noting the position of the end of file if the file is record structured and a read requests more bytes than in the record then the number of bytes in the record from the file pointer are moved and the eor reply is sent noting the end of record the action of a read leaves the file pointer at the position before the read plus the number of bytes moved i e updated the eof condition leaves it at e replies iii write this command instructs the server to accept as many bytes as specified from the user the result updates the value of the file pointer the values the argument may take on are or all all is interpreted as all data from the present position of the byte pointer to the end of file or beyond associated with the write is an implied append if necessary previous information has been sent such as allocation and if the file s access privilege allow the append if a write specifies more bytes than there are between the file pointer and the end of file and expansion is not allowed no data is sent and the file pointer is not moved an error is returned specifying the byte position of the eof if the file is day page rfc a proposed file access protocol specification june record structured and a writ attempts to move more bytes than there are in the record the file pointer is not moved and the eor reply is sent noting the end of record replies iii clos this command instructs the server to close the presently open file if any the receipt of a clos without an open file is not an error the effect is to notify the server that further operations are not directed at the file which is presently open if an open is received by the server and it has a file open it should close the open file and open the new one reply iv summary iv syntax open crlf clos crlf setp crlf getp crlf read crlf writ crlf r w b b e all day page rfc a proposed file access protocol specification june iv replies used by fap operation successful command not implemented for requested value or action cannot transfer files w o valid account enter account resend command ftp file not found ftp file access denied ftp file transfer incomplete data connection closed ftp file transfer incomplete insufficient storage space ftp cannot connect to your data socket ftp file system error not covered by other reply codes ftp transfer parameters in error eor eof file not open for operation fp last command line completely unrecognized syntax of last command is incorrect last command invalid ignored illegal parameter combination last command invalid action not possible at this time last command conflicts illegally with previous command s last command not implemented by the server catchall error reply bad pathname specification e g syntax error this rfc was put into machine readable form for entry into the online rfc archives by via genie day page 