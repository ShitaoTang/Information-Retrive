 network working group steve crocker request for comments ucla april title host software author steve crocker installation ucla date april network working group request for comment contents introduction i a summary of the imp software messages links imp transmission and error checking open questions on the imp software ii some requirements upon the host to host software simple use deep use error checking iii the host software establishment of a connection high volume transmission a summary of primitives error checking closer interaction open questions crocker page rfc host software april iv initial experiments experiment one experiment two introduction the software for the arpa network exists partly in the imps and partly in the respective hosts bb n has specified the software of the imps and it is the responsibility of the host groups to agree on host software during the summer of representatives from the initial four sites met several times to discuss the host software and initial experiments on the network there emerged from these meetings a working group of three steve carr from utah jeff rulifson from sri and steve crocker of ucla who met during the fall and winter the most recent meeting was in the last week of march in utah also present was bill duvall of sri who has recently started working with jeff rulifson somewhat independently gerard deloche of ucla has been working on the host imp interface i present here some of the tentative agreements reached and some of the open questions encountered very little of what is here is firm and reactions are expected i a summary of the imp software messages information is transmitted from host to host in bundles called messages a message is any stream of not more than bits together with its header the header is bits and contains the following information destination bits link bits trace bit spare bits the destination is the numerical code for the host to which the message should be sent the trace bit signals the imps to record status information about the message and send the information back to the nmc network measurement center i e ucla the spare bits are unused crocker page rfc host software april links the link field is a special device used by the imps to limit certain kinds of congestion they function as follows between every pair of hosts there are logical full duplex connections over which messages may be passed in either direction the imps place the restriction on these links that no host can send two successive messages over the same link before the imp at the destination has sent back a special message called an rfnm request for next message this arrangement limits the congestion one host can cause another if the sending host is attempting to send too much over one link we note however that since the imp at the destination does not have enough capacity to handle all links simultaneously the links serve their purpose only if the overload is coming from one or two links it is necessary for the hosts to cooperate in this respect the links have the following primitive characteristics they are always functioning and there are always of them by always functioning we mean that the imps are always prepared to transmit another message over them no notion of beginning or ending a conversation is contained in the imp software it is thus not possible to query an imp about the state of a link although it might be possible to query an imp about the recent history of a link quite a different matter the other primitive characteristic of the links is that there are always of them whether they are in use or not this means that each imp must maintain tables each with entries regardless of the actual traffic the objections to the link structure notwithstanding the links are easily programmed within the imps and are probably a better alternative to more complex arrangements just because of their simplicity imp transmission and error checking after receiving a message from a host an imp partitions the message into one or more packets packets are not more than bits long and are the unit of data transmission from imp to imp a bit cyclic checksum is computed by the transmission hardware and is appended to an outgoing packet the checksum is recomputed by the receiving hardware and is checked against the transmitted checksum packets are reassembled into messages at the destination imp open questions on the imp software crocker page rfc host software april an bit field is provided for link specification but only links are provided why the host is supposed to be able to send messages to its imp how does it do this can a host as opposed to its imp control rfnms will the imps perform code conversion how is it to be controlled ii some requirements upon the host to host software simple use as with any new facility there will be a period of very light usage until the community of users experiments with the network and begins to depend upon it one of our goals must be to stimulate the immediate and easy use by a wide class of users with this goal it seems natural to provide the ability to use any remote host as if it had been dialed up from a tty teletype terminal additionally we would like some ability to transmit a file in a somewhat different manner perhaps than simulating a teletype deep use one of the inherent problems in the network is the fact that all responses from a remote host will require on the order of a half second or so no matter how simple for teletype use we could shift to a half duplex local echo arrangement but this would destroy some of the usefulness of the network the systems for example have a very specialized echo when we consider using graphics stations or other sophisticated terminals under the control of a remote host the problem becomes more severe we must look for some method which allows us to use our most sophisticated equipment as much as possible as if we were connected directly to the remote computer error checking the point is made by jeff rulifson at sri that error checking at major software interfaces is always a good thing he points to some experience at sri where it has saved much dispute and wasted effort on these grounds we would like to see some host to host checking besides checking the software interface it would also check the host imp transmission hardware bb n claims the host imp hardware will be as reliable as the internal registers of the host we believe crocker page rfc host software april them but we still want the error checking iii the host software establishment of a connection the simplest connection we can imagine is where the local host acts as if it is a tty and has dialed up the remote host after some consideration of the problems of initiating and terminating such a connection it has been decided to reserve link for communication between host operating systems the remaining links are thus to be used as dial up lines each host operating system must provide to its user level programs a primitive to establish a connection with a remote host and a primitive to break the connection when these primitives are invoked the operating system must select a free link and send a message over link to the remote host requesting a connection on the selected link the operating system in the remote host must agree and send back an accepting message over link in the event both hosts select the same link to initiate a connection and both send request messages at essentially the same time a simple priority scheme will be invoked in which the host of lower priority gives way and selects another free link one usable priority scheme is simply the ranking of hosts by their identification numbers note that both hosts are aware that simultaneous requests have been made but they take complementary actions the higher priority host disregards the request while the lower priority host sends both an acceptance and another request the connection so established is a tty like connection in the pre log in state this means the remote host operating system will initially treat the link as if a tty had just called up the remote host will generate the same echos expect the same log in sequence and look for the same interrupt characters high volume transmission teletypes acting as terminals have two special drawbacks when we consider the transmission of a large file the first is that some characters are special interrupt characters the second is that special buffering techniques are often employed and these are appropriate only for low speed character at time transmission we therefore define another class of connection to be used for the transmission of files or other large volumes of data to initiate this class of link user level programs at both ends of an established tty like link must request the establishment of a file like connection parallel to the tty like link again the priority scheme comes into crocker page rfc host software april play for the higher priority host sends a message over link while the lower priority host waits for it the user level programs are of course not concerned with this selection of the free link is done by the higher priority host file like links are distinguished by the fact that no searching for interrupt characters takes place and buffering techniques appropriate for the higher data rates takes place a summary of primitives each host operating systems must provide at least the following primitives to its users this list knows not to be necessary but not sufficient a initiate tty like connection with host x b terminate connection c send receive character s over tty like connection d initiate file like connection parallel to tty like connection e terminate file like connection f send receive over file like connection error checking we propose that each message carry a message number bit count and a checksum in its body that is transparent to the imp for a checksum we suggest a bit end around carry sum computed on bits and then circularly shifted right one bit the right circular shift every bits is designed to catch errors in message reassembly by the imps closer interaction the above described primitives suggest how a user can make simple use of a remote facility they shed no light on how much more intricate use of the network is to be carried out specifically we are concerned with the fact that as some sites a great deal of work has gone into making the computer highly responsive to a sophisticated console culler s consoles at ucsb and englebart s at sri are at least two examples it is clear that delays of a half second or so for trivial echo like responses degrade the interaction to the point of making the sophistication of the console irrelevant we believe that most console interaction can be divided into two crocker page rfc host software april parts an essentially local immediate and trivial part and a remote more lengthy and significant part as a simple example consider a user at a console consisting of a keyboard and refreshing display screen the program the user is talking typing into accumulates a string of characters until a carriage return is encountered and then it processes the string while characters are being typed it displays the characters on the screen when a rubout character is typed it deletes the previous non rubout character if the user types h e l l o p where is rubout and is carriage return he has made nine keystrokes if each of these keystrokes causes a message to be sent which in return invokes instructions to our display station we will quickly become bored a better solution would be to have the front end of the remote program that is the part scanning for and be resident in our computer in that case only one five character message would be sent i e h e l p and the screen would be managed locally we propose to implement this solution by creating a language for console control this language current named del would be used by subsystem designers to specify what components are needed in a terminal and how the terminal is to respond to inputs from its keyboard lincoln wand etc then as a part of the initial protocol the remote host would send to the local host the source language text of the program which controls the console this program would have been by the subsystem designer in del but will be compiled locally the specifications of del are under discussion the following diagrams show the sequence of actions crocker page rfc host software april a before link establishment terminal terminal request connection ucla over link sri os i i os host ucla host sri crocker page rfc host software april b after link establishment and log in terminal terminal please send front end control ucla sri os i i os nls del prog host ucla host sri crocker page rfc host software april c after receipt and compilation of the del program terminal terminal trivial responses ucla major responses sri del i i os nls front end prog os host ucla host sri open questions if the imps do code conversion the checksum will not be correct the procedure for requesting the del front end is not yet specified iv initial experiments experiment one sri is currently modifying their on line retrieval system which will be the major software component on the network documentation center so that it can be operated with model teletypes the control of the teletypes will be written in del all sites will write del compilers and use nls through the del program experiment two crocker page rfc host software april sri will write a del front end for full nls graphics included ucla and utah will use nls with graphics this rfc was put into machine readable form for entry into the online rfc archives by celeste anderson crocker page 