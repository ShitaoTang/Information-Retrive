 network working group edwin e meyer jr request for comments massachusetts institute of technology april arpa network protocol notes the attached document contains comments and suggestions of the network working group at project mac it is based upon the protocol outlined in nwg rfc and later documents this proposal is intended as a contribution to the dialog leading to a protocol specification to be accepted by the entire network working group we solicit your comments i introduction in this document the network working group at mit project mac suggest modifications and extensions to the protocol specified by carr crocker and cerf in a preprint of their sjcc paper and extended by crocker in nwg rfc this document broadly outlines our proposal but does not attempt to be a complete specification it is intended to be an indication of the type and extent of the protocol we think should be initially implemented we agree with the basic concept of simplex communication between sockets having unique identifiers we propose the implementation of a slightly modified subset of the network commands specified in nwg rfc plus the err command as specified by harslem and heafner in nwg rfc given the basic objective of getting all arpa contractors onto the network and talking to each other at the earliest possible date we think that it is important to implement an initial protocol that is reasonably simple yet extendable while providing for the major initial uses of the network it should be a simple protocol so as to elicit the broadest possible support and to be easily implementable at all installations with a minimum of added software while the protocol will evolve the fundamentals of a protocol accepted and implemented by all installations are likely to prove very resistant to change thus it is very important to make the initial protocol open ended and flexible a simple basic protocol is more likely to succeed in this respect than a complicated one this page rfc arpa network protocol notes april does not preclude the existence of additional layers of protocol between several installations so long as the basic protocol remains supported we feel that three facilities must be provided for in the initial protocol multi path communication between two existing processes which know how to connect to each other a standard way for a process to connect to the logger logging process at a host at a foreign host and request the creation of a user process the login ritual may or may not be standardized a standard way for a newly created process to initiate pseudo typewriter communication with the foreign process which requested its creation the major differences between the protocol as proposed by carr crocker and cerf and this proposal are the following the dynamic reconnection strategy specified in crocker s nwg rfc is reserved for future implementation we feel that its inclusion would unduly complicate the initial implementation of the protocol we outline a strategy for foreign process creation that does not require dynamic reconnection nothing in this proposal precludes the implementation of dynamic reconnection at a later date we propose that an instance tag be added to the socket identifier so as to separate sockets belonging to different processes of the same user coexisting at one host the following ncp commands have been added a the err command specified in nwg rfc is included b blk and rsm commands are presented as possible alternatives to the cease on link imp command and spd and rsm commands set forth in nwg rfc because these commands operate on socket connections rather than link numbers they do not impede the implementation of socket connection multiplexing over a single link number should that later prove desirable c an int command that interrupts a process is specified we feel that it is highly important to be able to interrupt a process that may be engaged in unwanted computation or output to implement the interrupt as a special format within a normal page rfc arpa network protocol notes april message raises severe difficulties the connection may be blocked when the interrupt is needed and the ncp must scan each incoming message for an interrupt signal d an eco echoing command to test communications between ncps is included sockets are conceptualized as having several states and these are related to conditions under which network requests may be queued this differs from the unlimited queuing feature which presents certain implementation difficulties the protocol regarding creation of a foreign process and communication with it is removed to a separate user control and communication ucc protocol level and is more fully specified ii a hierarchy of protocols it seems convenient and useful to view the network as consisting of a hierarchy of protocol and implementation levels in addition to aiding independent software and hardware development provisions for a layered protocol allow additions and substitution of certain levels in experimental or special purpose systems we view the initial network communications system as a hierarchy of three systems of increasing generality and decreasing privilege level these are imp network the network of imps and physical communication lines is the basic resource which higher level systems convert into more generalized communication facilities the imp network acts as a wholesaler of message transmission facilities to a highly privileged module within each host network control program each host contains a module called the network control program ncp which has sole control over communications between its host and the imp network it acts as a retailer of the wholesale communications facilities provided by the imp network the network of ncps can be viewed as a higher level communications system surrounding the imp network which factors raw message transmission capabilities between hosts into communication facilities between ordinary unprivileged processes page rfc arpa network protocol notes april h o s t a h o s t c proc proc proc proc proc a b c ucc d e ucc ncp network n c p a n c p c imp network imp imp a c imp b fig modular view of network user control and communication module the preceding two communication systems are sufficient to permit communication between unprivileged processes that already exist however one of the primary initial uses of the network is thought to involve the creation of a foreign user process through interaction with the foreign host s logger the user control and communication module ucc implements protocol sufficient for a process to communicate with a foreign host s logger and to make initial control communication with a created process such a process is to have the same privileges subject to administrative control as a local to the foreign host user process the ucc module communicates through the ncp in a manner similar to an ordinary process except for the ability to close connections to a dead page rfc arpa network protocol notes april process the ucc module has no special network privileges the ucc protocol is only one of several third level protocols that could be implemented for example a set of batch processing systems connected through the ncp system might implement a load sharing protocol but not a ucc iii network control program each host implements a module called the network control program ncp which controls all network communications involving that host the network of ncps forms a distributed communication system that implements communication paths between individual processes the ncp protocol issues involve i the definition of these communication paths and ii a system for coordinating the distributed ncp system in maintaining these communication paths these are discussed below sockets communication between two processes is made through a simplex connection between two sockets a send socket attached to one process and a receive socket attached to another process sockets have the following characteristics socket identifier a socket identifier is used throughout the network to uniquely identify a socket it consists of bits having the following components a user number bits a socket attached to a process is identified as belonging to that process by a user number consisting of bits of home host code plus bits of user code assigned by the home host this user number is the same for all sockets attached to any of his processes in any host b instance tag bits more than one process belonging to a user may simultaneously exist within a single host the instance tag identifies the particular process to which a socket belongs a user s first process at a host to use the network receives instance tag by convention c host number bits this is the code of the host on which the attached process exists d socket code bits this code provides for send and receive sockets in each process the low order bit determines whether this is a send or receive socket page rfc arpa network protocol notes april states of sockets each socket has an associated state the ncp may implement more transitory states of a socket but the three following are of conceptual importance a inactive there is no currently existing process which has told the ncp that it wishes to listen to this socket no other process can successfully communicate with an inactive socket b open some process has agreed to listen to events concerning this socket but it is not yet connected c connected this socket is currently connected to another socket socket event queue a queue of events to be disclosed to the owning process is maintained for each open or connected socket it consists of a chronologically ordered list of certain events generated by the action of one or more foreign processes trying to connect or disconnect this socket an entry in the event queue consists of the event type plus the identifier of the foreign socket concerned the following event types are defined a request a foreign socket requests connection not queued if local socket is already connected b accept a foreign socket accepts requested connection c reject a foreign socket rejects requested connection d close a foreign socket disconnects an existing connection a request event is removed from the queue when it is accepted or rejected the other events are removed from the queue as they are disclosed to the owning process some events are intended to be transparent to the process owning the socket and they do not generate entries in the event queue although an event queue is conceptually unlimited it seems necessary to place some practical limit on its length when an event queue for a socket is full any incoming event that would add to the queue should be discarded and the sending ncp notified via err command described below page rfc arpa network protocol notes april ncp control communications the ncp network coordinates its activities through control commands passed between its individual components these commands generally concern the creation and manipulation of socket connections controlled by the ncp receiving the command a control command is directed to a particular ncp by being sent to its host as a message over link number designated as the control link which is reserved for that purpose the imp network does not distinguish between these messages and regular data messages implementing communication through a socket connection the following ncp control commands are defined a request for connection rfc an ncp directs this command to a foreign ncp to attempt to initiate a connection between a local socket and a foreign socket if the foreign socket is open the foreign ncp places a request event into the socket s event queue for disclosure to the process that owns it if the foreign process accepts the foreign ncp returns a positive acknowledgement in the form of another rfc it rejects connection by issuing the cls command see below an rfc is automatically rejected without consulting the owning process if the foreign socket is not open inactive or connected multiple rfcs to the same socket are placed into its event queue in order of receipt any queued rfcs are automatically rejected by the ncp once the owning process decides to accept a connection the ncp which has control of the receive socket of the potentially connected pair designates a link number over which messages are to flow b close a connection cls an ncp issues this network command to disconnect an existing connection or to negatively acknowledge an rfc there is a potential race problem if an ncp closes a local send socket in that the cls command may reach the foreign ncp prior to the last message over that socket connection this race is prevented by adhering to two standards i a cls command for a local send socket is not transmitted until the rfnm for the last message to the foreign socket comes back and ii the foreign ncp processes all incoming messages in the order received page rfc arpa network protocol notes april c block output over a connection blk a process may read data through a receive socket slower than messages are coming in and thus the ncp s buffers may tend to clog up the ncp issues this command to a foreign ncp to block further transmission over the socket pair until the receiving process catches up d resume output over a blocked connection rsm an ncp issues this command to unblock a previously blocked connection e interrupt the process attached to a connection int receipt of this message causes the foreign ncp to immediately interrupt the foreign process attached to if it is connected to a local socket data already in transit within the ncp network over the interrupted connection will be transmitted to the destination socket the meaning of interrupt is that the process will immediately break off its current execution and execute some standard procedure that procedure is not defined at this protocol level f report an erroneous command to a foreign ncp err this command is used to report spurious network commands or messages or overload conditions that prevent processing of the command specifies the error type if specifies an erroneous network command is that command not including imp header and is an integer specifying its length in bits if specifies an erroneous message contains only the link number over which the erroneous message was transmitted this is slightly modified from the specification in nwg rfc page rfc arpa network protocol notes april g network test command eco bit code an ncp may test the quality of communications between it and a foreign ncp by directing to it an eco command with an arbitrary bit code of the same length as a socket identifier and on an ncp receiving such a eco command should immediately send an acknowledging eco with the same bit code and off to the originating ncp an ncp does not acknowledge an eco with off we feel that this command will be of considerable aid in the initial shakedown of the entire network h no operation command nop an ncp discards this command upon receipt user interface to the ncp the ncp at each host has an interface through which a local process can exercise the network subject to the control of the ncp the exact specification of this interface is not a network protocol issue since each installation will have its own interface keyed to its particular requirements the protocol requirements for the user interface to an ncp are that it provide all intended network functions and no illegal privileges examples of such illegal privileges include the ability to masquerade as another process eavesdrop on communications not intended for it or to induce the ncp to send out spurious network commands or messages we outline here an interface based on the carr crocker and cerf proposal that is sufficient to fully utilize the network while this particular set of calls is intended mainly for illustrative purposes it indicates the types of functions necessary the following calls to the ncp are available a listen a user opens this socket creating an empty event queue for it this listen call may block waiting for the first request event or it may return immediately page rfc arpa network protocol notes april b init a user attempts to connect to the local ncp sends an rfc to the foreign ncp requesting that the connection be created the returned acknowledgemnet is either an rfc request accepted or cls request rejected at the caller s option the init call blocks on the expected accept or reject event or it can return immediately without waiting in this case the user must call status see below at a later time to determine the action by the foreign ncp when a blocked init call returns the accept or reject event is removed from the event queue c status this call reports out the earliest previously unreported event in the queue of the status call deletes the event from the queue if that type of event is deleteable by disclosure d accept the user accepts connection with the foreign socket whose request event is earliest in the event queue for an acknowledging rfc is sent to the accepted foreign socket and the request event is deleted from the event queue should any other request event exist in the queue the ncp automatically denies connection by sending out a cls command and deleting the event e reject the user rejects connection with the foreign socket whose request event is earliest in the event queue for the ncp sends out a cls command and deletes the request event from the queue f close the user directs the ncp to disconnect any active connection to this socket and to deactivate the socket the ncp sends out a cls command to the foreign socket if a connection has existed the status of the foreign socket also becomes closed once the close event is disclosed to the foreign process g interrupt the user directs the ncp to send out an int command to the foreign socket connected to page rfc arpa network protocol notes april h transmit the user wishes to read is receive or write is send of data into or out of an area pointed to by a call to write returns immediately after the ncp has queued the data to send a message over the connection the call to write blocks only if the connection is blocked or if the local ncp is too loaded to process the request immediately data to be transmitted over a connection is formatted into one or more imp messages of maximum length bits and transmitted to the foreign host over the link number specified in the rfc sent by the ncp controlling the receiving connection a close event in the event queue for is disclosed through the action of transmit a call to write discloses the close event immediately a read call discloses it when all data has been read the history of a connection from a user view an illustrative example assume that process a on host a wishes to establish connection with process b on host b before communication can take place two conditions must be fulfilled a process a must be able to specify to its ncp a socket in b s socket space to which it wants to connect b process b must already be listening to this socket establishing the connection a process b listens to socket bb b process a inits bb to its aa the ncp at a generates an rfc specifying link number which it chooses from its available set of links this is the link over which it will receive messages if the connection is accepted by process b c process b is informed of a s init request he may reject connection ncp b sends back a cls or accept ncp b sends back an rfc d if process b accepts the confirming rfc establishes the connection and messages can now flow page rfc arpa network protocol notes april host a host b initiator acceptor process a process b a listen socket code b init socket code bb rfc aa bb link c accept socket code rfc bb aa d transmit send buffer len socket imp message link send buffer e transmit rec buffer length socket f close socket code last rfnm cls bb aa closes socket aa fig establishing and communicating over a socket connection sending messages over a connection a process b issues a transmit call to send data through the connection ncp b formats this into an imp message and sends it to ncp a with link number as specified by a s rfc b ncp a receives the raw message from ncp b with link number ncp a uses this link number in deciding who the intended recipient is and stores the message in a buffer for the recipient process c process a may issue a read transmit call for socket code at any arbitrary time the read call blocks if there is no data pending for the socket the read call picks up the specified number of bits transmitted over socket code perhaps across an imp message boundary the boundaries of the imp messages are invisible to the read call page rfc arpa network protocol notes april d should process b send data over the connection at a faster rate than process a picks it up ncp a can issue a blk command to ncp b if a s buffers start filling later when process a catches up ncp a can tell b to resume transmission via an rsm command process b closes the connection a process b decides to close the connection and it issues the close call to ncp b to avoid race problems b waits for the rfnm from the previous message over this connection then sends the cls command to ncp a when the rfnm from the cls command message returns ncp b flushes socket bb from its tables effecting the close at its end and deactivating bb b because of sequential processing within ncp a the last message to socket aa is guaranteed to have been directed to a process before the cls from ncp b comes through upon receipt of the cls from b ncp a marks socket aa as close pending and places a close event into the event queue of aa c process a can still issue read calls for socket aa while there is buffered data pending when a issues a read call after the buffer has been emptied the close event is disclosed to inform a of the closure and socket aa is flushed from the tables of ncp a process a closes the connection a let us return to step and assume that process a wants to close the connection from its end there is no race problem because we assume that once a issues a close call it no longer wants to read messages over that socket b assume that process a issues a close call on socket aa ncp a immediately sends out a cls command to ncp b and marks socket aa as close pending any data buffered for read on aa is discarded to allow remaining messages already in transit from process b to percolate through the imp network to ncp a and be discarded without error comments ncp a retains aa in its tables for a suitable period of time after receiving the rfnm from the cls command during this period ncp a discards all messages received over the closing connection after allowing a reasonable amount of time for these dead messages to come in ncp a flushes aa from its tables effectively closing the connection and deactivating aa further messages to socket aa result in ncp a sending an err erroneous command to the originating ncp page rfc arpa network protocol notes april c when ncp b receives the cls command socket bb is marked as close pending and the cls event is placed into the event queue of bb the next time process b wishes to write over that socket the cls event is disclosed to inform him of the closure and socket bb is removed from ncp b s tables iv user control and communication protocol some process must exist which agrees to listen to anybody in the network and create a process for him upon proper identification this process is called the logger and interacts through the ncp via the network related user control and communication ucc module which implements the necessary protocol except for one instance closeing connections of dead processes the process operating the ucc module does not have special network privileges under the ucc protocol a requestor process which has directed the creation of a foreign process maintains two full duplex pseudo typewriter connections one to the foreign logger and one to the created process the duplex connection to the foreign logger is used to identify the requestor process to the logger and after login to return to the requestor process basic information concerning the health of the created process the duplex connection to the created process is used for control communication to it maintaining two full duplex connections avoids reconnection problems both when the logger transfers communication to the created process and when it needs to regain control this is at the modest expense of requiring the requestor process to switch typewriter communications between two sets of connections the way that communication is established is essentially as follows the requestor process first reserves four of its sockets having contiguous socket codes then it signals the ucc specifying one of these sockets from the signal the ucc knows which process is calling and by protocol on which requestor socket pair the ucc is to communicate with the requestor process and which requestor socket pair the created process is to use for its communications this is specified below in more detail establishing and operating a remote process the ucc at each host always keeps a send socket with user number instance tag open active and unconnected as a signal socket and periodically checks for inits to this socket processes wishing to create a process at this host must first signal the ucc by issuing an init to this socket page rfc arpa network protocol notes april the requesting process must have four free sockets with contiguous socket codes receive through send the high numbered send receive set of sockets is used for typewriter communication with the foreign ucc the low numbered set for typewriter communication with the created process the requestor process calls listen twice to open the and receive send pair over which it will talk to the foreign ucc then it sends out a signalling init call on to the ucc signal socket the only thing that the ucc does with this signalling init call is to note down the socket number from which it originated the ucc immediately rejects this request so as to keep its signal socket open for other signals after receiving the expected reject on its initial init call to the ucc s signal socket the requestor process issues listens for and the created process will init these sockets to establish control communication with the requestor process the requestor process then blocks by calling status the ucc inits a free send receive socket pair to the requestor s and on which the requestor process is presumably listening the requestor process has called status with block option after listening for the two sockets so that when the init from the foreign ucc reaches the requestor process status returns with the init indication the requestor process verifies that the ucc is the process that is calling then it accepts the call the requestor process then calls status and returns when the init for that socket reaches it it does a similar verify and accept there is an arbitrary choice as for which socket the requestor process first calls status two way communication is established when the requestor process has accepted both inits from the ucc this connection is maintained during the login ritual and throughout the life of the created process should the requestor process fail to respond properly within a limited amount of time to the inits of the ucc the ucc abandons the connection attempt the requestor process must then perform the login ritual with the ucc the initial protocol might standardize the login ritual if the logger is not satisfied and wishes to cut off the requestor the ucc module closes both and perhaps after the logger has sent a suitable message page rfc arpa network protocol notes april if satisfied the logger creates a process for the user the ucc maintains direct communication with the requestor but this connection is now used only to report basic information concerning the created process the first task of a created process is to establish a dual pseudo typewriter control connection with its requestor process the created process inits one of its send receive socket pairs to the requestor s and if both requests are accepted the created process sends an initial message over this connection then it goes to command level in which it awaits a typewriter command message over the connection if the created process is unable to establish duplex communication with the requestor process it should destroy itself the ucc will either close its own connections with the requestor or make arrangements for another process to be created when a created process is logged out the ucc uses a privileged entry to the ncp to close all connections between the dead process and other processes and to deactivate all open sockets of the dead process the ucc transmits a message back to the requestor process then closes the dual connections between it and the requestor process the interrupt call has a standard quit meaning when sent from a requestor process to a created process over the requestor s receive socket all pending output from the created process is aborted and the it enters command level where it awaits a command over the typewriter connection to the requestor process the interrupted processing is resumable by issuing a start command to the created process note that the rule about pending output is more restrictive than that implemented by the int ncp command this document was prepared through the use of the multics runoff command a source file consisting of intermixed text and runoff requests was created using the qed text editor this file was then compiled by the runoff command to produce a finished copy the latest version of this document exists online in multics in the segment udd multics meyer network protocol runoff end page rfc arpa network protocol notes april requestor foreign process logger a listen to sockets and to be connected to foreign logger b init to signal socket of foreign logger c remember and reject connection to signal socket d listen to sockets e init a logger socket and pair to the requestor s to be and connected to the created process f accept connection with sockets from foreign logger perform login ritual created process g init any socket pair to requestor s and h accept connection with sockets from created process fig establishing a process at a foreign host this rfc was put into machine readable form for entry into the online rfc archives by miles mccredie page 