 network working group a mckenzie request for comments bbn nic august categories c d d g updates none obsoletes none ncp icp and telnet the terminal imp implementation by early december there will be six terminal imps incorporated into the network with additional terminal imps scheduled for delivery at a rate of about one per month thereafter for this reason the implementation of network protocols and deviations from them may be of interest to the network community this note describes the choices made by the terminal imp system programmers where choices are permitted by the protocols and documents some instances of non compliance with protocols most of the choices made during protocol implementation on the terminal imp were influenced strongly by storage limitations the terminal imp has no bulk storage for buffering and has only k of bit words available for both device i o buffers and program the program must drive up to terminals which generally will include a variety of terminal types with differing code sets and communication protocols e g the ibm terminals in addition the terminal imp must include a rudimentary language processor which allows a terminal user to specify parameters affecting his network connections since the terminal imp exists only to provide access to the network for terminals it must be prepared to maintain simplex network connections at any time thus each word stored in the ncp tables on a per connection basis consumes a significant portion of the terminal imp memory it should be remembered that the terminal imp is designed to provide access to the network for its users not to provide service to the rest of the network thus the terminal imp does not contain programs to perform the server portion of the icp in fact it does not have a logger socket page rfc the terminal imp program currently implements only the ncp the icp and the telnet protocol since these are of immediate interest to the sites with terminal imps it is anticipated that portions of the data transfer protocol will be implemented in the future the portions to be implemented are not yet clearly defined but will probably include the infinite bit stream first and the transparent mode later developments in the area of data transmission protocol will be documented in the future the remainder of this note describes and attempts to justify deviations from the official protocols and other design choices of interest although written in the present tense there are some additional known instances of deviation from protocol which will be corrected in the near future a deviations from protocols the terminal imp does not guarantee correct response to eco commands if some host a sends a control message containing ecos to the terminal imp and the message arrives at a time when a the terminal imp has a free buffer and b the control link from the terminal imp to host a is not blocked then the terminal imp will generate a correct erp for each eco in all other cases the eco commands will be discarded all control messages sent by the terminal imp begin with a nop control command so if host a sends a control message consisting of eco commands the terminal imp will answer if at all with a byte message nop and erps the reason for this method of implementation is that to guarantee correct response to eco in all cases requires an infinite amount of storage for example suppose host a sends control messages each containing an eco command to host b at the rate of one per second but that host a accepts messages from the network as slowly as possible one every seconds say then host b has only three choices which do not violate protocol a declare itself dead to the network i e turn off its ready line thereby denying all its users use of the network page rfc b refuse to accept messages from the network faster than the slowest possible foreign host i e about one every seconds if host b is a terminal imp this is almost certainly slow enough to soon reach a steady state of no users c implement infinite storage for buffering messages since it is clear that none of the legal solutions are possible we have decided to do no buffering which should we guess satisfy the protocol well over of the time the terminal imp does not guarantee to issue cls commands in response to unsolicited rfcs there are currently several ways to solicit an rfc as follows a a terminal user can tell the terminal imp to perform the icp to the telnet logger at some foreign host this action solicits the rfcs defined by the icp b a terminal user can send an rfc to any particular host and socket he chooses this solicits a matching rfc c a terminal user can set his own receive socket wild this action solicits an str from anyone to his socket similarly the user can set his send socket wild to solicit an rts if the terminal imp receives a solicited rfc it handles it in accordance with the protocol if the terminal imp receives a control message containing one or more unsolicited rfcs it will either issue cls commands or ignore the rfcs according to the criteria described above for answering ecos and for the same reasons further if the terminal imp does issue a cls in response to an unsolicited rfc it will not wait for a matching cls before considering the sockets involved to be free for other use after issuing a cls for a connection the terminal imp will not wait forever for a matching cls there are two cases page rfc a the terminal imp has sent an rfc grown tired of waiting for a matching rfc and therefore issued a cls b the terminal imp has sent a cls for an established connection matching rfcs exchanged in either of these cases the terminal imp will wait for a matching cls for a reasonable time probably seconds to one minute and will then forget the connection after the connection is forgotten the terminal imp will consider both sockets involved to be free for other use because of program size and table size restrictions the terminal imp assigns socket numbers to a terminal as a direct function of the physical address of the terminal thus given this socket assignment scheme the failure of some foreign host to answer a cls could permanently hang a terminal it might be argued that the terminal imp could issue a rst to the offending host but this would also break the connections of other terminal users who might be performing useful work with that host the terminal imp ignores all ret commands the terminal imp cannot buffer very much input from the network to a given terminal due to core size limitations accordingly the terminal imp allocates only one message and a very small number of bits currently bits eventually some number in the range based on the terminal s speed on each connection for which the terminal imp is the receiver given such small allocations the terminal imp attempts to keep the usable bandwidth as high as possible by sending a new allocation which brings the total allocation up to the maximum amount each time that a one of the two buffers assigned to the terminal is empty and b the allocations are below the maxima thus if a spontaneous ret were received the reasonable thing for the terminal imp to do would be to immediately issue a new all however if a foreign host had some reason for issuing a first page rfc spontaneous ret it would probably issue a second ret as soon as it received the all this would be likely to lead to an infinite and very rapid ret all loop between the two machines chewing up a considerable portion of the terminal imp s bandwidth since the terminal imp can t afford to communicate with such a host it ignores all rets the terminal imp ignores all gvb commands implementation of gvb appears to require an unreasonable number of instructions and at the moment at least no host appears to use the gvb command if we were to implement gvb we would always ret all of both allocations and this doesn t seem very useful the terminal imp does not handle a total bit allocation greater than correctly if the bit allocation is ever raised above the terminal imp will treat the allocation as infinite this treatment allows the terminal imp to store the bit allocation for each connection in a single word and to avoid double precision addition and subtraction our reasons for this decision are a a saving of more than words of memory which would be required for allocation tables and for double precision addition subtraction routines b our experience which indicates that very few hosts probably one at most ever raise their total bit allocation above bits c our expectation that any host which ever raises its bit allocation above probably would be willing to issue an infinite bit allocation if one were provided by the protocol once the bit allocation is greater than about the message allocation which the terminal imp handles correctly is a more powerful method of controlling network loading of a host system than bit allocation we believe that hosts which have loading problems will recognize this the terminal imp ignores the bit number in the icp when the terminal imp the user site initiates the initial connection protocol the actual procedure is to send the required rts to the logger page rfc socket of the user specified foreign host and simultaneously to set the terminal user s send and receive sockets in a state where each will accept any rfc from the specified host the bit socket number transmitted over the logger connection is ignored and the first rts and str addressing the user s sockets will be accepted and answered with matching rfcs the icp allows the foreign host to transmit the rfcs involving terminal imp sockets u and u at any time after receipt of the rfc to the foreign host s logger socket in particular the rfcs may arrive at the terminal imp before the bit number in the case of a normal foreign host the first incoming rfcs for sockets u and u will come from the sockets indicated by the bit number so it doesn t matter if the number is ignored in the case of a pathologic foreign host a potentially infinite number of wrong rfcs involving u and u may arrive at the terminal imp before the bit number is sent the terminal imp would be required to store this stream of rfcs pending arrival of the bit number then issue cls commands for all wrong rfcs however the terminal imp does not have infinite storage available for this purpose it is also doubtful that a terminal user really wants to converse with a pathologic foreign host so the terminal imp assumes that the foreign host is normal and ignores the bit number b other design choices related to protocol the terminal imp ignores incoming err commands and does not output err commands the terminal imp assumes that incoming messages have the format and contents demanded by the relevant protocols for example the byte size of incoming telnet messages is assumed to be the major checks which the terminal imp does make are a if an incoming control message has a byte count greater than then it is discarded page rfc b if a control command opcode greater than is found during the processing of a control message then the remainder of the control message is discarded c if an incoming data message has a byte count indicating that the bit allocation for the connection is exceeded based on the assumed byte size then the message is discarded if one control message contains several rst commands only one rrp is transmitted if several control messages each containing rst commands arrive close together only one rst is returned the actual implementation is to set a bit each time a rst is found in foreground and to reset the bit when a rrp is sent in background socket numbers are preassigned based on the hardware physical address in the terminal multiplexing device of the terminal the high order bits of the socket number give the device number in the range and the low order bits are normally or depending on the socket s gender zero is also used during icp we would be pleased to see socket number length reduced to bits in that case the high order bits would be mapped to the device and the low order bits would contain or during icp with the terminal imp as the user site the terminal imp follows the listen option rather than the init option as described at the top of page nic in other words the terminal imp does not issue the rfcs involving sockets u and u except in response to incoming rfcs involving those sockets in this context we will mention that the deadlock mentioned in nwg rfc does not exist since the icp does not give the server the listen option see nic page this rfc was put into machine readable form for entry into the online rfc archives by randy dunlap page 