 network working group m a padlipsky request for comments mit multics nic february tentative proposal for a unified user level protocol now that proposals for expansions to the telnet protocol are in vogue again rfc s and for example i d like to promote some discussion of a particular favorite of my own please note that this is presented as a tentative proposal it s an attempt to consider the desirability of a new approach not a rigorous specification to begin somewhat obliquely for some time i ve felt that we the nwg have fallen into a trap in regard to the initial connection protocol the point is that even though the icp gives us the ability to define a family of icplets by varying the contact socket there s no compelling reason why we should do so that we have done so in the ftp and rjep i view as unfortunate but also undesirable and unnecessary to take the undesirable aspects first consider the following if we continue to define a new contact socket for every new user level protocol we come up with we ll continue to need another new mechanism process procedure or patch to respond to requests for connection for each new protocol by occam s razor or the principle of economy of mechanism if you prefer this is a bad thing irrespective of the relative difficulty of implementing such mechanisms on the various hosts to implement them at all leads to a kind of conceptual clutter further a different kind of confusion is introduced by the notion which some of our number seem to be entertaining that the later user level protocols such as ftp are somehow still another level of abstraction up from telnet so it seems to me that we could spare ourselves a lot of bother both practical and theoretical if we could avoid spawning contact sockets needlessly turning to the unnecessary aspects i think that even if the case against the current approach isn t completely convincing the case for a particular alternative might be so to show that the multiple contact socket icp is unnecessary i ll try to show that what i call the unified user level protocol uulp is better the first thing to notice is that all the later protocols speak telnet this is sensible telnet works by and large why not make use of it right but why not make even more use of it in view of the fact that ftp rjep and even the initiating part of the network graphics protocol are really just ways of letting a user say to a server i don t know what you call it on your system but please perform the whatever function push or pull a file start or stop a batch job funnel some of my output through the network virtual graphics terminal module for me now padlipsky page rfc unified user level protocol proposal february why not simply put hooks in telnet to indicate that a network generic function is wanted instead of a host specific one at a given point in time then everybody can come in through telnet in ways that are already known and usually debugged and optimized and fan out to other services through a single mechanism where that single mechanism can be whatever is most appropriate to a particular host this view has the additional virtue of keeping the host answering service equivalent processes out of the act when new protocols come along where by answering service i mean that process which manages logins in general for a given host this process is of course a particularly sensitive one on those systems which worry about accounting and security that s all probably a bit vague perhaps some idea of how i think the uulp would work will cast some light on what i think it is what s needed is a way of letting the server know that it s being given a generic command i decline to call it a network virtual command but i m afraid that might be what i mean like stor or retr rather than a local command like who or sys what could be simpler than defining a telnet control code tcc for network generic function follows so if the server telnet receives a command line beginning with the ngf tcc say octal it just feeds the line to the appropriate process or procedure depending on the structure of its operating system this approach also offers a handy way of communicating back the fact that a particular protocol or piece thereof isn t available define a tcc for unimplemented generic function this feels a lot cleaner than having a close on socket mean anything from no ftp server exists here to the ftp server happens to be busy notice that the uulp automatically provides the answer to such objections as the one braden raises in rfc that there is no mechanism within the ftp for changing a password a user shouldn t have to use a different protocol to merely change his password with the uulp any system which has a password changing ability would have it available for all user level protocols because all of its abilities are made available by the generic login this seems clearly superior to having to retrofit afterthought after afterthought to the various user level protocols as we come to realize that life is more convenient when we get away from the view that each protocol lives in its own island universe i understand that one of the main motivations for going the multiple contact socket route was to avoid syntactic and semantic conflicts between the protocol and the particular host s normal command processor however locking ourselves in to special command processors exclusively is awfully procrustean so instead of cutting off the limbs to fit the bed why not use the uulp to expand the bed padlipsky page rfc unified user level protocol proposal february although this is a tentative proposal and not meant to be a detailed design spec one elaboration suggests itself which might make the general idea more attractive for ease of implementation on some systems it would probably be a good idea to define additional tcc s for begin user protocol that is the user side starts the ftp by sending the begin ftp telnet control code waits for the server to send either the same code or the one for unimplemented generic function and then proceeds or not to send stor s and retr s and the like it could also follow the i will i won t style discipline of rfc if we like probably each line is preceded by the network generic function tcc so that systems which don t pass input off to some other process can still distinguish between input to the system command processor and input to the procedure s which perform s the protocol in question although perhaps it would be preferable to have an end protocol tcc now i m the first to admit that what makes sense to me on my system may not make sense on somebody else s but it does seem plausible to me that the unified user level protocol i ve sketched here ought to be no harder to implement than the multiple contact socket mcs icp is and the advantages of the uulp over the mcs icp in terms of ease of extension and at least in my mind if not in this paper clarity make it seem worthwhile to consider further so rather than try to refine it here let me simply ask for comments both on the general notion and on the necessary iteration of the design from sketch to spec the multics scenario in iccc booklet shows how to get mail to me for those who don t feel like rfcing or phoning this rfc was put into machine readable form for entry into the online rfc archives by alex mckenzie with support from gte formerly bbn corp padlipsky page 