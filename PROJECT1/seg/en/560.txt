 nwg rfc nic implementation of interrupt keys r b kalin mit lincoln laboratory feb the current protocol specifications contain a serious logical error in the implementation of the program interrupt function this paper discusses the problem and offers a solution that is simple to implement the problem as found on most time sharing systems the program interrupt key elsewhere known as the break key or help request button has two functions it suspends temporarily the user process being run and it switches the keyboard input stream to a dormant supervisory process unaccepted input typed prior to the interrupt request remains buffered for the suspended user process subsequent typing is sent to a supervisory routine the current ncp protocol implements only half this function it pprovides through use of ins and inr control messages for the suspension of a remote process but it offers no mechanism for notifying the remote host at what time the data stream should be switched inr and ins messages are sent via the control link and because messages on this link travel concurrently with those on the user s keyboard input link the receiving host can not rely on relative arrival times as a source of synchronizing information without such information the remote ncp can not know which input characters are meant for the user process and which are meant for the supervisory routine a solution found on some systems to this problem is that of mapping the interrupt signal into some code from the character set typically an ascii control c unfortunately this is not general enough to be used within the arpa network some systems eg multics make use of all available ascii codes for other purposes none are available for such an assignment even if such an assignment could be made there is the problem of getting the interrupt character to be recognized by the remote host buffers on that user link may be full and the sending host may be unable to transmit the message containing crocker page rfc implementation of interrupt keys february the interrupt code if the remote user process loops without accepting data there is the possibility that its input buffers will never become free and that the message will never get through a partial answer is that of providing at the serving end a teletype scanner process that is always hungry for input because all input messages are immediately consumed buffers remain available and interrupt codes can get through unfortunately this implies that at times characters must be thrown away after being scanned there may be no buffer space available for them while not critical during console interactions users can type only when the program demands input this defect prevents the scanner from being driven from a text file a solution the following defines a solution to this problem for the case of ascii data streams character messages should use eight bit fields for each character code for all of the defined ascii character codes the left most bit in the eight bit field shall be zero an interrupt sync character arbitrarilly given the code octal should be placed in the data stream at the correct point in the typing sequence all codes from octal to octal are officially to be ignored by a receiving host their use is reserved for additional control information should it become necessary attempts to use them as additional character codes will meet with resistance from pdp systems that internally pack characters into seven bit fields note that this objection can not be made against the interrupt sync character because it is filtered out by the system and never appears in a user s input buffer because of the possibility that there may be an insufficient allocation to allow the user message containing the interrupt sync character to be sent the inr ins mechanism currently defined must be kept an ins control message should be sent at the time an interrupt sync character is entered into a text stream upon its reception by the foreign host the attached process should be immediately suspended and the associated input stream should be scanned if possible all input up to the interrupt sync character should be buffered for the suspended process once the sync character is found the stream crocker page rfc implementation of interrupt keys february should be switched to the newly activated supervisory process if it is not possible to buffer all of the user process s input it can be thrown away and a error message returned to the user by the supervisory process in either event it must be guaranteed that outstanding input will be consumed and message buffers will be freed so that pending character messages can be sent in the event that an interrupt sync character is received before the matching ins the user process should be suspended and the ncp should wait for the ins before proceeding the function of the ncp is the above discussion can of course be delegated a separate modulo eg a telnet process if this is done the ncp can be transparent to message content commentary the proposed change to the second level protocol described herein is not meant as a general solution but rather as a specific patch to the current ncp design with the intent of correcting a critical error its more obvious deficiencies are it only works with seven bit code character streams no extensions are allowed for ebcdic ascii or other large character sets no provision is made for interrupting a process to which there is no character stream although the author knows of no case in which the concept means more than closing the connection it requires the system to scan all data coming over an interruptable connection presumably this means that at the time the connection is created the receiving host must be told that this scan is to be done various techniques both implicit and explicit could be used the technique is not immune to loss character boundaries within a message nor can it tolerate ins control messages that do not have matching sync characters or vis versa it may not possible to get either the ins or the text message containing the interrupt sync character to a remote host possible reasons include user console failure local host failure network failure blocked control link insufficient allocation etc under such circumstances the remote process may loop indefinitely the only comprehensive solution known to the interrupt synchronization problem those that avoid the above difficulties crocker page rfc implementation of interrupt keys february require more than minor changes to the current ncp protocol unless simpler answers are suggested their implementation must be postponed until the next major design revision this rfc was put into machine readable form for entry into the online rfc archives by gert doering crocker page 