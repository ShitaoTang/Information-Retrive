 network working group j mcquillan request for comments bbn net nic june software checksumming in the imp and network reliability as the arpa network has developed over the last few years and our experience with operating the imp subnetwork has grown the issue of reliability has assumed greater importance and greater complexity this note describes some modifications that have recently been made to the imp and tip programs in this regard these changes are mechanically minor and do not affect host operation at all but they are logically noteworthy and for this reason we have explained the workings of the new imp and tip programs in some detail host personnel are advised to note particularly the modifications described in sections and as they may wish to change their own programs or operating procedures a changing view of network reliability our idea of the network has evolved as the network itself has grown initially it was thought that the only components in the network design that were prone to errors were the communications circuits and the modem interfaces in the imps are equipped with a crc checksum to detect almost all such errors the rest of the system including host interfaces imp processors memories and interfaces were all considered to be error free we have had to re evaluate this position in the light of our experience in operating the network we are faced with the problem of having to perform remote diagnosis on failures which cannot easily be classified or understood some examples of such problems include reports from host personnel of lost rfnms and lost host host protocol allocate messages inexplicable behavior in the imp of a transient nature and finally the problem of crashes the total failure of an imp perhaps affecting adjacent imps these circumstances are infrequent and are therefore difficult to correlate with other failures or with particular attempted remedies indeed it is often impossible to distinguish a software failure from a hardware failure in attempting to post mortem crashes we have sometimes found the imp program has had instructions incorrect sometimes just one or two bits picked or dropped clearly memory errors can account for almost any failure not only program crashes but also data errors which can lead to many other syndromes for instance if the address of a message is changed in transit then one host thinks the message was lost and another host may receive an extra message errors of this kind fall into two general classes errors in host messages mcquillan page rfc software checksumming in the imp june whether in the control information or the data and errors in inter imp messages primarily routing update messages in the course of the last few years it has become increasingly clear that such errors were occurring though it was difficult to speculate as to where why and how often one of the earliest problems of this kind was discovered in the harvard imp was sometimes crashing in an unknown manner so that all the other imps were affected it was finally determined that its memory was faulty and sometimes the routing messages read out from memory by the modem output interfaces were all zeroes the adjacent imps interpreted such an erroneous message as stating that the harvard imp had zero delay to all destinations that it was the best route to everywhere once this information propagated to the other imps the whole network was in a shambles the solution to this problem was to generate a software checksum for each routing message before it was sent from one imp and to check it after it was received at the other imp this software checksum in addition to the hardware checksum of the circuit checks the modem interfaces and memories at each imp and protects the imps from erroneous routing information the overhead in computing these checksums is not great since the messages are only exchanged every of a second in the first few months of we began to have a great deal of trouble with the reliability of some imps especially these in the washington area the normal procedures of calling in and working with honeywell field engineers had not cleared up several of these persistent failures and it was felt that an escalation of bbn involvement was needed to identify the exact causes of the problems therefore during much of february and march there were one or more members of the staff at various sites in the network where hardware problems were suspected the first thing we found out was that the operational imp program did not give enough diagnostic information about failures when they occurred and that the available test programs did not detect errors frequently enough to justify their use that is the errors were appearing at rather low frequency from once every few hours to once every few days compared to message rates of once a second or faster therefore we decided to try to make the operational imp program run when it could and report more information about detected hardware errors rather than keep the failing imps off the network for days at a time modifications to the imp program had two independent goals we wanted to make the software less vulnerable to hardware failures and we wanted the software to isolate the failures and report them to the ncc the technique we chose to use was generating a software checksum on all packets as they are sent out over a line we suspected that the hardware failures in the washington area were mcquillan page rfc software checksumming in the imp june happening between imps that is the packets were correct before they were sent thus a memory to memory software checksum similar to the technique installed two years before for routing messages only should be able to detect these errors on march a new version of the imp program was released with software checksum code in this program when a packet is found to have an incorrect checksum it is discarded and a copy of the data is sent to the ncc the previous imp retransmits the packet since an acknowledgment is not returned a partial list of the hardware problems that were uncovered by software checksums and subsequently fixed includes one modem interface at the aberdeen imp dropped several bits from several successive words in transferring data into memory one modem interface at the belvoir imp picked one or two bits in a single word in transferring data into memory one modem interface at the etac tip dropped the first word in transferring data out of memory a region in memory at the utah imp changed the low order two bits in some words on an irregular basis each of these problems resulted in two or three detected errors per day there were other problems that were not detected by the software checksum such as dropped interrupts this set of problems may be explained by the electronics of the high speed dmc on imps the first three machines cited above are imps with modem interfaces and they are the only such machines in the network the third interface is in a separate drawer and the total bus length seems to be too long for the driving electronics in the original design we are presently investigating various ways to fix these problems and have had some success already an end to end software checksum on packets this last experience and the earlier checksum on routing messages proved the value of a software checksum on all inter imp transmissions we have decided to extend the checksum to detect intra imp failures as well and make software checksums on all network transmissions a permanent feature of the imp system we can obtain an end to end software checksum on packets without any time gaps as follows mcquillan page rfc software checksumming in the imp june imp imp imp host host a checksum is computed at the source imp for each packet as it is received from the source host interface the checksum is verified at each intermediate imp as it is received over the circuit from the previous imp interfaces and if the checksum is in error the packet is discarded and the previous imp retransmits the packet when it does not receive an acknowledgment interface and the previous imp does not verify the checksum before the original transmission to cut the number of checks in half but when it must retransmit a packet it does verify the checksum if it finds an error it has detected an intra imp failure and the packet is lost if not then the first transmission was lost due to an inter imp failure a circuit error or was simply refused by the adjacent imp the previous imp holds a good copy of the packet which it then retransmits interface and after the packet has successfully traversed several intermediate imps it arrives at the destination imp the checksum is verified just before the packet is sent to the host interface this technique provides a checksum from the source imp to the destination imp on each packet with no gaps in time when the packet is unchecked any errors are reported to the ncc in full with a copy of the packet in question this method answers both requirements stated above it makes the imps more reliable and fault tolerant and it provides a maximum of diagnostic information for use in fault isolation this expanded checksum logic was installed in the network on june on of the major questions about such approaches is their efficiency we have been able to include the software checksum on all packets without greatly increasing the processing overhead in the imp the mcquillan page rfc software checksumming in the imp june method described above involves one checksum calculation at each imp through which a packet travels we developed a very fast checksum technique which takes only msec per word the program computes the number of words in a packet and then jumps to the appropriate entry in a chain of add instructions this produces a simple sum of the words in the packet to which the number of words in the packet is added to detect missing or extra words of zero with the inclusion of this code the effective processor bandwidth of a imp is reduced by one eighth for full length store and forward packets from a megabit per second to kilobits per second that is the imp now has the processing capability to connect to full duplex kilobit per second lines as compared to such lines without the checksum program we are aware that this add checksum is not a very good one in terms of its error detecting capabilities but it is as much as the imp can afford to do in software furthermore we emphasize that the primary goal of this modification is to assist in the remote diagnosis of intermittent hardware failures checksumming to improve the reliability of routing we mentioned earlier the catastrophic effects that follow for the network as a whole when a single imp begins to propagate incorrect routing information the experience described above involved a specific memory failure which has not recurred in the last two years but the problem is easily understood to be of a general nature in fact we recently had another network wide failure that was traced to a hardware error that resulted in erroneous routing messages after we had installed a software checksum on all inter imp transmissions the problem we had were due to a single broken instruction in the part of the imp program that builds the routing message as a result the routing messages from that imp were random data and the neighboring imps interpreted these messages as routing update information when this happened traffic flow through the network was completely disrupted and no useful work could be done until the failed imp was halted this kind of problem the introduction of incorrect routing information into the network can happen in three ways the routing message is changed in transmission the inter imp checksum should catch this the bad routing messages we saw in the network had good checksums the routing message is changed as it is constructed say by a memory or processor failure or before it is transmitted this is what we termed above an intra imp failure mcquillan page rfc software checksumming in the imp june the routing program is incorrect for hardware or software reasons we have attempted to solve the last two kinds of problems by extending the concept of software checksums the routing program has been modified to build a software checksum for the routing message as it builds the message just as if it came from a host it is important that this checksum refer to the intended contents of the routing message not the actual contents that is the program which generates the routing message builds its own software checksum as it proceeds not by reading what has been stored in the routing message area but by adding up the intended contents for each entry as it computes them the process which sends out routing messages then always verifies the checksum before transmitting them this scheme should detect all intra imp failures finally the routing program itself can be checksummed to detect any changes in the code the programs which copy in received routing messages compute new routing tables and send out routing messages each calculate the checksum of the code before executing it if the program finds a discrepancy in the checksum of the program it is about to run it immediately requests a program reload from an adjacent imp these checksums include the checksum computation itself the routing program and any constants referenced this modification should prevent a hardware failure at one imp from affecting the network at large by stopping the imp before it does any damage in terms of spreading bad routing a version of the imp program with this added protection for routing was released on may in the first few months of there have been several other efforts aimed at improving the reliability of the network in addition to software checksumming in the imps at the same time that we were discovering inter imp failures with the software checksum packets we began to notice a different kind of problem with intra imp failures in these cases we were primarily faced with memory problems and they often affected the imp program itself rather than the packets flowing through the imp our first attack on this problem was to build a pdp program to verify the running imp and tip programs at a site against the correct core images held at the pdp the program interrogates the imp with ddt messages and prints out a list of discrepancies using this program we have already found memory failures at one site mcquillan page rfc software checksumming in the imp june tip modifications the hardware difficulties which we began to experience during the first few months of had two effects on host to host communication first the intermittent modem interface failures of the type seen at belvoir aberdeen and etac meant that messages were occasionally lost by the network this loss is reported to the transmitting host by the incomplete transmission message generated by the source imp the host must then decide whether to retransmit or to take some other action second the higher than normal incidence of machine failures meant that the network sometimes partitioned so that there was no path between the two communicating hosts it should be noted that contrary to the original design two sites are currently connected to the network by only a single path other similar connections are planned for any such sites any failure along the single path will be seen as a partition since a tip acts as a host for its users its resilience when these types of failures occur has a major effect on user satisfaction prior to this time the tip program aborted the user s connection if it received an incomplete transmission indication from the imp program in march the tip program and the programs of several other hosts was changed to retransmit messages for which the incomplete transmission indication was returned some hosts e g multics have done this from the start this modification has turned out to be relatively simple and we urge other hosts to consider implementing some sort of error recovery software on the other hand it has not seemed reasonable to continue attempting to transmit when the program receives a destination unreachable indication since this could arise either from a network partition or from a failure at the destination site the interactive user is of course free to try again manually a different situation pertains to tape transfers involving tips with the magnetic tape option in these cases the user would like to start the process and then ignore it until the transfer is finished network partitions even if infrequent may occur when tape transfers many hours in length are in progress therefore we made a significant modification to the tip magnetic tape option to include a sequencing mechanism in the tape transfer protocol which permits automatic recovery and transmission continuation after most kinds of network transients with this mechanism in effect and assuming a tape is mounted at the other end the complete transfer of a tape is possible with a single command given at either end if the connection goes dead in mid transfer the tip magnetic tape software will attempt to reopen the connection until successful and then continue the transfer from where it was left off in addition to modifying the tip magnetic tape option as specified above we also mcquillan page rfc software checksumming in the imp june modified the tenex program which is able to communicate with the tip magnetic tape option so that it remained compatible these changes were installed in april future plans we have been considering some of the issues of network reliability discussed above in connection with the development of the new high speed modular imp this design effort and the experiences with the current imp system are of course linked together and we have already decided on several approaches to be taken in the new line of imps the imp will have a hardware crc checksum generator which returns the checksum on a specified range of memory the imp will use this facility to generate and check an end to end checksum on messages this checksum will therefore be more comprehensive and better for error detection than the current software checksum it will insure a high degree of reliability for host transmissions in addition the imp will perform a verification of a packet checksum at each hop to provide diagnostic information this check will be on an optional basis whenever the system has available resources for the check the code for the new imp system will be read only this is impractical for the present and imps and the program will periodically checksum itself using the hardware crc generator we hope to design the program so that it can be reloaded in segments in the event of a detected error in the code with no service interruption finally we are looking into the structure of an optional imp host host imp checksum to complete host host end to end checksum under such an arrangement the imp and host could agree to verify the checksums on the messages transferred over the interface between them and the appropriate signalling mechanisms would be provided to handled errors with this technique in effect two hosts could be certain that their messages were delivered error free or else they would be notified of an error and could then retransmit their message if desired mcquillan page rfc software checksumming in the imp june more details on any such modifications to the imp and to the imp host interface will be published when appropriate this rfc was put into machine readable form for entry into the online rfc archives by via genie mcquillan page 